
Lab5_Simplified.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e14  08003e14  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e14  08003e14  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e14  08003e14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000070  08003e8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08003e8c  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000baa8  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c7f  00000000  00000000  0002bb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  0002d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a84  00000000  00000000  0002e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017cdc  00000000  00000000  0002effc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb9b  00000000  00000000  00046cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ad2d  00000000  00000000  00055873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d74  00000000  00000000  000e05a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000e4314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bc8 	.word	0x08003bc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003bc8 	.word	0x08003bc8

0800014c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000156:	4a38      	ldr	r2, [pc, #224]	; (8000238 <HD44780_Init+0xec>)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800015c:	4b37      	ldr	r3, [pc, #220]	; (800023c <HD44780_Init+0xf0>)
 800015e:	2208      	movs	r2, #8
 8000160:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000162:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf4>)
 8000164:	2200      	movs	r2, #0
 8000166:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000168:	4b33      	ldr	r3, [pc, #204]	; (8000238 <HD44780_Init+0xec>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d907      	bls.n	8000180 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000170:	4b33      	ldr	r3, [pc, #204]	; (8000240 <HD44780_Init+0xf4>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	f043 0308 	orr.w	r3, r3, #8
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b31      	ldr	r3, [pc, #196]	; (8000240 <HD44780_Init+0xf4>)
 800017c:	701a      	strb	r2, [r3, #0]
 800017e:	e006      	b.n	800018e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000180:	4b2f      	ldr	r3, [pc, #188]	; (8000240 <HD44780_Init+0xf4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0304 	orr.w	r3, r3, #4
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b2d      	ldr	r3, [pc, #180]	; (8000240 <HD44780_Init+0xf4>)
 800018c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800018e:	f000 f985 	bl	800049c <DelayInit>
  HAL_Delay(50);
 8000192:	2032      	movs	r0, #50	; 0x32
 8000194:	f001 f8a2 	bl	80012dc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000198:	4b28      	ldr	r3, [pc, #160]	; (800023c <HD44780_Init+0xf0>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f943 	bl	8000428 <ExpanderWrite>
  HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f001 f899 	bl	80012dc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001aa:	2030      	movs	r0, #48	; 0x30
 80001ac:	f000 f92b 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b4:	f000 f99a 	bl	80004ec <DelayUS>

  Write4Bits(0x03 << 4);
 80001b8:	2030      	movs	r0, #48	; 0x30
 80001ba:	f000 f924 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001be:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c2:	f000 f993 	bl	80004ec <DelayUS>

  Write4Bits(0x03 << 4);
 80001c6:	2030      	movs	r0, #48	; 0x30
 80001c8:	f000 f91d 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001cc:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d0:	f000 f98c 	bl	80004ec <DelayUS>

  Write4Bits(0x02 << 4);
 80001d4:	2020      	movs	r0, #32
 80001d6:	f000 f916 	bl	8000406 <Write4Bits>
  DelayUS(100);
 80001da:	2064      	movs	r0, #100	; 0x64
 80001dc:	f000 f986 	bl	80004ec <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e0:	4b17      	ldr	r3, [pc, #92]	; (8000240 <HD44780_Init+0xf4>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	f043 0320 	orr.w	r3, r3, #32
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f8ce 	bl	800038c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <HD44780_Init+0xf8>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001f6:	f000 f875 	bl	80002e4 <HD44780_Display>
  HD44780_Clear();
 80001fa:	f000 f82b 	bl	8000254 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80001fe:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HD44780_Init+0xfc>)
 8000200:	2202      	movs	r2, #2
 8000202:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <HD44780_Init+0xfc>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	f043 0304 	orr.w	r3, r3, #4
 800020c:	b2db      	uxtb	r3, r3
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f8bc 	bl	800038c <SendCommand>
  DelayUS(4500);
 8000214:	f241 1094 	movw	r0, #4500	; 0x1194
 8000218:	f000 f968 	bl	80004ec <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800021c:	490b      	ldr	r1, [pc, #44]	; (800024c <HD44780_Init+0x100>)
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f876 	bl	8000310 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000224:	490a      	ldr	r1, [pc, #40]	; (8000250 <HD44780_Init+0x104>)
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f872 	bl	8000310 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800022c:	f000 f81d 	bl	800026a <HD44780_Home>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	2000008f 	.word	0x2000008f
 800023c:	20000090 	.word	0x20000090
 8000240:	2000008c 	.word	0x2000008c
 8000244:	2000008d 	.word	0x2000008d
 8000248:	2000008e 	.word	0x2000008e
 800024c:	20000000 	.word	0x20000000
 8000250:	20000008 	.word	0x20000008

08000254 <HD44780_Clear>:

void HD44780_Clear()
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 f897 	bl	800038c <SendCommand>
  DelayUS(2000);
 800025e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000262:	f000 f943 	bl	80004ec <DelayUS>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}

0800026a <HD44780_Home>:

void HD44780_Home()
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800026e:	2002      	movs	r0, #2
 8000270:	f000 f88c 	bl	800038c <SendCommand>
  DelayUS(2000);
 8000274:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000278:	f000 f938 	bl	80004ec <DelayUS>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	460a      	mov	r2, r1
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <HD44780_SetCursor+0x5c>)
 8000292:	f107 0408 	add.w	r4, r7, #8
 8000296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <HD44780_SetCursor+0x60>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d303      	bcc.n	80002ae <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <HD44780_SetCursor+0x60>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	3318      	adds	r3, #24
 80002b4:	443b      	add	r3, r7
 80002b6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4413      	add	r3, r2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002c8:	b25b      	sxtb	r3, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f85d 	bl	800038c <SendCommand>
}
 80002d2:	bf00      	nop
 80002d4:	371c      	adds	r7, #28
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd90      	pop	{r4, r7, pc}
 80002da:	bf00      	nop
 80002dc:	08003be0 	.word	0x08003be0
 80002e0:	2000008f 	.word	0x2000008f

080002e4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <HD44780_Display+0x28>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <HD44780_Display+0x28>)
 80002f4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HD44780_Display+0x28>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f843 	bl	800038c <SendCommand>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000008d 	.word	0x2000008d

08000310 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 0307 	and.w	r3, r3, #7
 8000322:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	00db      	lsls	r3, r3, #3
 8000328:	b25b      	sxtb	r3, r3
 800032a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800032e:	b25b      	sxtb	r3, r3
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f82a 	bl	800038c <SendCommand>
  for (int i=0; i<8; i++)
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	e009      	b.n	8000352 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	4413      	add	r3, r2
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f82e 	bl	80003a8 <SendChar>
  for (int i=0; i<8; i++)
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b07      	cmp	r3, #7
 8000356:	ddf2      	ble.n	800033e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036a:	e006      	b.n	800037a <HD44780_PrintStr+0x18>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	607a      	str	r2, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f817 	bl	80003a8 <SendChar>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d1f4      	bne.n	800036c <HD44780_PrintStr+0xa>
}
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f812 	bl	80003c4 <Send>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2101      	movs	r1, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f804 	bl	80003c4 <Send>
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	460a      	mov	r2, r1
 80003ce:	71fb      	strb	r3, [r7, #7]
 80003d0:	4613      	mov	r3, r2
 80003d2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f023 030f 	bic.w	r3, r3, #15
 80003da:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	011b      	lsls	r3, r3, #4
 80003e0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003e2:	7bfa      	ldrb	r2, [r7, #15]
 80003e4:	79bb      	ldrb	r3, [r7, #6]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f80b 	bl	8000406 <Write4Bits>
  Write4Bits((lownib)|mode);
 80003f0:	7bba      	ldrb	r2, [r7, #14]
 80003f2:	79bb      	ldrb	r3, [r7, #6]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f804 	bl	8000406 <Write4Bits>
}
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f808 	bl	8000428 <ExpanderWrite>
  PulseEnable(value);
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f820 	bl	8000460 <PulseEnable>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af02      	add	r7, sp, #8
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <ExpanderWrite+0x30>)
 8000434:	781a      	ldrb	r2, [r3, #0]
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	4313      	orrs	r3, r2
 800043a:	b2db      	uxtb	r3, r3
 800043c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800043e:	f107 020f 	add.w	r2, r7, #15
 8000442:	230a      	movs	r3, #10
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2301      	movs	r3, #1
 8000448:	214e      	movs	r1, #78	; 0x4e
 800044a:	4804      	ldr	r0, [pc, #16]	; (800045c <ExpanderWrite+0x34>)
 800044c:	f001 fb88 	bl	8001b60 <HAL_I2C_Master_Transmit>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000090 	.word	0x20000090
 800045c:	20000094 	.word	0x20000094

08000460 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	f043 0304 	orr.w	r3, r3, #4
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ffd8 	bl	8000428 <ExpanderWrite>
  DelayUS(20);
 8000478:	2014      	movs	r0, #20
 800047a:	f000 f837 	bl	80004ec <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	f023 0304 	bic.w	r3, r3, #4
 8000484:	b2db      	uxtb	r3, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ffce 	bl	8000428 <ExpanderWrite>
  DelayUS(20);
 800048c:	2014      	movs	r0, #20
 800048e:	f000 f82d 	bl	80004ec <DelayUS>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <DelayInit>:

static void DelayInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <DelayInit+0x48>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <DelayInit+0x48>)
 80004a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004aa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004ac:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <DelayInit+0x48>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <DelayInit+0x48>)
 80004b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004b6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <DelayInit+0x4c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a0a      	ldr	r2, [pc, #40]	; (80004e8 <DelayInit+0x4c>)
 80004be:	f023 0301 	bic.w	r3, r3, #1
 80004c2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <DelayInit+0x4c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <DelayInit+0x4c>)
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <DelayInit+0x4c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004d6:	bf00      	nop
  __ASM volatile ("NOP");
 80004d8:	bf00      	nop
  __ASM volatile ("NOP");
 80004da:	bf00      	nop
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	e000edf0 	.word	0xe000edf0
 80004e8:	e0001000 	.word	0xe0001000

080004ec <DelayUS>:

static void DelayUS(uint32_t us) {
 80004ec:	b480      	push	{r7}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <DelayUS+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <DelayUS+0x44>)
 80004fa:	fba2 2303 	umull	r2, r3, r2, r3
 80004fe:	0c9a      	lsrs	r2, r3, #18
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	fb02 f303 	mul.w	r3, r2, r3
 8000506:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <DelayUS+0x48>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <DelayUS+0x48>)
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	697a      	ldr	r2, [r7, #20]
 800051c:	429a      	cmp	r2, r3
 800051e:	d8f6      	bhi.n	800050e <DelayUS+0x22>
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	371c      	adds	r7, #28
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	20000014 	.word	0x20000014
 8000530:	431bde83 	.word	0x431bde83
 8000534:	e0001000 	.word	0xe0001000

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fe6c 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f86a 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f9c4 	bl	80008d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000548:	f000 f8d8 	bl	80006fc <MX_TIM2_Init>
  MX_TIM3_Init();
 800054c:	f000 f924 	bl	8000798 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000550:	f000 f970 	bl	8000834 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000554:	f000 f8a4 	bl	80006a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000558:	2002      	movs	r0, #2
 800055a:	f7ff fdf7 	bl	800014c <HD44780_Init>
  HD44780_Clear();
 800055e:	f7ff fe79 	bl	8000254 <HD44780_Clear>
  S = AllStop;
 8000562:	4b26      	ldr	r3, [pc, #152]	; (80005fc <main+0xc4>)
 8000564:	220a      	movs	r2, #10
 8000566:	801a      	strh	r2, [r3, #0]
  while(1) {
	  //
	  TIM2->CNT = 0;
 8000568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800056c:	2200      	movs	r2, #0
 800056e:	625a      	str	r2, [r3, #36]	; 0x24
	  TIM3->CNT = 0;
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <main+0xc8>)
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	; 0x24
	  TIM4->CNT = 0;
 8000576:	4b23      	ldr	r3, [pc, #140]	; (8000604 <main+0xcc>)
 8000578:	2200      	movs	r2, #0
 800057a:	625a      	str	r2, [r3, #36]	; 0x24
	  // set output
//	  GPIOA->ODR = (fsm[S].out);
	  GPIOA->ODR = (fsm[S].out)|((fsm[S].out & 0x100)<<1);
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <main+0xc4>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	4a21      	ldr	r2, [pc, #132]	; (8000608 <main+0xd0>)
 8000584:	460b      	mov	r3, r1
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	440b      	add	r3, r1
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	4413      	add	r3, r2
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <main+0xc4>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	491c      	ldr	r1, [pc, #112]	; (8000608 <main+0xd0>)
 8000598:	4603      	mov	r3, r0
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4403      	add	r3, r0
 800059e:	00db      	lsls	r3, r3, #3
 80005a0:	440b      	add	r3, r1
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005aa:	4918      	ldr	r1, [pc, #96]	; (800060c <main+0xd4>)
 80005ac:	4313      	orrs	r3, r2
 80005ae:	60cb      	str	r3, [r1, #12]
	  // delay
	  TimerDelayMs(fsm[S].wait);
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <main+0xc4>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	4a14      	ldr	r2, [pc, #80]	; (8000608 <main+0xd0>)
 80005b8:	460b      	mov	r3, r1
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	440b      	add	r3, r1
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	4413      	add	r3, r2
 80005c2:	3304      	adds	r3, #4
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fae8 	bl	8000b9c <TimerDelayMs>
	  //read input
	  Input = inputValue;
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0xd8>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <main+0xdc>)
 80005d4:	601a      	str	r2, [r3, #0]
	  //S = next state
	  S = fsm[S].next[Input];
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <main+0xc4>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <main+0xdc>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4909      	ldr	r1, [pc, #36]	; (8000608 <main+0xd0>)
 80005e2:	4603      	mov	r3, r0
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	4403      	add	r3, r0
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	3302      	adds	r3, #2
 80005ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <main+0xc4>)
 80005f6:	801a      	strh	r2, [r3, #0]
	  TIM2->CNT = 0;
 80005f8:	e7b6      	b.n	8000568 <main+0x30>
 80005fa:	bf00      	nop
 80005fc:	200001c0 	.word	0x200001c0
 8000600:	40000400 	.word	0x40000400
 8000604:	40000800 	.word	0x40000800
 8000608:	08003bfc 	.word	0x08003bfc
 800060c:	40010800 	.word	0x40010800
 8000610:	200001c6 	.word	0x200001c6
 8000614:	20000010 	.word	0x20000010

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b090      	sub	sp, #64	; 0x40
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2228      	movs	r2, #40	; 0x28
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fe3c 	bl	80032a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000656:	2300      	movs	r3, #0
 8000658:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fdd6 	bl	8002210 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800066a:	f000 fc47 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2101      	movs	r1, #1
 8000686:	4618      	mov	r0, r3
 8000688:	f002 f844 	bl	8002714 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000692:	f000 fc33 	bl	8000efc <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3740      	adds	r7, #64	; 0x40
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f001 f8fb 	bl	80018d8 <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 fc08 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000094 	.word	0x20000094
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_TIM2_Init+0x98>)
 800071a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_TIM2_Init+0x98>)
 8000722:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000726:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_TIM2_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-100;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_TIM2_Init+0x98>)
 8000730:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8000734:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_TIM2_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_TIM2_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000742:	4814      	ldr	r0, [pc, #80]	; (8000794 <MX_TIM2_Init+0x98>)
 8000744:	f002 f962 	bl	8002a0c <HAL_TIM_Base_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800074e:	f000 fbd5 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	4619      	mov	r1, r3
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_TIM2_Init+0x98>)
 8000760:	f002 fb2c 	bl	8002dbc <HAL_TIM_ConfigClockSource>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800076a:	f000 fbc7 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_TIM2_Init+0x98>)
 800077c:	f002 fd02 	bl	8003184 <HAL_TIMEx_MasterConfigSynchronization>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000786:	f000 fbb9 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000e8 	.word	0x200000e8

08000798 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_TIM3_Init+0x94>)
 80007b6:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <MX_TIM3_Init+0x98>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_TIM3_Init+0x94>)
 80007bc:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80007c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_TIM3_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-100;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_TIM3_Init+0x94>)
 80007ca:	f241 3224 	movw	r2, #4900	; 0x1324
 80007ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_TIM3_Init+0x94>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_TIM3_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <MX_TIM3_Init+0x94>)
 80007de:	f002 f915 	bl	8002a0c <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007e8:	f000 fb88 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_TIM3_Init+0x94>)
 80007fa:	f002 fadf 	bl	8002dbc <HAL_TIM_ConfigClockSource>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000804:	f000 fb7a 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_TIM3_Init+0x94>)
 8000816:	f002 fcb5 	bl	8003184 <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000820:	f000 fb6c 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000130 	.word	0x20000130
 8000830:	40000400 	.word	0x40000400

08000834 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	463b      	mov	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_TIM4_Init+0x94>)
 8000852:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <MX_TIM4_Init+0x98>)
 8000854:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000-1;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_TIM4_Init+0x94>)
 8000858:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800085c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_TIM4_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-100;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_TIM4_Init+0x94>)
 8000866:	f44f 7261 	mov.w	r2, #900	; 0x384
 800086a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_TIM4_Init+0x94>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_TIM4_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <MX_TIM4_Init+0x94>)
 800087a:	f002 f8c7 	bl	8002a0c <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000884:	f000 fb3a 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_TIM4_Init+0x94>)
 8000896:	f002 fa91 	bl	8002dbc <HAL_TIM_ConfigClockSource>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008a0:	f000 fb2c 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_TIM4_Init+0x94>)
 80008b2:	f002 fc67 	bl	8003184 <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008bc:	f000 fb1e 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000178 	.word	0x20000178
 80008cc:	40000800 	.word	0x40000800

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e4:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <MX_GPIO_Init+0xd8>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a2f      	ldr	r2, [pc, #188]	; (80009a8 <MX_GPIO_Init+0xd8>)
 80008ea:	f043 0320 	orr.w	r3, r3, #32
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <MX_GPIO_Init+0xd8>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0320 	and.w	r3, r3, #32
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <MX_GPIO_Init+0xd8>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a29      	ldr	r2, [pc, #164]	; (80009a8 <MX_GPIO_Init+0xd8>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <MX_GPIO_Init+0xd8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <MX_GPIO_Init+0xd8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a23      	ldr	r2, [pc, #140]	; (80009a8 <MX_GPIO_Init+0xd8>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_GPIO_Init+0xd8>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800092c:	2200      	movs	r2, #0
 800092e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000932:	481e      	ldr	r0, [pc, #120]	; (80009ac <MX_GPIO_Init+0xdc>)
 8000934:	f000 ff9f 	bl	8001876 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000938:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800093c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2302      	movs	r3, #2
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4619      	mov	r1, r3
 8000950:	4816      	ldr	r0, [pc, #88]	; (80009ac <MX_GPIO_Init+0xdc>)
 8000952:	f000 fdf5 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000956:	2338      	movs	r3, #56	; 0x38
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_GPIO_Init+0xe0>)
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4619      	mov	r1, r3
 8000968:	4812      	ldr	r0, [pc, #72]	; (80009b4 <MX_GPIO_Init+0xe4>)
 800096a:	f000 fde9 	bl	8001540 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2101      	movs	r1, #1
 8000972:	2009      	movs	r0, #9
 8000974:	f000 fdad 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000978:	2009      	movs	r0, #9
 800097a:	f000 fdc6 	bl	800150a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2101      	movs	r1, #1
 8000982:	200a      	movs	r0, #10
 8000984:	f000 fda5 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000988:	200a      	movs	r0, #10
 800098a:	f000 fdbe 	bl	800150a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2101      	movs	r1, #1
 8000992:	2017      	movs	r0, #23
 8000994:	f000 fd9d 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000998:	2017      	movs	r0, #23
 800099a:	f000 fdb6 	bl	800150a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3720      	adds	r7, #32
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	10310000 	.word	0x10310000
 80009b4:	40010c00 	.word	0x40010c00

080009b8 <sendRemaningTime>:

/* USER CODE BEGIN 4 */

static void sendRemaningTime(uint8_t color, uint32_t time) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	71fb      	strb	r3, [r7, #7]
	count1 = time;
 80009c4:	4a67      	ldr	r2, [pc, #412]	; (8000b64 <sendRemaningTime+0x1ac>)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	6013      	str	r3, [r2, #0]
	greenCNT = TIM2->CNT;
 80009ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b65      	ldr	r3, [pc, #404]	; (8000b68 <sendRemaningTime+0x1b0>)
 80009d4:	801a      	strh	r2, [r3, #0]
	yellowCNT = TIM3->CNT;
 80009d6:	4b65      	ldr	r3, [pc, #404]	; (8000b6c <sendRemaningTime+0x1b4>)
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b64      	ldr	r3, [pc, #400]	; (8000b70 <sendRemaningTime+0x1b8>)
 80009de:	801a      	strh	r2, [r3, #0]
	warnCNT = TIM4->CNT;
 80009e0:	4b64      	ldr	r3, [pc, #400]	; (8000b74 <sendRemaningTime+0x1bc>)
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b64      	ldr	r3, [pc, #400]	; (8000b78 <sendRemaningTime+0x1c0>)
 80009e8:	801a      	strh	r2, [r3, #0]
	time /= 1000;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	4a63      	ldr	r2, [pc, #396]	; (8000b7c <sendRemaningTime+0x1c4>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	099b      	lsrs	r3, r3, #6
 80009f4:	603b      	str	r3, [r7, #0]
	count2 = time;
 80009f6:	4a62      	ldr	r2, [pc, #392]	; (8000b80 <sendRemaningTime+0x1c8>)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	6013      	str	r3, [r2, #0]

	switch(color)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	f200 80aa 	bhi.w	8000b5a <sendRemaningTime+0x1a2>
 8000a06:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <sendRemaningTime+0x54>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a1d 	.word	0x08000a1d
 8000a10:	08000a4d 	.word	0x08000a4d
 8000a14:	08000a6b 	.word	0x08000a6b
 8000a18:	08000b47 	.word	0x08000b47
	{
	case 1: // green
		HD44780_Clear();
 8000a1c:	f7ff fc1a 	bl	8000254 <HD44780_Clear>
		HD44780_SetCursor(14,0);
 8000a20:	2100      	movs	r1, #0
 8000a22:	200e      	movs	r0, #14
 8000a24:	f7ff fc2c 	bl	8000280 <HD44780_SetCursor>
		sprintf(lcdCNT,"%02ld", time+greenEnd*10);
 8000a28:	4b56      	ldr	r3, [pc, #344]	; (8000b84 <sendRemaningTime+0x1cc>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	461a      	mov	r2, r3
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4952      	ldr	r1, [pc, #328]	; (8000b88 <sendRemaningTime+0x1d0>)
 8000a3e:	4853      	ldr	r0, [pc, #332]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000a40:	f002 fc10 	bl	8003264 <siprintf>
		HD44780_PrintStr(lcdCNT);
 8000a44:	4851      	ldr	r0, [pc, #324]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000a46:	f7ff fc8c 	bl	8000362 <HD44780_PrintStr>
		break;
 8000a4a:	e086      	b.n	8000b5a <sendRemaningTime+0x1a2>
	case 2: // yellow
		HD44780_Clear();
 8000a4c:	f7ff fc02 	bl	8000254 <HD44780_Clear>
		HD44780_SetCursor(7,0);
 8000a50:	2100      	movs	r1, #0
 8000a52:	2007      	movs	r0, #7
 8000a54:	f7ff fc14 	bl	8000280 <HD44780_SetCursor>
		sprintf(lcdCNT,"%02ld", time);
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	494b      	ldr	r1, [pc, #300]	; (8000b88 <sendRemaningTime+0x1d0>)
 8000a5c:	484b      	ldr	r0, [pc, #300]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000a5e:	f002 fc01 	bl	8003264 <siprintf>
		HD44780_PrintStr(lcdCNT);
 8000a62:	484a      	ldr	r0, [pc, #296]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000a64:	f7ff fc7d 	bl	8000362 <HD44780_PrintStr>
//		HD44780_PrintStr("Hello World");
		break;
 8000a68:	e077      	b.n	8000b5a <sendRemaningTime+0x1a2>
	case 3: // warn
		HD44780_Clear();
 8000a6a:	f7ff fbf3 	bl	8000254 <HD44780_Clear>
		HD44780_SetCursor(7,0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2007      	movs	r0, #7
 8000a72:	f7ff fc05 	bl	8000280 <HD44780_SetCursor>
		if(warnEnds == 1) {
 8000a76:	4b46      	ldr	r3, [pc, #280]	; (8000b90 <sendRemaningTime+0x1d8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d10d      	bne.n	8000a9a <sendRemaningTime+0xe2>
			sprintf(lcdCNT,"%02ld", warnTime);
 8000a7e:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4940      	ldr	r1, [pc, #256]	; (8000b88 <sendRemaningTime+0x1d0>)
 8000a86:	4841      	ldr	r0, [pc, #260]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000a88:	f002 fbec 	bl	8003264 <siprintf>
			HD44780_PrintStr(lcdCNT);
 8000a8c:	483f      	ldr	r0, [pc, #252]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000a8e:	f7ff fc68 	bl	8000362 <HD44780_PrintStr>
			warnTime = 1;
 8000a92:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
			break;
 8000a98:	e05f      	b.n	8000b5a <sendRemaningTime+0x1a2>
		} else if (warnEnds == 2) {
 8000a9a:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <sendRemaningTime+0x1d8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d10d      	bne.n	8000abe <sendRemaningTime+0x106>
			sprintf(lcdCNT,"%02ld", warnTime);
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4937      	ldr	r1, [pc, #220]	; (8000b88 <sendRemaningTime+0x1d0>)
 8000aaa:	4838      	ldr	r0, [pc, #224]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000aac:	f002 fbda 	bl	8003264 <siprintf>
			HD44780_PrintStr(lcdCNT);
 8000ab0:	4836      	ldr	r0, [pc, #216]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000ab2:	f7ff fc56 	bl	8000362 <HD44780_PrintStr>
			warnTime = 2;
 8000ab6:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	601a      	str	r2, [r3, #0]
			break;
 8000abc:	e04d      	b.n	8000b5a <sendRemaningTime+0x1a2>
		} else if (warnEnds == 3) {
 8000abe:	4b34      	ldr	r3, [pc, #208]	; (8000b90 <sendRemaningTime+0x1d8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d10d      	bne.n	8000ae2 <sendRemaningTime+0x12a>
			sprintf(lcdCNT,"%02ld", warnTime);
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	492e      	ldr	r1, [pc, #184]	; (8000b88 <sendRemaningTime+0x1d0>)
 8000ace:	482f      	ldr	r0, [pc, #188]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000ad0:	f002 fbc8 	bl	8003264 <siprintf>
			HD44780_PrintStr(lcdCNT);
 8000ad4:	482d      	ldr	r0, [pc, #180]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000ad6:	f7ff fc44 	bl	8000362 <HD44780_PrintStr>
			warnTime = 3;
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000adc:	2203      	movs	r2, #3
 8000ade:	601a      	str	r2, [r3, #0]
			break;
 8000ae0:	e03b      	b.n	8000b5a <sendRemaningTime+0x1a2>
		} else if (warnEnds == 4) {
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <sendRemaningTime+0x1d8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	d10d      	bne.n	8000b06 <sendRemaningTime+0x14e>
			sprintf(lcdCNT,"%02ld", warnTime);
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4925      	ldr	r1, [pc, #148]	; (8000b88 <sendRemaningTime+0x1d0>)
 8000af2:	4826      	ldr	r0, [pc, #152]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000af4:	f002 fbb6 	bl	8003264 <siprintf>
			HD44780_PrintStr(lcdCNT);
 8000af8:	4824      	ldr	r0, [pc, #144]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000afa:	f7ff fc32 	bl	8000362 <HD44780_PrintStr>
			warnTime = 4;
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000b00:	2204      	movs	r2, #4
 8000b02:	601a      	str	r2, [r3, #0]
			break;
 8000b04:	e029      	b.n	8000b5a <sendRemaningTime+0x1a2>
		} else if (warnEnds == 5) {
 8000b06:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <sendRemaningTime+0x1d8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	d10d      	bne.n	8000b2a <sendRemaningTime+0x172>
			sprintf(lcdCNT,"%02ld", warnTime);
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	491c      	ldr	r1, [pc, #112]	; (8000b88 <sendRemaningTime+0x1d0>)
 8000b16:	481d      	ldr	r0, [pc, #116]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000b18:	f002 fba4 	bl	8003264 <siprintf>
			HD44780_PrintStr(lcdCNT);
 8000b1c:	481b      	ldr	r0, [pc, #108]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000b1e:	f7ff fc20 	bl	8000362 <HD44780_PrintStr>
			warnTime = 0;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
			break;
 8000b28:	e017      	b.n	8000b5a <sendRemaningTime+0x1a2>
		} else {
			sprintf(lcdCNT,"%02ld", warnTime);
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4915      	ldr	r1, [pc, #84]	; (8000b88 <sendRemaningTime+0x1d0>)
 8000b32:	4816      	ldr	r0, [pc, #88]	; (8000b8c <sendRemaningTime+0x1d4>)
 8000b34:	f002 fb96 	bl	8003264 <siprintf>
			HD44780_PrintStr("00");
 8000b38:	4817      	ldr	r0, [pc, #92]	; (8000b98 <sendRemaningTime+0x1e0>)
 8000b3a:	f7ff fc12 	bl	8000362 <HD44780_PrintStr>
			warnTime = 0;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <sendRemaningTime+0x1dc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
			break;
 8000b44:	e009      	b.n	8000b5a <sendRemaningTime+0x1a2>
		}
		break;
	case 4: // allRed
		HD44780_Clear();
 8000b46:	f7ff fb85 	bl	8000254 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fb97 	bl	8000280 <HD44780_SetCursor>
		HD44780_PrintStr("00");
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <sendRemaningTime+0x1e0>)
 8000b54:	f7ff fc05 	bl	8000362 <HD44780_PrintStr>
	}
}
 8000b58:	e7ff      	b.n	8000b5a <sendRemaningTime+0x1a2>
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200001e0 	.word	0x200001e0
 8000b68:	200001e8 	.word	0x200001e8
 8000b6c:	40000400 	.word	0x40000400
 8000b70:	200001ea 	.word	0x200001ea
 8000b74:	40000800 	.word	0x40000800
 8000b78:	200001ec 	.word	0x200001ec
 8000b7c:	10624dd3 	.word	0x10624dd3
 8000b80:	200001e4 	.word	0x200001e4
 8000b84:	200001c8 	.word	0x200001c8
 8000b88:	08003bf0 	.word	0x08003bf0
 8000b8c:	200001f4 	.word	0x200001f4
 8000b90:	200001dc 	.word	0x200001dc
 8000b94:	200001f0 	.word	0x200001f0
 8000b98:	08003bf8 	.word	0x08003bf8

08000b9c <TimerDelayMs>:

static void TimerDelayMs(uint32_t time) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	bool jumpToMain = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
	switch (time)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a6e      	ldr	r2, [pc, #440]	; (8000d64 <TimerDelayMs+0x1c8>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d072      	beq.n	8000c96 <TimerDelayMs+0xfa>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a6c      	ldr	r2, [pc, #432]	; (8000d64 <TimerDelayMs+0x1c8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	f200 80cd 	bhi.w	8000d54 <TimerDelayMs+0x1b8>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d010      	beq.n	8000be6 <TimerDelayMs+0x4a>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	f200 80c2 	bhi.w	8000d54 <TimerDelayMs+0x1b8>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bd6:	f000 809d 	beq.w	8000d14 <TimerDelayMs+0x178>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d075      	beq.n	8000cd0 <TimerDelayMs+0x134>
				break;
			}
		}
		break;
	default:
		break;
 8000be4:	e0b6      	b.n	8000d54 <TimerDelayMs+0x1b8>
		warnEnds = 0;
 8000be6:	4b60      	ldr	r3, [pc, #384]	; (8000d68 <TimerDelayMs+0x1cc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
		if(greenEnd == 0) {
 8000bec:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <TimerDelayMs+0x1d0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d124      	bne.n	8000c3e <TimerDelayMs+0xa2>
			HAL_TIM_Base_Start_IT(&htim2);
 8000bf4:	485e      	ldr	r0, [pc, #376]	; (8000d70 <TimerDelayMs+0x1d4>)
 8000bf6:	f001 ff59 	bl	8002aac <HAL_TIM_Base_Start_IT>
			if(greenEnds == 0) {
 8000bfa:	4b5e      	ldr	r3, [pc, #376]	; (8000d74 <TimerDelayMs+0x1d8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d107      	bne.n	8000c12 <TimerDelayMs+0x76>
				greenEnds ++;
 8000c02:	4b5c      	ldr	r3, [pc, #368]	; (8000d74 <TimerDelayMs+0x1d8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a5a      	ldr	r2, [pc, #360]	; (8000d74 <TimerDelayMs+0x1d8>)
 8000c0a:	6013      	str	r3, [r2, #0]
				greenEnd = 0;
 8000c0c:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <TimerDelayMs+0x1d0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
				sendRemaningTime(GREEN, TIM2->CNT);
 8000c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff fecc 	bl	80009b8 <sendRemaningTime>
				if(greenEnd == 1) {
 8000c20:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <TimerDelayMs+0x1d0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d1f4      	bne.n	8000c12 <TimerDelayMs+0x76>
					greenCNT = TIM2->CNT;
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b51      	ldr	r3, [pc, #324]	; (8000d78 <TimerDelayMs+0x1dc>)
 8000c32:	801a      	strh	r2, [r3, #0]
					jumpToMain = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	75fb      	strb	r3, [r7, #23]
					HAL_TIM_Base_Stop_IT(&htim2);
 8000c38:	484d      	ldr	r0, [pc, #308]	; (8000d70 <TimerDelayMs+0x1d4>)
 8000c3a:	f001 ff89 	bl	8002b50 <HAL_TIM_Base_Stop_IT>
		if((greenEnd >= 1 ) && (jumpToMain == 0)) {
 8000c3e:	4b4b      	ldr	r3, [pc, #300]	; (8000d6c <TimerDelayMs+0x1d0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 8088 	beq.w	8000d58 <TimerDelayMs+0x1bc>
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	f083 0301 	eor.w	r3, r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 8081 	beq.w	8000d58 <TimerDelayMs+0x1bc>
			HAL_TIM_Base_Start_IT(&htim2);
 8000c56:	4846      	ldr	r0, [pc, #280]	; (8000d70 <TimerDelayMs+0x1d4>)
 8000c58:	f001 ff28 	bl	8002aac <HAL_TIM_Base_Start_IT>
			uint32_t nextGreenEnd = greenEnd + 1;
 8000c5c:	4b43      	ldr	r3, [pc, #268]	; (8000d6c <TimerDelayMs+0x1d0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
			uint8_t inputCompare = inputValue;
 8000c64:	4b45      	ldr	r3, [pc, #276]	; (8000d7c <TimerDelayMs+0x1e0>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	73fb      	strb	r3, [r7, #15]
				sendRemaningTime(GREEN, TIM2->CNT);
 8000c6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff fea0 	bl	80009b8 <sendRemaningTime>
				if((greenEnd == nextGreenEnd) || (inputCompare != inputValue)) {
 8000c78:	4b3c      	ldr	r3, [pc, #240]	; (8000d6c <TimerDelayMs+0x1d0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d004      	beq.n	8000c8c <TimerDelayMs+0xf0>
 8000c82:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <TimerDelayMs+0x1e0>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	7bfa      	ldrb	r2, [r7, #15]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d0ee      	beq.n	8000c6a <TimerDelayMs+0xce>
					HAL_TIM_Base_Stop_IT(&htim2);
 8000c8c:	4838      	ldr	r0, [pc, #224]	; (8000d70 <TimerDelayMs+0x1d4>)
 8000c8e:	f001 ff5f 	bl	8002b50 <HAL_TIM_Base_Stop_IT>
					break;
 8000c92:	bf00      	nop
		break;
 8000c94:	e060      	b.n	8000d58 <TimerDelayMs+0x1bc>
		greenEnds = 0;
 8000c96:	4b37      	ldr	r3, [pc, #220]	; (8000d74 <TimerDelayMs+0x1d8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
		yellowEnds = 0;
 8000c9c:	4b38      	ldr	r3, [pc, #224]	; (8000d80 <TimerDelayMs+0x1e4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
		warnEnds = 0;
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <TimerDelayMs+0x1cc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
		greenEnd = 0;
 8000ca8:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <TimerDelayMs+0x1d0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
		yellowEnd = 0;
 8000cae:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <TimerDelayMs+0x1e8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
		warnEnd = 0;
 8000cb4:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <TimerDelayMs+0x1ec>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
			sendRemaningTime(ALLRED, 180403);
 8000cba:	492a      	ldr	r1, [pc, #168]	; (8000d64 <TimerDelayMs+0x1c8>)
 8000cbc:	2004      	movs	r0, #4
 8000cbe:	f7ff fe7b 	bl	80009b8 <sendRemaningTime>
			if(checkGPIO == 1) {
 8000cc2:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <TimerDelayMs+0x1f0>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d100      	bne.n	8000ccc <TimerDelayMs+0x130>
			sendRemaningTime(ALLRED, 180403);
 8000cca:	e7f6      	b.n	8000cba <TimerDelayMs+0x11e>
				break;
 8000ccc:	bf00      	nop
	break;
 8000cce:	e044      	b.n	8000d5a <TimerDelayMs+0x1be>
		yellowEnd = 0;
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <TimerDelayMs+0x1e8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
		greenEnd = 0;
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <TimerDelayMs+0x1d0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
		greenEnds = 0;
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <TimerDelayMs+0x1d8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
		warnEnd = 0;
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <TimerDelayMs+0x1ec>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
		warnEnds = 0;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <TimerDelayMs+0x1cc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8000cee:	4828      	ldr	r0, [pc, #160]	; (8000d90 <TimerDelayMs+0x1f4>)
 8000cf0:	f001 fedc 	bl	8002aac <HAL_TIM_Base_Start_IT>
		yellowEnd = 0;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <TimerDelayMs+0x1e8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
			sendRemaningTime(YELLOW, TIM3->CNT);
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <TimerDelayMs+0x1f8>)
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	2002      	movs	r0, #2
 8000d02:	f7ff fe59 	bl	80009b8 <sendRemaningTime>
			if(yellowEnd == 1) {
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <TimerDelayMs+0x1e8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d1f5      	bne.n	8000cfa <TimerDelayMs+0x15e>
				HAL_TIM_Base_Stop_IT(&htim3);
 8000d0e:	4820      	ldr	r0, [pc, #128]	; (8000d90 <TimerDelayMs+0x1f4>)
 8000d10:	f001 ff1e 	bl	8002b50 <HAL_TIM_Base_Stop_IT>
		warnEnd = 0;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <TimerDelayMs+0x1ec>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
		greenEnd = 0;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <TimerDelayMs+0x1d0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
		greenEnds = 0;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <TimerDelayMs+0x1d8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 8000d26:	481c      	ldr	r0, [pc, #112]	; (8000d98 <TimerDelayMs+0x1fc>)
 8000d28:	f001 fec0 	bl	8002aac <HAL_TIM_Base_Start_IT>
			sendRemaningTime(WARN, TIM4->CNT);
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <TimerDelayMs+0x200>)
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	2003      	movs	r0, #3
 8000d34:	f7ff fe40 	bl	80009b8 <sendRemaningTime>
			warnCNT = TIM4->CNT;
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <TimerDelayMs+0x200>)
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <TimerDelayMs+0x204>)
 8000d40:	801a      	strh	r2, [r3, #0]
			if(warnEnd == 1) {
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <TimerDelayMs+0x1ec>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d1f0      	bne.n	8000d2c <TimerDelayMs+0x190>
				HAL_TIM_Base_Stop_IT(&htim4);
 8000d4a:	4813      	ldr	r0, [pc, #76]	; (8000d98 <TimerDelayMs+0x1fc>)
 8000d4c:	f001 ff00 	bl	8002b50 <HAL_TIM_Base_Stop_IT>
				break;
 8000d50:	bf00      	nop
		break;
 8000d52:	e002      	b.n	8000d5a <TimerDelayMs+0x1be>
		break;
 8000d54:	bf00      	nop
 8000d56:	e000      	b.n	8000d5a <TimerDelayMs+0x1be>
		break;
 8000d58:	bf00      	nop
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	0002c0b3 	.word	0x0002c0b3
 8000d68:	200001dc 	.word	0x200001dc
 8000d6c:	200001c8 	.word	0x200001c8
 8000d70:	200000e8 	.word	0x200000e8
 8000d74:	200001d4 	.word	0x200001d4
 8000d78:	200001e8 	.word	0x200001e8
 8000d7c:	200001c6 	.word	0x200001c6
 8000d80:	200001d8 	.word	0x200001d8
 8000d84:	200001cc 	.word	0x200001cc
 8000d88:	200001d0 	.word	0x200001d0
 8000d8c:	200001c5 	.word	0x200001c5
 8000d90:	20000130 	.word	0x20000130
 8000d94:	40000400 	.word	0x40000400
 8000d98:	20000178 	.word	0x20000178
 8000d9c:	40000800 	.word	0x40000800
 8000da0:	200001ec 	.word	0x200001ec

08000da4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db4:	d104      	bne.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x1c>
        greenEnd += 1;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000dbe:	6013      	str	r3, [r2, #0]
    }
    if (htim->Instance == TIM3) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d104      	bne.n	8000dd4 <HAL_TIM_PeriodElapsedCallback+0x30>
    	yellowEnd += 1;
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000dd2:	6013      	str	r3, [r2, #0]
    }
    if (htim->Instance == TIM4) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d110      	bne.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x5c>
    	warnEnd += 1;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000de6:	6013      	str	r3, [r2, #0]
    	warnEnds += 1;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000df0:	6013      	str	r3, [r2, #0]
    	if(warnEnds >= 6) {
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b05      	cmp	r3, #5
 8000df8:	d902      	bls.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x5c>
    		warnEnds = 0;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
    	}
    }
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200001c8 	.word	0x200001c8
 8000e10:	40000400 	.word	0x40000400
 8000e14:	200001cc 	.word	0x200001cc
 8000e18:	40000800 	.word	0x40000800
 8000e1c:	200001d0 	.word	0x200001d0
 8000e20:	200001dc 	.word	0x200001dc

08000e24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_5) { // Walk button
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	2b20      	cmp	r3, #32
 8000e32:	d10d      	bne.n	8000e50 <HAL_GPIO_EXTI_Callback+0x2c>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET) {
 8000e34:	2120      	movs	r1, #32
 8000e36:	482b      	ldr	r0, [pc, #172]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000e38:	f000 fd06 	bl	8001848 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d103      	bne.n	8000e4a <HAL_GPIO_EXTI_Callback+0x26>
            // Rising edge (button released)
            checkWalk = 1;
 8000e42:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_EXTI_Callback+0x2c>
        } else {
            // Falling edge (button pressed)
            checkWalk = 0;
 8000e4a:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
        }
    }
    if (GPIO_Pin == GPIO_PIN_4) { // Walk button
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	2b10      	cmp	r3, #16
 8000e54:	d10d      	bne.n	8000e72 <HAL_GPIO_EXTI_Callback+0x4e>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_SET) {
 8000e56:	2110      	movs	r1, #16
 8000e58:	4822      	ldr	r0, [pc, #136]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000e5a:	f000 fcf5 	bl	8001848 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d103      	bne.n	8000e6c <HAL_GPIO_EXTI_Callback+0x48>
            // Rising edge (button released)
            checkSouth = 1;
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <HAL_GPIO_EXTI_Callback+0xc8>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e002      	b.n	8000e72 <HAL_GPIO_EXTI_Callback+0x4e>
        } else {
            // Falling edge (button pressed)
            checkSouth = 0;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <HAL_GPIO_EXTI_Callback+0xc8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
        }
    }
    if (GPIO_Pin == GPIO_PIN_3) { // Walk button
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d10d      	bne.n	8000e94 <HAL_GPIO_EXTI_Callback+0x70>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET) {
 8000e78:	2108      	movs	r1, #8
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000e7c:	f000 fce4 	bl	8001848 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d103      	bne.n	8000e8e <HAL_GPIO_EXTI_Callback+0x6a>
            // Rising edge (button released)
            checkWest = 1;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	e002      	b.n	8000e94 <HAL_GPIO_EXTI_Callback+0x70>
        } else {
            // Falling edge (button pressed)
            checkWest = 0;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
        }
    }
    inputValue = (checkWalk << 2) | (checkSouth << 1) | (checkWest << 0);
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	b25a      	sxtb	r2, r3
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_GPIO_EXTI_Callback+0xc8>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b25a      	sxtb	r2, r3
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000eb6:	701a      	strb	r2, [r3, #0]
    checkGPIO = checkWalk | checkSouth |  checkWest;
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_GPIO_EXTI_Callback+0xc8>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf14      	ite	ne
 8000ed0:	2301      	movne	r3, #1
 8000ed2:	2300      	moveq	r3, #0
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000ed8:	701a      	strb	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	200001c2 	.word	0x200001c2
 8000eec:	200001c3 	.word	0x200001c3
 8000ef0:	200001c4 	.word	0x200001c4
 8000ef4:	200001c6 	.word	0x200001c6
 8000ef8:	200001c5 	.word	0x200001c5

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <Error_Handler+0x8>
	...

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_MspInit+0x60>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_MspInit+0x60>)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000

08000f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <HAL_I2C_MspInit+0x70>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d123      	bne.n	8000fd4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_I2C_MspInit+0x74>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <HAL_I2C_MspInit+0x74>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_I2C_MspInit+0x74>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fa4:	23c0      	movs	r3, #192	; 0xc0
 8000fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa8:	2312      	movs	r3, #18
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <HAL_I2C_MspInit+0x78>)
 8000fb8:	f000 fac2 	bl	8001540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_I2C_MspInit+0x74>)
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_I2C_MspInit+0x74>)
 8000fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc6:	61d3      	str	r3, [r2, #28]
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_I2C_MspInit+0x74>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010c00 	.word	0x40010c00

08000fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff8:	d114      	bne.n	8001024 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <HAL_TIM_Base_MspInit+0xac>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a25      	ldr	r2, [pc, #148]	; (8001094 <HAL_TIM_Base_MspInit+0xac>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <HAL_TIM_Base_MspInit+0xac>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	201c      	movs	r0, #28
 8001018:	f000 fa5b 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800101c:	201c      	movs	r0, #28
 800101e:	f000 fa74 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001022:	e032      	b.n	800108a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <HAL_TIM_Base_MspInit+0xb0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d114      	bne.n	8001058 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_TIM_Base_MspInit+0xac>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <HAL_TIM_Base_MspInit+0xac>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_TIM_Base_MspInit+0xac>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	201d      	movs	r0, #29
 800104c:	f000 fa41 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001050:	201d      	movs	r0, #29
 8001052:	f000 fa5a 	bl	800150a <HAL_NVIC_EnableIRQ>
}
 8001056:	e018      	b.n	800108a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_TIM_Base_MspInit+0xb4>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d113      	bne.n	800108a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_TIM_Base_MspInit+0xac>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <HAL_TIM_Base_MspInit+0xac>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_TIM_Base_MspInit+0xac>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	201e      	movs	r0, #30
 8001080:	f000 fa27 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001084:	201e      	movs	r0, #30
 8001086:	f000 fa40 	bl	800150a <HAL_NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	40000400 	.word	0x40000400
 800109c:	40000800 	.word	0x40000800

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e6:	f000 f8dd 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}

080010ee <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80010f2:	2008      	movs	r0, #8
 80010f4:	f000 fbd8 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001100:	2010      	movs	r0, #16
 8001102:	f000 fbd1 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}

0800110a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800110e:	2020      	movs	r0, #32
 8001110:	f000 fbca 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <TIM2_IRQHandler+0x10>)
 800111e:	f001 fd45 	bl	8002bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000e8 	.word	0x200000e8

0800112c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM3_IRQHandler+0x10>)
 8001132:	f001 fd3b 	bl	8002bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000130 	.word	0x20000130

08001140 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <TIM4_IRQHandler+0x10>)
 8001146:	f001 fd31 	bl	8002bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000178 	.word	0x20000178

08001154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <_sbrk+0x5c>)
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <_sbrk+0x60>)
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <_sbrk+0x64>)
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <_sbrk+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d207      	bcs.n	8001194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001184:	f002 f896 	bl	80032b4 <__errno>
 8001188:	4603      	mov	r3, r0
 800118a:	220c      	movs	r2, #12
 800118c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e009      	b.n	80011a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <_sbrk+0x64>)
 80011a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20005000 	.word	0x20005000
 80011b4:	00000400 	.word	0x00000400
 80011b8:	20000228 	.word	0x20000228
 80011bc:	20000378 	.word	0x20000378

080011c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011cc:	f7ff fff8 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011d2:	490c      	ldr	r1, [pc, #48]	; (8001204 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011d4:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011e8:	4c09      	ldr	r4, [pc, #36]	; (8001210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f6:	f002 f863 	bl	80032c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fa:	f7ff f99d 	bl	8000538 <main>
  bx lr
 80011fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001208:	08003e1c 	.word	0x08003e1c
  ldr r2, =_sbss
 800120c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001210:	20000378 	.word	0x20000378

08001214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC1_2_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_Init+0x28>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_Init+0x28>)
 8001222:	f043 0310 	orr.w	r3, r3, #16
 8001226:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f947 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	200f      	movs	r0, #15
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fe68 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40022000 	.word	0x40022000

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f95f 	bl	8001526 <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f927 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000014 	.word	0x20000014
 800129c:	2000001c 	.word	0x2000001c
 80012a0:	20000018 	.word	0x20000018

080012a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_IncTick+0x1c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_IncTick+0x20>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a03      	ldr	r2, [pc, #12]	; (80012c4 <HAL_IncTick+0x20>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	2000001c 	.word	0x2000001c
 80012c4:	2000022c 	.word	0x2000022c

080012c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <HAL_GetTick+0x10>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	2000022c 	.word	0x2000022c

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff fff0 	bl	80012c8 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffe0 	bl	80012c8 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000001c 	.word	0x2000001c

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4906      	ldr	r1, [pc, #24]	; (80013bc <__NVIC_EnableIRQ+0x34>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff90 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff2d 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff42 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff90 	bl	8001414 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5f 	bl	80013c0 <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff35 	bl	8001388 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001540:	b480      	push	{r7}
 8001542:	b08b      	sub	sp, #44	; 0x2c
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	e169      	b.n	8001828 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001554:	2201      	movs	r2, #1
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 8158 	bne.w	8001822 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4a9a      	ldr	r2, [pc, #616]	; (80017e0 <HAL_GPIO_Init+0x2a0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d05e      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 800157c:	4a98      	ldr	r2, [pc, #608]	; (80017e0 <HAL_GPIO_Init+0x2a0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d875      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 8001582:	4a98      	ldr	r2, [pc, #608]	; (80017e4 <HAL_GPIO_Init+0x2a4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d058      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 8001588:	4a96      	ldr	r2, [pc, #600]	; (80017e4 <HAL_GPIO_Init+0x2a4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d86f      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 800158e:	4a96      	ldr	r2, [pc, #600]	; (80017e8 <HAL_GPIO_Init+0x2a8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d052      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 8001594:	4a94      	ldr	r2, [pc, #592]	; (80017e8 <HAL_GPIO_Init+0x2a8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d869      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 800159a:	4a94      	ldr	r2, [pc, #592]	; (80017ec <HAL_GPIO_Init+0x2ac>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d04c      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 80015a0:	4a92      	ldr	r2, [pc, #584]	; (80017ec <HAL_GPIO_Init+0x2ac>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d863      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015a6:	4a92      	ldr	r2, [pc, #584]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d046      	beq.n	800163a <HAL_GPIO_Init+0xfa>
 80015ac:	4a90      	ldr	r2, [pc, #576]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d85d      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d82a      	bhi.n	800160c <HAL_GPIO_Init+0xcc>
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	d859      	bhi.n	800166e <HAL_GPIO_Init+0x12e>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <HAL_GPIO_Init+0x80>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	0800163b 	.word	0x0800163b
 80015c4:	08001615 	.word	0x08001615
 80015c8:	08001627 	.word	0x08001627
 80015cc:	08001669 	.word	0x08001669
 80015d0:	0800166f 	.word	0x0800166f
 80015d4:	0800166f 	.word	0x0800166f
 80015d8:	0800166f 	.word	0x0800166f
 80015dc:	0800166f 	.word	0x0800166f
 80015e0:	0800166f 	.word	0x0800166f
 80015e4:	0800166f 	.word	0x0800166f
 80015e8:	0800166f 	.word	0x0800166f
 80015ec:	0800166f 	.word	0x0800166f
 80015f0:	0800166f 	.word	0x0800166f
 80015f4:	0800166f 	.word	0x0800166f
 80015f8:	0800166f 	.word	0x0800166f
 80015fc:	0800166f 	.word	0x0800166f
 8001600:	0800166f 	.word	0x0800166f
 8001604:	0800161d 	.word	0x0800161d
 8001608:	08001631 	.word	0x08001631
 800160c:	4a79      	ldr	r2, [pc, #484]	; (80017f4 <HAL_GPIO_Init+0x2b4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001612:	e02c      	b.n	800166e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e029      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	3304      	adds	r3, #4
 8001622:	623b      	str	r3, [r7, #32]
          break;
 8001624:	e024      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	3308      	adds	r3, #8
 800162c:	623b      	str	r3, [r7, #32]
          break;
 800162e:	e01f      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	330c      	adds	r3, #12
 8001636:	623b      	str	r3, [r7, #32]
          break;
 8001638:	e01a      	b.n	8001670 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001642:	2304      	movs	r3, #4
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e013      	b.n	8001670 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001650:	2308      	movs	r3, #8
 8001652:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	611a      	str	r2, [r3, #16]
          break;
 800165a:	e009      	b.n	8001670 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800165c:	2308      	movs	r3, #8
 800165e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	615a      	str	r2, [r3, #20]
          break;
 8001666:	e003      	b.n	8001670 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
          break;
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x130>
          break;
 800166e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2bff      	cmp	r3, #255	; 0xff
 8001674:	d801      	bhi.n	800167a <HAL_GPIO_Init+0x13a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	e001      	b.n	800167e <HAL_GPIO_Init+0x13e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3304      	adds	r3, #4
 800167e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2bff      	cmp	r3, #255	; 0xff
 8001684:	d802      	bhi.n	800168c <HAL_GPIO_Init+0x14c>
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	e002      	b.n	8001692 <HAL_GPIO_Init+0x152>
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	3b08      	subs	r3, #8
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	210f      	movs	r1, #15
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	6a39      	ldr	r1, [r7, #32]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	431a      	orrs	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80b1 	beq.w	8001822 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c0:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <HAL_GPIO_Init+0x2b8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a4c      	ldr	r2, [pc, #304]	; (80017f8 <HAL_GPIO_Init+0x2b8>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_GPIO_Init+0x2b8>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d8:	4a48      	ldr	r2, [pc, #288]	; (80017fc <HAL_GPIO_Init+0x2bc>)
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3302      	adds	r3, #2
 80016e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	220f      	movs	r2, #15
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a40      	ldr	r2, [pc, #256]	; (8001800 <HAL_GPIO_Init+0x2c0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d013      	beq.n	800172c <HAL_GPIO_Init+0x1ec>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a3f      	ldr	r2, [pc, #252]	; (8001804 <HAL_GPIO_Init+0x2c4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d00d      	beq.n	8001728 <HAL_GPIO_Init+0x1e8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a3e      	ldr	r2, [pc, #248]	; (8001808 <HAL_GPIO_Init+0x2c8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d007      	beq.n	8001724 <HAL_GPIO_Init+0x1e4>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3d      	ldr	r2, [pc, #244]	; (800180c <HAL_GPIO_Init+0x2cc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d101      	bne.n	8001720 <HAL_GPIO_Init+0x1e0>
 800171c:	2303      	movs	r3, #3
 800171e:	e006      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 8001720:	2304      	movs	r3, #4
 8001722:	e004      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 8001724:	2302      	movs	r3, #2
 8001726:	e002      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_GPIO_Init+0x1ee>
 800172c:	2300      	movs	r3, #0
 800172e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001730:	f002 0203 	and.w	r2, r2, #3
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	4093      	lsls	r3, r2
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800173e:	492f      	ldr	r1, [pc, #188]	; (80017fc <HAL_GPIO_Init+0x2bc>)
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001758:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	492c      	ldr	r1, [pc, #176]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	608b      	str	r3, [r1, #8]
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	43db      	mvns	r3, r3
 800176e:	4928      	ldr	r1, [pc, #160]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 8001770:	4013      	ands	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	4922      	ldr	r1, [pc, #136]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	60cb      	str	r3, [r1, #12]
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	43db      	mvns	r3, r3
 8001796:	491e      	ldr	r1, [pc, #120]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 8001798:	4013      	ands	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4918      	ldr	r1, [pc, #96]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	43db      	mvns	r3, r3
 80017be:	4914      	ldr	r1, [pc, #80]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d021      	beq.n	8001814 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	490e      	ldr	r1, [pc, #56]	; (8001810 <HAL_GPIO_Init+0x2d0>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
 80017dc:	e021      	b.n	8001822 <HAL_GPIO_Init+0x2e2>
 80017de:	bf00      	nop
 80017e0:	10320000 	.word	0x10320000
 80017e4:	10310000 	.word	0x10310000
 80017e8:	10220000 	.word	0x10220000
 80017ec:	10210000 	.word	0x10210000
 80017f0:	10120000 	.word	0x10120000
 80017f4:	10110000 	.word	0x10110000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000
 8001800:	40010800 	.word	0x40010800
 8001804:	40010c00 	.word	0x40010c00
 8001808:	40011000 	.word	0x40011000
 800180c:	40011400 	.word	0x40011400
 8001810:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_GPIO_Init+0x304>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	43db      	mvns	r3, r3
 800181c:	4909      	ldr	r1, [pc, #36]	; (8001844 <HAL_GPIO_Init+0x304>)
 800181e:	4013      	ands	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	3301      	adds	r3, #1
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	f47f ae8e 	bne.w	8001554 <HAL_GPIO_Init+0x14>
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	372c      	adds	r7, #44	; 0x2c
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	40010400 	.word	0x40010400

08001848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e001      	b.n	800186a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	807b      	strh	r3, [r7, #2]
 8001882:	4613      	mov	r3, r2
 8001884:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001886:	787b      	ldrb	r3, [r7, #1]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188c:	887a      	ldrh	r2, [r7, #2]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001892:	e003      	b.n	800189c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	041a      	lsls	r2, r3, #16
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	611a      	str	r2, [r3, #16]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff faac 	bl	8000e24 <HAL_GPIO_EXTI_Callback>
  }
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40010400 	.word	0x40010400

080018d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e12b      	b.n	8001b42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fb34 	bl	8000f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2224      	movs	r2, #36	; 0x24
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800192a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800193a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800193c:	f001 f834 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4a81      	ldr	r2, [pc, #516]	; (8001b4c <HAL_I2C_Init+0x274>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d807      	bhi.n	800195c <HAL_I2C_Init+0x84>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a80      	ldr	r2, [pc, #512]	; (8001b50 <HAL_I2C_Init+0x278>)
 8001950:	4293      	cmp	r3, r2
 8001952:	bf94      	ite	ls
 8001954:	2301      	movls	r3, #1
 8001956:	2300      	movhi	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	e006      	b.n	800196a <HAL_I2C_Init+0x92>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4a7d      	ldr	r2, [pc, #500]	; (8001b54 <HAL_I2C_Init+0x27c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	bf94      	ite	ls
 8001964:	2301      	movls	r3, #1
 8001966:	2300      	movhi	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e0e7      	b.n	8001b42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4a78      	ldr	r2, [pc, #480]	; (8001b58 <HAL_I2C_Init+0x280>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0c9b      	lsrs	r3, r3, #18
 800197c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a6a      	ldr	r2, [pc, #424]	; (8001b4c <HAL_I2C_Init+0x274>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d802      	bhi.n	80019ac <HAL_I2C_Init+0xd4>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3301      	adds	r3, #1
 80019aa:	e009      	b.n	80019c0 <HAL_I2C_Init+0xe8>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	4a69      	ldr	r2, [pc, #420]	; (8001b5c <HAL_I2C_Init+0x284>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	099b      	lsrs	r3, r3, #6
 80019be:	3301      	adds	r3, #1
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	495c      	ldr	r1, [pc, #368]	; (8001b4c <HAL_I2C_Init+0x274>)
 80019dc:	428b      	cmp	r3, r1
 80019de:	d819      	bhi.n	8001a14 <HAL_I2C_Init+0x13c>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1e59      	subs	r1, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ee:	1c59      	adds	r1, r3, #1
 80019f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019f4:	400b      	ands	r3, r1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <HAL_I2C_Init+0x138>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1e59      	subs	r1, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0e:	e051      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a10:	2304      	movs	r3, #4
 8001a12:	e04f      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d111      	bne.n	8001a40 <HAL_I2C_Init+0x168>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e58      	subs	r0, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	440b      	add	r3, r1
 8001a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	e012      	b.n	8001a66 <HAL_I2C_Init+0x18e>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1e58      	subs	r0, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	0099      	lsls	r1, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Init+0x196>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e022      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10e      	bne.n	8001a94 <HAL_I2C_Init+0x1bc>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1e58      	subs	r0, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	440b      	add	r3, r1
 8001a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a92:	e00f      	b.n	8001ab4 <HAL_I2C_Init+0x1dc>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1e58      	subs	r0, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	0099      	lsls	r1, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	6809      	ldr	r1, [r1, #0]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69da      	ldr	r2, [r3, #28]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ae2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6911      	ldr	r1, [r2, #16]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68d2      	ldr	r2, [r2, #12]
 8001aee:	4311      	orrs	r1, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	000186a0 	.word	0x000186a0
 8001b50:	001e847f 	.word	0x001e847f
 8001b54:	003d08ff 	.word	0x003d08ff
 8001b58:	431bde83 	.word	0x431bde83
 8001b5c:	10624dd3 	.word	0x10624dd3

08001b60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	817b      	strh	r3, [r7, #10]
 8001b70:	4613      	mov	r3, r2
 8001b72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff fba8 	bl	80012c8 <HAL_GetTick>
 8001b78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	f040 80e0 	bne.w	8001d48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2319      	movs	r3, #25
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4970      	ldr	r1, [pc, #448]	; (8001d54 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f964 	bl	8001e60 <I2C_WaitOnFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e0d3      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_I2C_Master_Transmit+0x50>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e0cc      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d007      	beq.n	8001bd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2221      	movs	r2, #33	; 0x21
 8001bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	893a      	ldrh	r2, [r7, #8]
 8001c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4a50      	ldr	r2, [pc, #320]	; (8001d58 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c18:	8979      	ldrh	r1, [r7, #10]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	6a3a      	ldr	r2, [r7, #32]
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f89c 	bl	8001d5c <I2C_MasterRequestWrite>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e08d      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c44:	e066      	b.n	8001d14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	6a39      	ldr	r1, [r7, #32]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fa22 	bl	8002094 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00d      	beq.n	8001c72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d107      	bne.n	8001c6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06b      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d11b      	bne.n	8001ce8 <HAL_I2C_Master_Transmit+0x188>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d017      	beq.n	8001ce8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	6a39      	ldr	r1, [r7, #32]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fa19 	bl	8002124 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00d      	beq.n	8001d14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d107      	bne.n	8001d10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e01a      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d194      	bne.n	8001c46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e000      	b.n	8001d4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d48:	2302      	movs	r3, #2
  }
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	00100002 	.word	0x00100002
 8001d58:	ffff0000 	.word	0xffff0000

08001d5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d006      	beq.n	8001d86 <I2C_MasterRequestWrite+0x2a>
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d003      	beq.n	8001d86 <I2C_MasterRequestWrite+0x2a>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d84:	d108      	bne.n	8001d98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e00b      	b.n	8001db0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	2b12      	cmp	r3, #18
 8001d9e:	d107      	bne.n	8001db0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 f84f 	bl	8001e60 <I2C_WaitOnFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00d      	beq.n	8001de4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd6:	d103      	bne.n	8001de0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e035      	b.n	8001e50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dec:	d108      	bne.n	8001e00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dee:	897b      	ldrh	r3, [r7, #10]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dfc:	611a      	str	r2, [r3, #16]
 8001dfe:	e01b      	b.n	8001e38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	11db      	asrs	r3, r3, #7
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f003 0306 	and.w	r3, r3, #6
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f063 030f 	orn	r3, r3, #15
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	490e      	ldr	r1, [pc, #56]	; (8001e58 <I2C_MasterRequestWrite+0xfc>)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f898 	bl	8001f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e010      	b.n	8001e50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e2e:	897b      	ldrh	r3, [r7, #10]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4907      	ldr	r1, [pc, #28]	; (8001e5c <I2C_MasterRequestWrite+0x100>)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f888 	bl	8001f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	00010008 	.word	0x00010008
 8001e5c:	00010002 	.word	0x00010002

08001e60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e70:	e048      	b.n	8001f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d044      	beq.n	8001f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7a:	f7ff fa25 	bl	80012c8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d302      	bcc.n	8001e90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d139      	bne.n	8001f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	0c1b      	lsrs	r3, r3, #16
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d10d      	bne.n	8001eb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	e00c      	b.n	8001ed0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d116      	bne.n	8001f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e023      	b.n	8001f4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	0c1b      	lsrs	r3, r3, #16
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d10d      	bne.n	8001f2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	43da      	mvns	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	e00c      	b.n	8001f44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	43da      	mvns	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4013      	ands	r3, r2
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d093      	beq.n	8001e72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f62:	e071      	b.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f72:	d123      	bne.n	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e067      	b.n	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc2:	d041      	beq.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc4:	f7ff f980 	bl	80012c8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d302      	bcc.n	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d136      	bne.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d10c      	bne.n	8001ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	e00b      	b.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	43da      	mvns	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4013      	ands	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f043 0220 	orr.w	r2, r3, #32
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e021      	b.n	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	0c1b      	lsrs	r3, r3, #16
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d10c      	bne.n	800206c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	43da      	mvns	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4013      	ands	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e00b      	b.n	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4013      	ands	r3, r2
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	f47f af6d 	bne.w	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a0:	e034      	b.n	800210c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f886 	bl	80021b4 <I2C_IsAcknowledgeFailed>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e034      	b.n	800211c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d028      	beq.n	800210c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ba:	f7ff f905 	bl	80012c8 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d302      	bcc.n	80020d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d11d      	bne.n	800210c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	2b80      	cmp	r3, #128	; 0x80
 80020dc:	d016      	beq.n	800210c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e007      	b.n	800211c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b80      	cmp	r3, #128	; 0x80
 8002118:	d1c3      	bne.n	80020a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002130:	e034      	b.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f83e 	bl	80021b4 <I2C_IsAcknowledgeFailed>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e034      	b.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d028      	beq.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7ff f8bd 	bl	80012c8 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d11d      	bne.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b04      	cmp	r3, #4
 800216c:	d016      	beq.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e007      	b.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d1c3      	bne.n	8002132 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	d11b      	bne.n	8002204 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f043 0204 	orr.w	r2, r3, #4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e272      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8087 	beq.w	800233e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002230:	4b92      	ldr	r3, [pc, #584]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b04      	cmp	r3, #4
 800223a:	d00c      	beq.n	8002256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800223c:	4b8f      	ldr	r3, [pc, #572]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d112      	bne.n	800226e <HAL_RCC_OscConfig+0x5e>
 8002248:	4b8c      	ldr	r3, [pc, #560]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002254:	d10b      	bne.n	800226e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002256:	4b89      	ldr	r3, [pc, #548]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d06c      	beq.n	800233c <HAL_RCC_OscConfig+0x12c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d168      	bne.n	800233c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e24c      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x76>
 8002278:	4b80      	ldr	r3, [pc, #512]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a7f      	ldr	r2, [pc, #508]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800227e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e02e      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x98>
 800228e:	4b7b      	ldr	r3, [pc, #492]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7a      	ldr	r2, [pc, #488]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b78      	ldr	r3, [pc, #480]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a77      	ldr	r2, [pc, #476]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e01d      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0xbc>
 80022b2:	4b72      	ldr	r3, [pc, #456]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a71      	ldr	r2, [pc, #452]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b6f      	ldr	r3, [pc, #444]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a6e      	ldr	r2, [pc, #440]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 80022cc:	4b6b      	ldr	r3, [pc, #428]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6a      	ldr	r2, [pc, #424]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b68      	ldr	r3, [pc, #416]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a67      	ldr	r2, [pc, #412]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7fe ffec 	bl	80012c8 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7fe ffe8 	bl	80012c8 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e200      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	4b5d      	ldr	r3, [pc, #372]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0xe4>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7fe ffd8 	bl	80012c8 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7fe ffd4 	bl	80012c8 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1ec      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	4b53      	ldr	r3, [pc, #332]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x10c>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d063      	beq.n	8002412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234a:	4b4c      	ldr	r3, [pc, #304]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d11c      	bne.n	800239c <HAL_RCC_OscConfig+0x18c>
 8002362:	4b46      	ldr	r3, [pc, #280]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_RCC_OscConfig+0x176>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1c0      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b3d      	ldr	r3, [pc, #244]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4939      	ldr	r1, [pc, #228]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239a:	e03a      	b.n	8002412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	4b36      	ldr	r3, [pc, #216]	; (8002480 <HAL_RCC_OscConfig+0x270>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe ff8d 	bl	80012c8 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b2:	f7fe ff89 	bl	80012c8 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1a1      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4927      	ldr	r1, [pc, #156]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
 80023e4:	e015      	b.n	8002412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_RCC_OscConfig+0x270>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe ff6c 	bl	80012c8 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f4:	f7fe ff68 	bl	80012c8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e180      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d03a      	beq.n	8002494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d019      	beq.n	800245a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_RCC_OscConfig+0x274>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242c:	f7fe ff4c 	bl	80012c8 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002434:	f7fe ff48 	bl	80012c8 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e160      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002452:	2001      	movs	r0, #1
 8002454:	f000 fabc 	bl	80029d0 <RCC_Delay>
 8002458:	e01c      	b.n	8002494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_RCC_OscConfig+0x274>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7fe ff32 	bl	80012c8 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002466:	e00f      	b.n	8002488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7fe ff2e 	bl	80012c8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d908      	bls.n	8002488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e146      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	42420000 	.word	0x42420000
 8002484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	4b92      	ldr	r3, [pc, #584]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e9      	bne.n	8002468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80a6 	beq.w	80025ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b8b      	ldr	r3, [pc, #556]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b88      	ldr	r3, [pc, #544]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a87      	ldr	r2, [pc, #540]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024bc:	61d3      	str	r3, [r2, #28]
 80024be:	4b85      	ldr	r3, [pc, #532]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ce:	4b82      	ldr	r3, [pc, #520]	; (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d118      	bne.n	800250c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024da:	4b7f      	ldr	r3, [pc, #508]	; (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a7e      	ldr	r2, [pc, #504]	; (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e6:	f7fe feef 	bl	80012c8 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7fe feeb 	bl	80012c8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	; 0x64
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e103      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	4b75      	ldr	r3, [pc, #468]	; (80026d8 <HAL_RCC_OscConfig+0x4c8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x312>
 8002514:	4b6f      	ldr	r3, [pc, #444]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a6e      	ldr	r2, [pc, #440]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	e02d      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x334>
 800252a:	4b6a      	ldr	r3, [pc, #424]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a69      	ldr	r2, [pc, #420]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a66      	ldr	r2, [pc, #408]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6213      	str	r3, [r2, #32]
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x356>
 800254c:	4b61      	ldr	r3, [pc, #388]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a60      	ldr	r2, [pc, #384]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a5d      	ldr	r2, [pc, #372]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6213      	str	r3, [r2, #32]
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002566:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a5a      	ldr	r2, [pc, #360]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	4b58      	ldr	r3, [pc, #352]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a57      	ldr	r2, [pc, #348]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002586:	f7fe fe9f 	bl	80012c8 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fe9b 	bl	80012c8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0b1      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b4b      	ldr	r3, [pc, #300]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x37e>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe fe89 	bl	80012c8 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fe85 	bl	80012c8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e09b      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b40      	ldr	r3, [pc, #256]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b3c      	ldr	r3, [pc, #240]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a3b      	ldr	r2, [pc, #236]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8087 	beq.w	8002706 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f8:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d061      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d146      	bne.n	800269a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b33      	ldr	r3, [pc, #204]	; (80026dc <HAL_RCC_OscConfig+0x4cc>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe fe59 	bl	80012c8 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fe55 	bl	80012c8 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e06d      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262c:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002640:	d108      	bne.n	8002654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4921      	ldr	r1, [pc, #132]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a19      	ldr	r1, [r3, #32]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	430b      	orrs	r3, r1
 8002666:	491b      	ldr	r1, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_RCC_OscConfig+0x4cc>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7fe fe29 	bl	80012c8 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7fe fe25 	bl	80012c8 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e03d      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x46a>
 8002698:	e035      	b.n	8002706 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_RCC_OscConfig+0x4cc>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fe12 	bl	80012c8 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe fe0e 	bl	80012c8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e026      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x498>
 80026c6:	e01e      	b.n	8002706 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e019      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40007000 	.word	0x40007000
 80026dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_RCC_OscConfig+0x500>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000

08002714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0d0      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d910      	bls.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b67      	ldr	r3, [pc, #412]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4965      	ldr	r1, [pc, #404]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0b8      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b59      	ldr	r3, [pc, #356]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a58      	ldr	r2, [pc, #352]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800277a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002788:	4b53      	ldr	r3, [pc, #332]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a52      	ldr	r2, [pc, #328]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b50      	ldr	r3, [pc, #320]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	494d      	ldr	r1, [pc, #308]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d040      	beq.n	8002834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d115      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b41      	ldr	r3, [pc, #260]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e073      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e06b      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4936      	ldr	r1, [pc, #216]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002804:	f7fe fd60 	bl	80012c8 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7fe fd5c 	bl	80012c8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e053      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d210      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0207 	bic.w	r2, r3, #7
 800284a:	4922      	ldr	r1, [pc, #136]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e032      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4916      	ldr	r1, [pc, #88]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	490e      	ldr	r1, [pc, #56]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a2:	f000 f821 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	490a      	ldr	r1, [pc, #40]	; (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	5ccb      	ldrb	r3, [r1, r3]
 80028b6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1cc>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1d0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fcbe 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40022000 	.word	0x40022000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08003db4 	.word	0x08003db4
 80028e0:	20000014 	.word	0x20000014
 80028e4:	20000018 	.word	0x20000018

080028e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_RCC_GetSysClockFreq+0x94>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b04      	cmp	r3, #4
 8002910:	d002      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x30>
 8002912:	2b08      	cmp	r3, #8
 8002914:	d003      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x36>
 8002916:	e027      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <HAL_RCC_GetSysClockFreq+0x98>)
 800291a:	613b      	str	r3, [r7, #16]
      break;
 800291c:	e027      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	0c9b      	lsrs	r3, r3, #18
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	4a17      	ldr	r2, [pc, #92]	; (8002984 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d010      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_RCC_GetSysClockFreq+0x94>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0c5b      	lsrs	r3, r3, #17
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	4a11      	ldr	r2, [pc, #68]	; (8002988 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <HAL_RCC_GetSysClockFreq+0x98>)
 800294a:	fb03 f202 	mul.w	r2, r3, r2
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e004      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a0c      	ldr	r2, [pc, #48]	; (800298c <HAL_RCC_GetSysClockFreq+0xa4>)
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	613b      	str	r3, [r7, #16]
      break;
 8002966:	e002      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_GetSysClockFreq+0xa8>)
 800296a:	613b      	str	r3, [r7, #16]
      break;
 800296c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296e:	693b      	ldr	r3, [r7, #16]
}
 8002970:	4618      	mov	r0, r3
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	00f42400 	.word	0x00f42400
 8002984:	08003dcc 	.word	0x08003dcc
 8002988:	08003ddc 	.word	0x08003ddc
 800298c:	003d0900 	.word	0x003d0900
 8002990:	007a1200 	.word	0x007a1200

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002998:	4b02      	ldr	r3, [pc, #8]	; (80029a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	20000014 	.word	0x20000014

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029ac:	f7ff fff2 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4903      	ldr	r1, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08003dc4 	.word	0x08003dc4

080029d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <RCC_Delay+0x34>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <RCC_Delay+0x38>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0a5b      	lsrs	r3, r3, #9
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029ec:	bf00      	nop
  }
  while (Delay --);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e5a      	subs	r2, r3, #1
 80029f2:	60fa      	str	r2, [r7, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f9      	bne.n	80029ec <RCC_Delay+0x1c>
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	20000014 	.word	0x20000014
 8002a08:	10624dd3 	.word	0x10624dd3

08002a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e041      	b.n	8002aa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe fad8 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f000 faa2 	bl	8002f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d001      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e03a      	b.n	8002b3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <HAL_TIM_Base_Start_IT+0x98>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00e      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aee:	d009      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <HAL_TIM_Base_Start_IT+0x9c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <HAL_TIM_Base_Start_IT+0xa0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d111      	bne.n	8002b28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d010      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b26:	e007      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800

08002b50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
 8002b6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10f      	bne.n	8002b98 <HAL_TIM_Base_Stop_IT+0x48>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6a1a      	ldr	r2, [r3, #32]
 8002b7e:	f240 4344 	movw	r3, #1092	; 0x444
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_Base_Stop_IT+0x48>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0202 	mvn.w	r2, #2
 8002bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f9b4 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f9a7 	bl	8002f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f9b6 	bl	8002f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0204 	mvn.w	r2, #4
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f98a 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f97d 	bl	8002f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f98c 	bl	8002f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0208 	mvn.w	r2, #8
 8002c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2204      	movs	r2, #4
 8002c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f960 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f953 	bl	8002f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f962 	bl	8002f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d122      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d11b      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0210 	mvn.w	r2, #16
 8002cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f936 	bl	8002f5c <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f929 	bl	8002f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f938 	bl	8002f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d107      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0201 	mvn.w	r2, #1
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe f83a 	bl	8000da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b80      	cmp	r3, #128	; 0x80
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d48:	2b80      	cmp	r3, #128	; 0x80
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa7b 	bl	8003252 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d10e      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d107      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f8fc 	bl	8002f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d10e      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d107      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0220 	mvn.w	r2, #32
 8002dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa46 	bl	8003240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e0b4      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x186>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e10:	d03e      	beq.n	8002e90 <HAL_TIM_ConfigClockSource+0xd4>
 8002e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e16:	f200 8087 	bhi.w	8002f28 <HAL_TIM_ConfigClockSource+0x16c>
 8002e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1e:	f000 8086 	beq.w	8002f2e <HAL_TIM_ConfigClockSource+0x172>
 8002e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e26:	d87f      	bhi.n	8002f28 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b70      	cmp	r3, #112	; 0x70
 8002e2a:	d01a      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0xa6>
 8002e2c:	2b70      	cmp	r3, #112	; 0x70
 8002e2e:	d87b      	bhi.n	8002f28 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b60      	cmp	r3, #96	; 0x60
 8002e32:	d050      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8002e34:	2b60      	cmp	r3, #96	; 0x60
 8002e36:	d877      	bhi.n	8002f28 <HAL_TIM_ConfigClockSource+0x16c>
 8002e38:	2b50      	cmp	r3, #80	; 0x50
 8002e3a:	d03c      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8002e3c:	2b50      	cmp	r3, #80	; 0x50
 8002e3e:	d873      	bhi.n	8002f28 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d058      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8002e44:	2b40      	cmp	r3, #64	; 0x40
 8002e46:	d86f      	bhi.n	8002f28 <HAL_TIM_ConfigClockSource+0x16c>
 8002e48:	2b30      	cmp	r3, #48	; 0x30
 8002e4a:	d064      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0x15a>
 8002e4c:	2b30      	cmp	r3, #48	; 0x30
 8002e4e:	d86b      	bhi.n	8002f28 <HAL_TIM_ConfigClockSource+0x16c>
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d060      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0x15a>
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d867      	bhi.n	8002f28 <HAL_TIM_ConfigClockSource+0x16c>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d05c      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0x15a>
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d05a      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0x15a>
 8002e60:	e062      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e72:	f000 f968 	bl	8003146 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	609a      	str	r2, [r3, #8]
      break;
 8002e8e:	e04f      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ea0:	f000 f951 	bl	8003146 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eb2:	609a      	str	r2, [r3, #8]
      break;
 8002eb4:	e03c      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f000 f8c8 	bl	8003058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2150      	movs	r1, #80	; 0x50
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f91f 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e02c      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f000 f8e6 	bl	80030b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2160      	movs	r1, #96	; 0x60
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f90f 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002ef4:	e01c      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f02:	461a      	mov	r2, r3
 8002f04:	f000 f8a8 	bl	8003058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2140      	movs	r1, #64	; 0x40
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f8ff 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002f14:	e00c      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f000 f8f6 	bl	8003112 <TIM_ITRx_SetConfig>
      break;
 8002f26:	e003      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f2c:	e000      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
	...

08002f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a29      	ldr	r2, [pc, #164]	; (800304c <TIM_Base_SetConfig+0xb8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00b      	beq.n	8002fc4 <TIM_Base_SetConfig+0x30>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d007      	beq.n	8002fc4 <TIM_Base_SetConfig+0x30>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a26      	ldr	r2, [pc, #152]	; (8003050 <TIM_Base_SetConfig+0xbc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d003      	beq.n	8002fc4 <TIM_Base_SetConfig+0x30>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a25      	ldr	r2, [pc, #148]	; (8003054 <TIM_Base_SetConfig+0xc0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d108      	bne.n	8002fd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <TIM_Base_SetConfig+0xb8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <TIM_Base_SetConfig+0x62>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe4:	d007      	beq.n	8002ff6 <TIM_Base_SetConfig+0x62>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a19      	ldr	r2, [pc, #100]	; (8003050 <TIM_Base_SetConfig+0xbc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d003      	beq.n	8002ff6 <TIM_Base_SetConfig+0x62>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a18      	ldr	r2, [pc, #96]	; (8003054 <TIM_Base_SetConfig+0xc0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d108      	bne.n	8003008 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a07      	ldr	r2, [pc, #28]	; (800304c <TIM_Base_SetConfig+0xb8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d103      	bne.n	800303c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	615a      	str	r2, [r3, #20]
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	40012c00 	.word	0x40012c00
 8003050:	40000400 	.word	0x40000400
 8003054:	40000800 	.word	0x40000800

08003058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f023 0201 	bic.w	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f023 030a 	bic.w	r3, r3, #10
 8003094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	621a      	str	r2, [r3, #32]
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0210 	bic.w	r2, r3, #16
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	031b      	lsls	r3, r3, #12
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	621a      	str	r2, [r3, #32]
}
 8003108:	bf00      	nop
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	f043 0307 	orr.w	r3, r3, #7
 8003134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	609a      	str	r2, [r3, #8]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003146:	b480      	push	{r7}
 8003148:	b087      	sub	sp, #28
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003160:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	021a      	lsls	r2, r3, #8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	431a      	orrs	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4313      	orrs	r3, r2
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	609a      	str	r2, [r3, #8]
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003198:	2302      	movs	r3, #2
 800319a:	e046      	b.n	800322a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a16      	ldr	r2, [pc, #88]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00e      	beq.n	80031fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e8:	d009      	beq.n	80031fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a10      	ldr	r2, [pc, #64]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d10c      	bne.n	8003218 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	4313      	orrs	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40000400 	.word	0x40000400
 800323c:	40000800 	.word	0x40000800

08003240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <siprintf>:
 8003264:	b40e      	push	{r1, r2, r3}
 8003266:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800326a:	b500      	push	{lr}
 800326c:	b09c      	sub	sp, #112	; 0x70
 800326e:	ab1d      	add	r3, sp, #116	; 0x74
 8003270:	9002      	str	r0, [sp, #8]
 8003272:	9006      	str	r0, [sp, #24]
 8003274:	9107      	str	r1, [sp, #28]
 8003276:	9104      	str	r1, [sp, #16]
 8003278:	4808      	ldr	r0, [pc, #32]	; (800329c <siprintf+0x38>)
 800327a:	4909      	ldr	r1, [pc, #36]	; (80032a0 <siprintf+0x3c>)
 800327c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003280:	9105      	str	r1, [sp, #20]
 8003282:	6800      	ldr	r0, [r0, #0]
 8003284:	a902      	add	r1, sp, #8
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	f000 f98e 	bl	80035a8 <_svfiprintf_r>
 800328c:	2200      	movs	r2, #0
 800328e:	9b02      	ldr	r3, [sp, #8]
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	b01c      	add	sp, #112	; 0x70
 8003294:	f85d eb04 	ldr.w	lr, [sp], #4
 8003298:	b003      	add	sp, #12
 800329a:	4770      	bx	lr
 800329c:	2000006c 	.word	0x2000006c
 80032a0:	ffff0208 	.word	0xffff0208

080032a4 <memset>:
 80032a4:	4603      	mov	r3, r0
 80032a6:	4402      	add	r2, r0
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d100      	bne.n	80032ae <memset+0xa>
 80032ac:	4770      	bx	lr
 80032ae:	f803 1b01 	strb.w	r1, [r3], #1
 80032b2:	e7f9      	b.n	80032a8 <memset+0x4>

080032b4 <__errno>:
 80032b4:	4b01      	ldr	r3, [pc, #4]	; (80032bc <__errno+0x8>)
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	2000006c 	.word	0x2000006c

080032c0 <__libc_init_array>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	2600      	movs	r6, #0
 80032c4:	4d0c      	ldr	r5, [pc, #48]	; (80032f8 <__libc_init_array+0x38>)
 80032c6:	4c0d      	ldr	r4, [pc, #52]	; (80032fc <__libc_init_array+0x3c>)
 80032c8:	1b64      	subs	r4, r4, r5
 80032ca:	10a4      	asrs	r4, r4, #2
 80032cc:	42a6      	cmp	r6, r4
 80032ce:	d109      	bne.n	80032e4 <__libc_init_array+0x24>
 80032d0:	f000 fc7a 	bl	8003bc8 <_init>
 80032d4:	2600      	movs	r6, #0
 80032d6:	4d0a      	ldr	r5, [pc, #40]	; (8003300 <__libc_init_array+0x40>)
 80032d8:	4c0a      	ldr	r4, [pc, #40]	; (8003304 <__libc_init_array+0x44>)
 80032da:	1b64      	subs	r4, r4, r5
 80032dc:	10a4      	asrs	r4, r4, #2
 80032de:	42a6      	cmp	r6, r4
 80032e0:	d105      	bne.n	80032ee <__libc_init_array+0x2e>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e8:	4798      	blx	r3
 80032ea:	3601      	adds	r6, #1
 80032ec:	e7ee      	b.n	80032cc <__libc_init_array+0xc>
 80032ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f2:	4798      	blx	r3
 80032f4:	3601      	adds	r6, #1
 80032f6:	e7f2      	b.n	80032de <__libc_init_array+0x1e>
 80032f8:	08003e14 	.word	0x08003e14
 80032fc:	08003e14 	.word	0x08003e14
 8003300:	08003e14 	.word	0x08003e14
 8003304:	08003e18 	.word	0x08003e18

08003308 <__retarget_lock_acquire_recursive>:
 8003308:	4770      	bx	lr

0800330a <__retarget_lock_release_recursive>:
 800330a:	4770      	bx	lr

0800330c <_free_r>:
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	4605      	mov	r5, r0
 8003310:	2900      	cmp	r1, #0
 8003312:	d040      	beq.n	8003396 <_free_r+0x8a>
 8003314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003318:	1f0c      	subs	r4, r1, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	bfb8      	it	lt
 800331e:	18e4      	addlt	r4, r4, r3
 8003320:	f000 f8dc 	bl	80034dc <__malloc_lock>
 8003324:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <_free_r+0x8c>)
 8003326:	6813      	ldr	r3, [r2, #0]
 8003328:	b933      	cbnz	r3, 8003338 <_free_r+0x2c>
 800332a:	6063      	str	r3, [r4, #4]
 800332c:	6014      	str	r4, [r2, #0]
 800332e:	4628      	mov	r0, r5
 8003330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003334:	f000 b8d8 	b.w	80034e8 <__malloc_unlock>
 8003338:	42a3      	cmp	r3, r4
 800333a:	d908      	bls.n	800334e <_free_r+0x42>
 800333c:	6820      	ldr	r0, [r4, #0]
 800333e:	1821      	adds	r1, r4, r0
 8003340:	428b      	cmp	r3, r1
 8003342:	bf01      	itttt	eq
 8003344:	6819      	ldreq	r1, [r3, #0]
 8003346:	685b      	ldreq	r3, [r3, #4]
 8003348:	1809      	addeq	r1, r1, r0
 800334a:	6021      	streq	r1, [r4, #0]
 800334c:	e7ed      	b.n	800332a <_free_r+0x1e>
 800334e:	461a      	mov	r2, r3
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	b10b      	cbz	r3, 8003358 <_free_r+0x4c>
 8003354:	42a3      	cmp	r3, r4
 8003356:	d9fa      	bls.n	800334e <_free_r+0x42>
 8003358:	6811      	ldr	r1, [r2, #0]
 800335a:	1850      	adds	r0, r2, r1
 800335c:	42a0      	cmp	r0, r4
 800335e:	d10b      	bne.n	8003378 <_free_r+0x6c>
 8003360:	6820      	ldr	r0, [r4, #0]
 8003362:	4401      	add	r1, r0
 8003364:	1850      	adds	r0, r2, r1
 8003366:	4283      	cmp	r3, r0
 8003368:	6011      	str	r1, [r2, #0]
 800336a:	d1e0      	bne.n	800332e <_free_r+0x22>
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4408      	add	r0, r1
 8003372:	6010      	str	r0, [r2, #0]
 8003374:	6053      	str	r3, [r2, #4]
 8003376:	e7da      	b.n	800332e <_free_r+0x22>
 8003378:	d902      	bls.n	8003380 <_free_r+0x74>
 800337a:	230c      	movs	r3, #12
 800337c:	602b      	str	r3, [r5, #0]
 800337e:	e7d6      	b.n	800332e <_free_r+0x22>
 8003380:	6820      	ldr	r0, [r4, #0]
 8003382:	1821      	adds	r1, r4, r0
 8003384:	428b      	cmp	r3, r1
 8003386:	bf01      	itttt	eq
 8003388:	6819      	ldreq	r1, [r3, #0]
 800338a:	685b      	ldreq	r3, [r3, #4]
 800338c:	1809      	addeq	r1, r1, r0
 800338e:	6021      	streq	r1, [r4, #0]
 8003390:	6063      	str	r3, [r4, #4]
 8003392:	6054      	str	r4, [r2, #4]
 8003394:	e7cb      	b.n	800332e <_free_r+0x22>
 8003396:	bd38      	pop	{r3, r4, r5, pc}
 8003398:	20000370 	.word	0x20000370

0800339c <sbrk_aligned>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	4e0e      	ldr	r6, [pc, #56]	; (80033d8 <sbrk_aligned+0x3c>)
 80033a0:	460c      	mov	r4, r1
 80033a2:	6831      	ldr	r1, [r6, #0]
 80033a4:	4605      	mov	r5, r0
 80033a6:	b911      	cbnz	r1, 80033ae <sbrk_aligned+0x12>
 80033a8:	f000 fbaa 	bl	8003b00 <_sbrk_r>
 80033ac:	6030      	str	r0, [r6, #0]
 80033ae:	4621      	mov	r1, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	f000 fba5 	bl	8003b00 <_sbrk_r>
 80033b6:	1c43      	adds	r3, r0, #1
 80033b8:	d00a      	beq.n	80033d0 <sbrk_aligned+0x34>
 80033ba:	1cc4      	adds	r4, r0, #3
 80033bc:	f024 0403 	bic.w	r4, r4, #3
 80033c0:	42a0      	cmp	r0, r4
 80033c2:	d007      	beq.n	80033d4 <sbrk_aligned+0x38>
 80033c4:	1a21      	subs	r1, r4, r0
 80033c6:	4628      	mov	r0, r5
 80033c8:	f000 fb9a 	bl	8003b00 <_sbrk_r>
 80033cc:	3001      	adds	r0, #1
 80033ce:	d101      	bne.n	80033d4 <sbrk_aligned+0x38>
 80033d0:	f04f 34ff 	mov.w	r4, #4294967295
 80033d4:	4620      	mov	r0, r4
 80033d6:	bd70      	pop	{r4, r5, r6, pc}
 80033d8:	20000374 	.word	0x20000374

080033dc <_malloc_r>:
 80033dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033e0:	1ccd      	adds	r5, r1, #3
 80033e2:	f025 0503 	bic.w	r5, r5, #3
 80033e6:	3508      	adds	r5, #8
 80033e8:	2d0c      	cmp	r5, #12
 80033ea:	bf38      	it	cc
 80033ec:	250c      	movcc	r5, #12
 80033ee:	2d00      	cmp	r5, #0
 80033f0:	4607      	mov	r7, r0
 80033f2:	db01      	blt.n	80033f8 <_malloc_r+0x1c>
 80033f4:	42a9      	cmp	r1, r5
 80033f6:	d905      	bls.n	8003404 <_malloc_r+0x28>
 80033f8:	230c      	movs	r3, #12
 80033fa:	2600      	movs	r6, #0
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	4630      	mov	r0, r6
 8003400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003404:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80034d8 <_malloc_r+0xfc>
 8003408:	f000 f868 	bl	80034dc <__malloc_lock>
 800340c:	f8d8 3000 	ldr.w	r3, [r8]
 8003410:	461c      	mov	r4, r3
 8003412:	bb5c      	cbnz	r4, 800346c <_malloc_r+0x90>
 8003414:	4629      	mov	r1, r5
 8003416:	4638      	mov	r0, r7
 8003418:	f7ff ffc0 	bl	800339c <sbrk_aligned>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	4604      	mov	r4, r0
 8003420:	d155      	bne.n	80034ce <_malloc_r+0xf2>
 8003422:	f8d8 4000 	ldr.w	r4, [r8]
 8003426:	4626      	mov	r6, r4
 8003428:	2e00      	cmp	r6, #0
 800342a:	d145      	bne.n	80034b8 <_malloc_r+0xdc>
 800342c:	2c00      	cmp	r4, #0
 800342e:	d048      	beq.n	80034c2 <_malloc_r+0xe6>
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	4631      	mov	r1, r6
 8003434:	4638      	mov	r0, r7
 8003436:	eb04 0903 	add.w	r9, r4, r3
 800343a:	f000 fb61 	bl	8003b00 <_sbrk_r>
 800343e:	4581      	cmp	r9, r0
 8003440:	d13f      	bne.n	80034c2 <_malloc_r+0xe6>
 8003442:	6821      	ldr	r1, [r4, #0]
 8003444:	4638      	mov	r0, r7
 8003446:	1a6d      	subs	r5, r5, r1
 8003448:	4629      	mov	r1, r5
 800344a:	f7ff ffa7 	bl	800339c <sbrk_aligned>
 800344e:	3001      	adds	r0, #1
 8003450:	d037      	beq.n	80034c2 <_malloc_r+0xe6>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	442b      	add	r3, r5
 8003456:	6023      	str	r3, [r4, #0]
 8003458:	f8d8 3000 	ldr.w	r3, [r8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d038      	beq.n	80034d2 <_malloc_r+0xf6>
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	42a2      	cmp	r2, r4
 8003464:	d12b      	bne.n	80034be <_malloc_r+0xe2>
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	e00f      	b.n	800348c <_malloc_r+0xb0>
 800346c:	6822      	ldr	r2, [r4, #0]
 800346e:	1b52      	subs	r2, r2, r5
 8003470:	d41f      	bmi.n	80034b2 <_malloc_r+0xd6>
 8003472:	2a0b      	cmp	r2, #11
 8003474:	d917      	bls.n	80034a6 <_malloc_r+0xca>
 8003476:	1961      	adds	r1, r4, r5
 8003478:	42a3      	cmp	r3, r4
 800347a:	6025      	str	r5, [r4, #0]
 800347c:	bf18      	it	ne
 800347e:	6059      	strne	r1, [r3, #4]
 8003480:	6863      	ldr	r3, [r4, #4]
 8003482:	bf08      	it	eq
 8003484:	f8c8 1000 	streq.w	r1, [r8]
 8003488:	5162      	str	r2, [r4, r5]
 800348a:	604b      	str	r3, [r1, #4]
 800348c:	4638      	mov	r0, r7
 800348e:	f104 060b 	add.w	r6, r4, #11
 8003492:	f000 f829 	bl	80034e8 <__malloc_unlock>
 8003496:	f026 0607 	bic.w	r6, r6, #7
 800349a:	1d23      	adds	r3, r4, #4
 800349c:	1af2      	subs	r2, r6, r3
 800349e:	d0ae      	beq.n	80033fe <_malloc_r+0x22>
 80034a0:	1b9b      	subs	r3, r3, r6
 80034a2:	50a3      	str	r3, [r4, r2]
 80034a4:	e7ab      	b.n	80033fe <_malloc_r+0x22>
 80034a6:	42a3      	cmp	r3, r4
 80034a8:	6862      	ldr	r2, [r4, #4]
 80034aa:	d1dd      	bne.n	8003468 <_malloc_r+0x8c>
 80034ac:	f8c8 2000 	str.w	r2, [r8]
 80034b0:	e7ec      	b.n	800348c <_malloc_r+0xb0>
 80034b2:	4623      	mov	r3, r4
 80034b4:	6864      	ldr	r4, [r4, #4]
 80034b6:	e7ac      	b.n	8003412 <_malloc_r+0x36>
 80034b8:	4634      	mov	r4, r6
 80034ba:	6876      	ldr	r6, [r6, #4]
 80034bc:	e7b4      	b.n	8003428 <_malloc_r+0x4c>
 80034be:	4613      	mov	r3, r2
 80034c0:	e7cc      	b.n	800345c <_malloc_r+0x80>
 80034c2:	230c      	movs	r3, #12
 80034c4:	4638      	mov	r0, r7
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	f000 f80e 	bl	80034e8 <__malloc_unlock>
 80034cc:	e797      	b.n	80033fe <_malloc_r+0x22>
 80034ce:	6025      	str	r5, [r4, #0]
 80034d0:	e7dc      	b.n	800348c <_malloc_r+0xb0>
 80034d2:	605b      	str	r3, [r3, #4]
 80034d4:	deff      	udf	#255	; 0xff
 80034d6:	bf00      	nop
 80034d8:	20000370 	.word	0x20000370

080034dc <__malloc_lock>:
 80034dc:	4801      	ldr	r0, [pc, #4]	; (80034e4 <__malloc_lock+0x8>)
 80034de:	f7ff bf13 	b.w	8003308 <__retarget_lock_acquire_recursive>
 80034e2:	bf00      	nop
 80034e4:	2000036c 	.word	0x2000036c

080034e8 <__malloc_unlock>:
 80034e8:	4801      	ldr	r0, [pc, #4]	; (80034f0 <__malloc_unlock+0x8>)
 80034ea:	f7ff bf0e 	b.w	800330a <__retarget_lock_release_recursive>
 80034ee:	bf00      	nop
 80034f0:	2000036c 	.word	0x2000036c

080034f4 <__ssputs_r>:
 80034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f8:	461f      	mov	r7, r3
 80034fa:	688e      	ldr	r6, [r1, #8]
 80034fc:	4682      	mov	sl, r0
 80034fe:	42be      	cmp	r6, r7
 8003500:	460c      	mov	r4, r1
 8003502:	4690      	mov	r8, r2
 8003504:	680b      	ldr	r3, [r1, #0]
 8003506:	d82c      	bhi.n	8003562 <__ssputs_r+0x6e>
 8003508:	898a      	ldrh	r2, [r1, #12]
 800350a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800350e:	d026      	beq.n	800355e <__ssputs_r+0x6a>
 8003510:	6965      	ldr	r5, [r4, #20]
 8003512:	6909      	ldr	r1, [r1, #16]
 8003514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003518:	eba3 0901 	sub.w	r9, r3, r1
 800351c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003520:	1c7b      	adds	r3, r7, #1
 8003522:	444b      	add	r3, r9
 8003524:	106d      	asrs	r5, r5, #1
 8003526:	429d      	cmp	r5, r3
 8003528:	bf38      	it	cc
 800352a:	461d      	movcc	r5, r3
 800352c:	0553      	lsls	r3, r2, #21
 800352e:	d527      	bpl.n	8003580 <__ssputs_r+0x8c>
 8003530:	4629      	mov	r1, r5
 8003532:	f7ff ff53 	bl	80033dc <_malloc_r>
 8003536:	4606      	mov	r6, r0
 8003538:	b360      	cbz	r0, 8003594 <__ssputs_r+0xa0>
 800353a:	464a      	mov	r2, r9
 800353c:	6921      	ldr	r1, [r4, #16]
 800353e:	f000 fafd 	bl	8003b3c <memcpy>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354c:	81a3      	strh	r3, [r4, #12]
 800354e:	6126      	str	r6, [r4, #16]
 8003550:	444e      	add	r6, r9
 8003552:	6026      	str	r6, [r4, #0]
 8003554:	463e      	mov	r6, r7
 8003556:	6165      	str	r5, [r4, #20]
 8003558:	eba5 0509 	sub.w	r5, r5, r9
 800355c:	60a5      	str	r5, [r4, #8]
 800355e:	42be      	cmp	r6, r7
 8003560:	d900      	bls.n	8003564 <__ssputs_r+0x70>
 8003562:	463e      	mov	r6, r7
 8003564:	4632      	mov	r2, r6
 8003566:	4641      	mov	r1, r8
 8003568:	6820      	ldr	r0, [r4, #0]
 800356a:	f000 faaf 	bl	8003acc <memmove>
 800356e:	2000      	movs	r0, #0
 8003570:	68a3      	ldr	r3, [r4, #8]
 8003572:	1b9b      	subs	r3, r3, r6
 8003574:	60a3      	str	r3, [r4, #8]
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	4433      	add	r3, r6
 800357a:	6023      	str	r3, [r4, #0]
 800357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003580:	462a      	mov	r2, r5
 8003582:	f000 fae9 	bl	8003b58 <_realloc_r>
 8003586:	4606      	mov	r6, r0
 8003588:	2800      	cmp	r0, #0
 800358a:	d1e0      	bne.n	800354e <__ssputs_r+0x5a>
 800358c:	4650      	mov	r0, sl
 800358e:	6921      	ldr	r1, [r4, #16]
 8003590:	f7ff febc 	bl	800330c <_free_r>
 8003594:	230c      	movs	r3, #12
 8003596:	f8ca 3000 	str.w	r3, [sl]
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a4:	81a3      	strh	r3, [r4, #12]
 80035a6:	e7e9      	b.n	800357c <__ssputs_r+0x88>

080035a8 <_svfiprintf_r>:
 80035a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ac:	4698      	mov	r8, r3
 80035ae:	898b      	ldrh	r3, [r1, #12]
 80035b0:	4607      	mov	r7, r0
 80035b2:	061b      	lsls	r3, r3, #24
 80035b4:	460d      	mov	r5, r1
 80035b6:	4614      	mov	r4, r2
 80035b8:	b09d      	sub	sp, #116	; 0x74
 80035ba:	d50e      	bpl.n	80035da <_svfiprintf_r+0x32>
 80035bc:	690b      	ldr	r3, [r1, #16]
 80035be:	b963      	cbnz	r3, 80035da <_svfiprintf_r+0x32>
 80035c0:	2140      	movs	r1, #64	; 0x40
 80035c2:	f7ff ff0b 	bl	80033dc <_malloc_r>
 80035c6:	6028      	str	r0, [r5, #0]
 80035c8:	6128      	str	r0, [r5, #16]
 80035ca:	b920      	cbnz	r0, 80035d6 <_svfiprintf_r+0x2e>
 80035cc:	230c      	movs	r3, #12
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	e0d0      	b.n	8003778 <_svfiprintf_r+0x1d0>
 80035d6:	2340      	movs	r3, #64	; 0x40
 80035d8:	616b      	str	r3, [r5, #20]
 80035da:	2300      	movs	r3, #0
 80035dc:	9309      	str	r3, [sp, #36]	; 0x24
 80035de:	2320      	movs	r3, #32
 80035e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035e4:	2330      	movs	r3, #48	; 0x30
 80035e6:	f04f 0901 	mov.w	r9, #1
 80035ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80035ee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003790 <_svfiprintf_r+0x1e8>
 80035f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035f6:	4623      	mov	r3, r4
 80035f8:	469a      	mov	sl, r3
 80035fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035fe:	b10a      	cbz	r2, 8003604 <_svfiprintf_r+0x5c>
 8003600:	2a25      	cmp	r2, #37	; 0x25
 8003602:	d1f9      	bne.n	80035f8 <_svfiprintf_r+0x50>
 8003604:	ebba 0b04 	subs.w	fp, sl, r4
 8003608:	d00b      	beq.n	8003622 <_svfiprintf_r+0x7a>
 800360a:	465b      	mov	r3, fp
 800360c:	4622      	mov	r2, r4
 800360e:	4629      	mov	r1, r5
 8003610:	4638      	mov	r0, r7
 8003612:	f7ff ff6f 	bl	80034f4 <__ssputs_r>
 8003616:	3001      	adds	r0, #1
 8003618:	f000 80a9 	beq.w	800376e <_svfiprintf_r+0x1c6>
 800361c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800361e:	445a      	add	r2, fp
 8003620:	9209      	str	r2, [sp, #36]	; 0x24
 8003622:	f89a 3000 	ldrb.w	r3, [sl]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80a1 	beq.w	800376e <_svfiprintf_r+0x1c6>
 800362c:	2300      	movs	r3, #0
 800362e:	f04f 32ff 	mov.w	r2, #4294967295
 8003632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003636:	f10a 0a01 	add.w	sl, sl, #1
 800363a:	9304      	str	r3, [sp, #16]
 800363c:	9307      	str	r3, [sp, #28]
 800363e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003642:	931a      	str	r3, [sp, #104]	; 0x68
 8003644:	4654      	mov	r4, sl
 8003646:	2205      	movs	r2, #5
 8003648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800364c:	4850      	ldr	r0, [pc, #320]	; (8003790 <_svfiprintf_r+0x1e8>)
 800364e:	f000 fa67 	bl	8003b20 <memchr>
 8003652:	9a04      	ldr	r2, [sp, #16]
 8003654:	b9d8      	cbnz	r0, 800368e <_svfiprintf_r+0xe6>
 8003656:	06d0      	lsls	r0, r2, #27
 8003658:	bf44      	itt	mi
 800365a:	2320      	movmi	r3, #32
 800365c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003660:	0711      	lsls	r1, r2, #28
 8003662:	bf44      	itt	mi
 8003664:	232b      	movmi	r3, #43	; 0x2b
 8003666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800366a:	f89a 3000 	ldrb.w	r3, [sl]
 800366e:	2b2a      	cmp	r3, #42	; 0x2a
 8003670:	d015      	beq.n	800369e <_svfiprintf_r+0xf6>
 8003672:	4654      	mov	r4, sl
 8003674:	2000      	movs	r0, #0
 8003676:	f04f 0c0a 	mov.w	ip, #10
 800367a:	9a07      	ldr	r2, [sp, #28]
 800367c:	4621      	mov	r1, r4
 800367e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003682:	3b30      	subs	r3, #48	; 0x30
 8003684:	2b09      	cmp	r3, #9
 8003686:	d94d      	bls.n	8003724 <_svfiprintf_r+0x17c>
 8003688:	b1b0      	cbz	r0, 80036b8 <_svfiprintf_r+0x110>
 800368a:	9207      	str	r2, [sp, #28]
 800368c:	e014      	b.n	80036b8 <_svfiprintf_r+0x110>
 800368e:	eba0 0308 	sub.w	r3, r0, r8
 8003692:	fa09 f303 	lsl.w	r3, r9, r3
 8003696:	4313      	orrs	r3, r2
 8003698:	46a2      	mov	sl, r4
 800369a:	9304      	str	r3, [sp, #16]
 800369c:	e7d2      	b.n	8003644 <_svfiprintf_r+0x9c>
 800369e:	9b03      	ldr	r3, [sp, #12]
 80036a0:	1d19      	adds	r1, r3, #4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	9103      	str	r1, [sp, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bfbb      	ittet	lt
 80036aa:	425b      	neglt	r3, r3
 80036ac:	f042 0202 	orrlt.w	r2, r2, #2
 80036b0:	9307      	strge	r3, [sp, #28]
 80036b2:	9307      	strlt	r3, [sp, #28]
 80036b4:	bfb8      	it	lt
 80036b6:	9204      	strlt	r2, [sp, #16]
 80036b8:	7823      	ldrb	r3, [r4, #0]
 80036ba:	2b2e      	cmp	r3, #46	; 0x2e
 80036bc:	d10c      	bne.n	80036d8 <_svfiprintf_r+0x130>
 80036be:	7863      	ldrb	r3, [r4, #1]
 80036c0:	2b2a      	cmp	r3, #42	; 0x2a
 80036c2:	d134      	bne.n	800372e <_svfiprintf_r+0x186>
 80036c4:	9b03      	ldr	r3, [sp, #12]
 80036c6:	3402      	adds	r4, #2
 80036c8:	1d1a      	adds	r2, r3, #4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	9203      	str	r2, [sp, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bfb8      	it	lt
 80036d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80036d6:	9305      	str	r3, [sp, #20]
 80036d8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003794 <_svfiprintf_r+0x1ec>
 80036dc:	2203      	movs	r2, #3
 80036de:	4650      	mov	r0, sl
 80036e0:	7821      	ldrb	r1, [r4, #0]
 80036e2:	f000 fa1d 	bl	8003b20 <memchr>
 80036e6:	b138      	cbz	r0, 80036f8 <_svfiprintf_r+0x150>
 80036e8:	2240      	movs	r2, #64	; 0x40
 80036ea:	9b04      	ldr	r3, [sp, #16]
 80036ec:	eba0 000a 	sub.w	r0, r0, sl
 80036f0:	4082      	lsls	r2, r0
 80036f2:	4313      	orrs	r3, r2
 80036f4:	3401      	adds	r4, #1
 80036f6:	9304      	str	r3, [sp, #16]
 80036f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036fc:	2206      	movs	r2, #6
 80036fe:	4826      	ldr	r0, [pc, #152]	; (8003798 <_svfiprintf_r+0x1f0>)
 8003700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003704:	f000 fa0c 	bl	8003b20 <memchr>
 8003708:	2800      	cmp	r0, #0
 800370a:	d038      	beq.n	800377e <_svfiprintf_r+0x1d6>
 800370c:	4b23      	ldr	r3, [pc, #140]	; (800379c <_svfiprintf_r+0x1f4>)
 800370e:	bb1b      	cbnz	r3, 8003758 <_svfiprintf_r+0x1b0>
 8003710:	9b03      	ldr	r3, [sp, #12]
 8003712:	3307      	adds	r3, #7
 8003714:	f023 0307 	bic.w	r3, r3, #7
 8003718:	3308      	adds	r3, #8
 800371a:	9303      	str	r3, [sp, #12]
 800371c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800371e:	4433      	add	r3, r6
 8003720:	9309      	str	r3, [sp, #36]	; 0x24
 8003722:	e768      	b.n	80035f6 <_svfiprintf_r+0x4e>
 8003724:	460c      	mov	r4, r1
 8003726:	2001      	movs	r0, #1
 8003728:	fb0c 3202 	mla	r2, ip, r2, r3
 800372c:	e7a6      	b.n	800367c <_svfiprintf_r+0xd4>
 800372e:	2300      	movs	r3, #0
 8003730:	f04f 0c0a 	mov.w	ip, #10
 8003734:	4619      	mov	r1, r3
 8003736:	3401      	adds	r4, #1
 8003738:	9305      	str	r3, [sp, #20]
 800373a:	4620      	mov	r0, r4
 800373c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003740:	3a30      	subs	r2, #48	; 0x30
 8003742:	2a09      	cmp	r2, #9
 8003744:	d903      	bls.n	800374e <_svfiprintf_r+0x1a6>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0c6      	beq.n	80036d8 <_svfiprintf_r+0x130>
 800374a:	9105      	str	r1, [sp, #20]
 800374c:	e7c4      	b.n	80036d8 <_svfiprintf_r+0x130>
 800374e:	4604      	mov	r4, r0
 8003750:	2301      	movs	r3, #1
 8003752:	fb0c 2101 	mla	r1, ip, r1, r2
 8003756:	e7f0      	b.n	800373a <_svfiprintf_r+0x192>
 8003758:	ab03      	add	r3, sp, #12
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	462a      	mov	r2, r5
 800375e:	4638      	mov	r0, r7
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <_svfiprintf_r+0x1f8>)
 8003762:	a904      	add	r1, sp, #16
 8003764:	f3af 8000 	nop.w
 8003768:	1c42      	adds	r2, r0, #1
 800376a:	4606      	mov	r6, r0
 800376c:	d1d6      	bne.n	800371c <_svfiprintf_r+0x174>
 800376e:	89ab      	ldrh	r3, [r5, #12]
 8003770:	065b      	lsls	r3, r3, #25
 8003772:	f53f af2d 	bmi.w	80035d0 <_svfiprintf_r+0x28>
 8003776:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003778:	b01d      	add	sp, #116	; 0x74
 800377a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800377e:	ab03      	add	r3, sp, #12
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	462a      	mov	r2, r5
 8003784:	4638      	mov	r0, r7
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <_svfiprintf_r+0x1f8>)
 8003788:	a904      	add	r1, sp, #16
 800378a:	f000 f87d 	bl	8003888 <_printf_i>
 800378e:	e7eb      	b.n	8003768 <_svfiprintf_r+0x1c0>
 8003790:	08003dde 	.word	0x08003dde
 8003794:	08003de4 	.word	0x08003de4
 8003798:	08003de8 	.word	0x08003de8
 800379c:	00000000 	.word	0x00000000
 80037a0:	080034f5 	.word	0x080034f5

080037a4 <_printf_common>:
 80037a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a8:	4616      	mov	r6, r2
 80037aa:	4699      	mov	r9, r3
 80037ac:	688a      	ldr	r2, [r1, #8]
 80037ae:	690b      	ldr	r3, [r1, #16]
 80037b0:	4607      	mov	r7, r0
 80037b2:	4293      	cmp	r3, r2
 80037b4:	bfb8      	it	lt
 80037b6:	4613      	movlt	r3, r2
 80037b8:	6033      	str	r3, [r6, #0]
 80037ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037be:	460c      	mov	r4, r1
 80037c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037c4:	b10a      	cbz	r2, 80037ca <_printf_common+0x26>
 80037c6:	3301      	adds	r3, #1
 80037c8:	6033      	str	r3, [r6, #0]
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	0699      	lsls	r1, r3, #26
 80037ce:	bf42      	ittt	mi
 80037d0:	6833      	ldrmi	r3, [r6, #0]
 80037d2:	3302      	addmi	r3, #2
 80037d4:	6033      	strmi	r3, [r6, #0]
 80037d6:	6825      	ldr	r5, [r4, #0]
 80037d8:	f015 0506 	ands.w	r5, r5, #6
 80037dc:	d106      	bne.n	80037ec <_printf_common+0x48>
 80037de:	f104 0a19 	add.w	sl, r4, #25
 80037e2:	68e3      	ldr	r3, [r4, #12]
 80037e4:	6832      	ldr	r2, [r6, #0]
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	42ab      	cmp	r3, r5
 80037ea:	dc2b      	bgt.n	8003844 <_printf_common+0xa0>
 80037ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037f0:	1e13      	subs	r3, r2, #0
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	bf18      	it	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	0692      	lsls	r2, r2, #26
 80037fa:	d430      	bmi.n	800385e <_printf_common+0xba>
 80037fc:	4649      	mov	r1, r9
 80037fe:	4638      	mov	r0, r7
 8003800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003804:	47c0      	blx	r8
 8003806:	3001      	adds	r0, #1
 8003808:	d023      	beq.n	8003852 <_printf_common+0xae>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	6922      	ldr	r2, [r4, #16]
 800380e:	f003 0306 	and.w	r3, r3, #6
 8003812:	2b04      	cmp	r3, #4
 8003814:	bf14      	ite	ne
 8003816:	2500      	movne	r5, #0
 8003818:	6833      	ldreq	r3, [r6, #0]
 800381a:	f04f 0600 	mov.w	r6, #0
 800381e:	bf08      	it	eq
 8003820:	68e5      	ldreq	r5, [r4, #12]
 8003822:	f104 041a 	add.w	r4, r4, #26
 8003826:	bf08      	it	eq
 8003828:	1aed      	subeq	r5, r5, r3
 800382a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800382e:	bf08      	it	eq
 8003830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003834:	4293      	cmp	r3, r2
 8003836:	bfc4      	itt	gt
 8003838:	1a9b      	subgt	r3, r3, r2
 800383a:	18ed      	addgt	r5, r5, r3
 800383c:	42b5      	cmp	r5, r6
 800383e:	d11a      	bne.n	8003876 <_printf_common+0xd2>
 8003840:	2000      	movs	r0, #0
 8003842:	e008      	b.n	8003856 <_printf_common+0xb2>
 8003844:	2301      	movs	r3, #1
 8003846:	4652      	mov	r2, sl
 8003848:	4649      	mov	r1, r9
 800384a:	4638      	mov	r0, r7
 800384c:	47c0      	blx	r8
 800384e:	3001      	adds	r0, #1
 8003850:	d103      	bne.n	800385a <_printf_common+0xb6>
 8003852:	f04f 30ff 	mov.w	r0, #4294967295
 8003856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385a:	3501      	adds	r5, #1
 800385c:	e7c1      	b.n	80037e2 <_printf_common+0x3e>
 800385e:	2030      	movs	r0, #48	; 0x30
 8003860:	18e1      	adds	r1, r4, r3
 8003862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800386c:	4422      	add	r2, r4
 800386e:	3302      	adds	r3, #2
 8003870:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003874:	e7c2      	b.n	80037fc <_printf_common+0x58>
 8003876:	2301      	movs	r3, #1
 8003878:	4622      	mov	r2, r4
 800387a:	4649      	mov	r1, r9
 800387c:	4638      	mov	r0, r7
 800387e:	47c0      	blx	r8
 8003880:	3001      	adds	r0, #1
 8003882:	d0e6      	beq.n	8003852 <_printf_common+0xae>
 8003884:	3601      	adds	r6, #1
 8003886:	e7d9      	b.n	800383c <_printf_common+0x98>

08003888 <_printf_i>:
 8003888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800388c:	7e0f      	ldrb	r7, [r1, #24]
 800388e:	4691      	mov	r9, r2
 8003890:	2f78      	cmp	r7, #120	; 0x78
 8003892:	4680      	mov	r8, r0
 8003894:	460c      	mov	r4, r1
 8003896:	469a      	mov	sl, r3
 8003898:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800389a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800389e:	d807      	bhi.n	80038b0 <_printf_i+0x28>
 80038a0:	2f62      	cmp	r7, #98	; 0x62
 80038a2:	d80a      	bhi.n	80038ba <_printf_i+0x32>
 80038a4:	2f00      	cmp	r7, #0
 80038a6:	f000 80d5 	beq.w	8003a54 <_printf_i+0x1cc>
 80038aa:	2f58      	cmp	r7, #88	; 0x58
 80038ac:	f000 80c1 	beq.w	8003a32 <_printf_i+0x1aa>
 80038b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038b8:	e03a      	b.n	8003930 <_printf_i+0xa8>
 80038ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038be:	2b15      	cmp	r3, #21
 80038c0:	d8f6      	bhi.n	80038b0 <_printf_i+0x28>
 80038c2:	a101      	add	r1, pc, #4	; (adr r1, 80038c8 <_printf_i+0x40>)
 80038c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038c8:	08003921 	.word	0x08003921
 80038cc:	08003935 	.word	0x08003935
 80038d0:	080038b1 	.word	0x080038b1
 80038d4:	080038b1 	.word	0x080038b1
 80038d8:	080038b1 	.word	0x080038b1
 80038dc:	080038b1 	.word	0x080038b1
 80038e0:	08003935 	.word	0x08003935
 80038e4:	080038b1 	.word	0x080038b1
 80038e8:	080038b1 	.word	0x080038b1
 80038ec:	080038b1 	.word	0x080038b1
 80038f0:	080038b1 	.word	0x080038b1
 80038f4:	08003a3b 	.word	0x08003a3b
 80038f8:	08003961 	.word	0x08003961
 80038fc:	080039f5 	.word	0x080039f5
 8003900:	080038b1 	.word	0x080038b1
 8003904:	080038b1 	.word	0x080038b1
 8003908:	08003a5d 	.word	0x08003a5d
 800390c:	080038b1 	.word	0x080038b1
 8003910:	08003961 	.word	0x08003961
 8003914:	080038b1 	.word	0x080038b1
 8003918:	080038b1 	.word	0x080038b1
 800391c:	080039fd 	.word	0x080039fd
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	1d1a      	adds	r2, r3, #4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	602a      	str	r2, [r5, #0]
 8003928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800392c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003930:	2301      	movs	r3, #1
 8003932:	e0a0      	b.n	8003a76 <_printf_i+0x1ee>
 8003934:	6820      	ldr	r0, [r4, #0]
 8003936:	682b      	ldr	r3, [r5, #0]
 8003938:	0607      	lsls	r7, r0, #24
 800393a:	f103 0104 	add.w	r1, r3, #4
 800393e:	6029      	str	r1, [r5, #0]
 8003940:	d501      	bpl.n	8003946 <_printf_i+0xbe>
 8003942:	681e      	ldr	r6, [r3, #0]
 8003944:	e003      	b.n	800394e <_printf_i+0xc6>
 8003946:	0646      	lsls	r6, r0, #25
 8003948:	d5fb      	bpl.n	8003942 <_printf_i+0xba>
 800394a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800394e:	2e00      	cmp	r6, #0
 8003950:	da03      	bge.n	800395a <_printf_i+0xd2>
 8003952:	232d      	movs	r3, #45	; 0x2d
 8003954:	4276      	negs	r6, r6
 8003956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800395a:	230a      	movs	r3, #10
 800395c:	4859      	ldr	r0, [pc, #356]	; (8003ac4 <_printf_i+0x23c>)
 800395e:	e012      	b.n	8003986 <_printf_i+0xfe>
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	6820      	ldr	r0, [r4, #0]
 8003964:	1d19      	adds	r1, r3, #4
 8003966:	6029      	str	r1, [r5, #0]
 8003968:	0605      	lsls	r5, r0, #24
 800396a:	d501      	bpl.n	8003970 <_printf_i+0xe8>
 800396c:	681e      	ldr	r6, [r3, #0]
 800396e:	e002      	b.n	8003976 <_printf_i+0xee>
 8003970:	0641      	lsls	r1, r0, #25
 8003972:	d5fb      	bpl.n	800396c <_printf_i+0xe4>
 8003974:	881e      	ldrh	r6, [r3, #0]
 8003976:	2f6f      	cmp	r7, #111	; 0x6f
 8003978:	bf0c      	ite	eq
 800397a:	2308      	moveq	r3, #8
 800397c:	230a      	movne	r3, #10
 800397e:	4851      	ldr	r0, [pc, #324]	; (8003ac4 <_printf_i+0x23c>)
 8003980:	2100      	movs	r1, #0
 8003982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003986:	6865      	ldr	r5, [r4, #4]
 8003988:	2d00      	cmp	r5, #0
 800398a:	bfa8      	it	ge
 800398c:	6821      	ldrge	r1, [r4, #0]
 800398e:	60a5      	str	r5, [r4, #8]
 8003990:	bfa4      	itt	ge
 8003992:	f021 0104 	bicge.w	r1, r1, #4
 8003996:	6021      	strge	r1, [r4, #0]
 8003998:	b90e      	cbnz	r6, 800399e <_printf_i+0x116>
 800399a:	2d00      	cmp	r5, #0
 800399c:	d04b      	beq.n	8003a36 <_printf_i+0x1ae>
 800399e:	4615      	mov	r5, r2
 80039a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80039a4:	fb03 6711 	mls	r7, r3, r1, r6
 80039a8:	5dc7      	ldrb	r7, [r0, r7]
 80039aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039ae:	4637      	mov	r7, r6
 80039b0:	42bb      	cmp	r3, r7
 80039b2:	460e      	mov	r6, r1
 80039b4:	d9f4      	bls.n	80039a0 <_printf_i+0x118>
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d10b      	bne.n	80039d2 <_printf_i+0x14a>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	07de      	lsls	r6, r3, #31
 80039be:	d508      	bpl.n	80039d2 <_printf_i+0x14a>
 80039c0:	6923      	ldr	r3, [r4, #16]
 80039c2:	6861      	ldr	r1, [r4, #4]
 80039c4:	4299      	cmp	r1, r3
 80039c6:	bfde      	ittt	le
 80039c8:	2330      	movle	r3, #48	; 0x30
 80039ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039d2:	1b52      	subs	r2, r2, r5
 80039d4:	6122      	str	r2, [r4, #16]
 80039d6:	464b      	mov	r3, r9
 80039d8:	4621      	mov	r1, r4
 80039da:	4640      	mov	r0, r8
 80039dc:	f8cd a000 	str.w	sl, [sp]
 80039e0:	aa03      	add	r2, sp, #12
 80039e2:	f7ff fedf 	bl	80037a4 <_printf_common>
 80039e6:	3001      	adds	r0, #1
 80039e8:	d14a      	bne.n	8003a80 <_printf_i+0x1f8>
 80039ea:	f04f 30ff 	mov.w	r0, #4294967295
 80039ee:	b004      	add	sp, #16
 80039f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	f043 0320 	orr.w	r3, r3, #32
 80039fa:	6023      	str	r3, [r4, #0]
 80039fc:	2778      	movs	r7, #120	; 0x78
 80039fe:	4832      	ldr	r0, [pc, #200]	; (8003ac8 <_printf_i+0x240>)
 8003a00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	6829      	ldr	r1, [r5, #0]
 8003a08:	061f      	lsls	r7, r3, #24
 8003a0a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a0e:	d402      	bmi.n	8003a16 <_printf_i+0x18e>
 8003a10:	065f      	lsls	r7, r3, #25
 8003a12:	bf48      	it	mi
 8003a14:	b2b6      	uxthmi	r6, r6
 8003a16:	07df      	lsls	r7, r3, #31
 8003a18:	bf48      	it	mi
 8003a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8003a1e:	6029      	str	r1, [r5, #0]
 8003a20:	bf48      	it	mi
 8003a22:	6023      	strmi	r3, [r4, #0]
 8003a24:	b91e      	cbnz	r6, 8003a2e <_printf_i+0x1a6>
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	f023 0320 	bic.w	r3, r3, #32
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	2310      	movs	r3, #16
 8003a30:	e7a6      	b.n	8003980 <_printf_i+0xf8>
 8003a32:	4824      	ldr	r0, [pc, #144]	; (8003ac4 <_printf_i+0x23c>)
 8003a34:	e7e4      	b.n	8003a00 <_printf_i+0x178>
 8003a36:	4615      	mov	r5, r2
 8003a38:	e7bd      	b.n	80039b6 <_printf_i+0x12e>
 8003a3a:	682b      	ldr	r3, [r5, #0]
 8003a3c:	6826      	ldr	r6, [r4, #0]
 8003a3e:	1d18      	adds	r0, r3, #4
 8003a40:	6961      	ldr	r1, [r4, #20]
 8003a42:	6028      	str	r0, [r5, #0]
 8003a44:	0635      	lsls	r5, r6, #24
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	d501      	bpl.n	8003a4e <_printf_i+0x1c6>
 8003a4a:	6019      	str	r1, [r3, #0]
 8003a4c:	e002      	b.n	8003a54 <_printf_i+0x1cc>
 8003a4e:	0670      	lsls	r0, r6, #25
 8003a50:	d5fb      	bpl.n	8003a4a <_printf_i+0x1c2>
 8003a52:	8019      	strh	r1, [r3, #0]
 8003a54:	2300      	movs	r3, #0
 8003a56:	4615      	mov	r5, r2
 8003a58:	6123      	str	r3, [r4, #16]
 8003a5a:	e7bc      	b.n	80039d6 <_printf_i+0x14e>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	2100      	movs	r1, #0
 8003a60:	1d1a      	adds	r2, r3, #4
 8003a62:	602a      	str	r2, [r5, #0]
 8003a64:	681d      	ldr	r5, [r3, #0]
 8003a66:	6862      	ldr	r2, [r4, #4]
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f000 f859 	bl	8003b20 <memchr>
 8003a6e:	b108      	cbz	r0, 8003a74 <_printf_i+0x1ec>
 8003a70:	1b40      	subs	r0, r0, r5
 8003a72:	6060      	str	r0, [r4, #4]
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	6123      	str	r3, [r4, #16]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a7e:	e7aa      	b.n	80039d6 <_printf_i+0x14e>
 8003a80:	462a      	mov	r2, r5
 8003a82:	4649      	mov	r1, r9
 8003a84:	4640      	mov	r0, r8
 8003a86:	6923      	ldr	r3, [r4, #16]
 8003a88:	47d0      	blx	sl
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d0ad      	beq.n	80039ea <_printf_i+0x162>
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	079b      	lsls	r3, r3, #30
 8003a92:	d413      	bmi.n	8003abc <_printf_i+0x234>
 8003a94:	68e0      	ldr	r0, [r4, #12]
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	4298      	cmp	r0, r3
 8003a9a:	bfb8      	it	lt
 8003a9c:	4618      	movlt	r0, r3
 8003a9e:	e7a6      	b.n	80039ee <_printf_i+0x166>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	4632      	mov	r2, r6
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	4640      	mov	r0, r8
 8003aa8:	47d0      	blx	sl
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d09d      	beq.n	80039ea <_printf_i+0x162>
 8003aae:	3501      	adds	r5, #1
 8003ab0:	68e3      	ldr	r3, [r4, #12]
 8003ab2:	9903      	ldr	r1, [sp, #12]
 8003ab4:	1a5b      	subs	r3, r3, r1
 8003ab6:	42ab      	cmp	r3, r5
 8003ab8:	dcf2      	bgt.n	8003aa0 <_printf_i+0x218>
 8003aba:	e7eb      	b.n	8003a94 <_printf_i+0x20c>
 8003abc:	2500      	movs	r5, #0
 8003abe:	f104 0619 	add.w	r6, r4, #25
 8003ac2:	e7f5      	b.n	8003ab0 <_printf_i+0x228>
 8003ac4:	08003def 	.word	0x08003def
 8003ac8:	08003e00 	.word	0x08003e00

08003acc <memmove>:
 8003acc:	4288      	cmp	r0, r1
 8003ace:	b510      	push	{r4, lr}
 8003ad0:	eb01 0402 	add.w	r4, r1, r2
 8003ad4:	d902      	bls.n	8003adc <memmove+0x10>
 8003ad6:	4284      	cmp	r4, r0
 8003ad8:	4623      	mov	r3, r4
 8003ada:	d807      	bhi.n	8003aec <memmove+0x20>
 8003adc:	1e43      	subs	r3, r0, #1
 8003ade:	42a1      	cmp	r1, r4
 8003ae0:	d008      	beq.n	8003af4 <memmove+0x28>
 8003ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003aea:	e7f8      	b.n	8003ade <memmove+0x12>
 8003aec:	4601      	mov	r1, r0
 8003aee:	4402      	add	r2, r0
 8003af0:	428a      	cmp	r2, r1
 8003af2:	d100      	bne.n	8003af6 <memmove+0x2a>
 8003af4:	bd10      	pop	{r4, pc}
 8003af6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003afa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003afe:	e7f7      	b.n	8003af0 <memmove+0x24>

08003b00 <_sbrk_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	2300      	movs	r3, #0
 8003b04:	4d05      	ldr	r5, [pc, #20]	; (8003b1c <_sbrk_r+0x1c>)
 8003b06:	4604      	mov	r4, r0
 8003b08:	4608      	mov	r0, r1
 8003b0a:	602b      	str	r3, [r5, #0]
 8003b0c:	f7fd fb22 	bl	8001154 <_sbrk>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d102      	bne.n	8003b1a <_sbrk_r+0x1a>
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	b103      	cbz	r3, 8003b1a <_sbrk_r+0x1a>
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
 8003b1c:	20000368 	.word	0x20000368

08003b20 <memchr>:
 8003b20:	4603      	mov	r3, r0
 8003b22:	b510      	push	{r4, lr}
 8003b24:	b2c9      	uxtb	r1, r1
 8003b26:	4402      	add	r2, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	d101      	bne.n	8003b32 <memchr+0x12>
 8003b2e:	2000      	movs	r0, #0
 8003b30:	e003      	b.n	8003b3a <memchr+0x1a>
 8003b32:	7804      	ldrb	r4, [r0, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	428c      	cmp	r4, r1
 8003b38:	d1f6      	bne.n	8003b28 <memchr+0x8>
 8003b3a:	bd10      	pop	{r4, pc}

08003b3c <memcpy>:
 8003b3c:	440a      	add	r2, r1
 8003b3e:	4291      	cmp	r1, r2
 8003b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b44:	d100      	bne.n	8003b48 <memcpy+0xc>
 8003b46:	4770      	bx	lr
 8003b48:	b510      	push	{r4, lr}
 8003b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b4e:	4291      	cmp	r1, r2
 8003b50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b54:	d1f9      	bne.n	8003b4a <memcpy+0xe>
 8003b56:	bd10      	pop	{r4, pc}

08003b58 <_realloc_r>:
 8003b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b5c:	4680      	mov	r8, r0
 8003b5e:	4614      	mov	r4, r2
 8003b60:	460e      	mov	r6, r1
 8003b62:	b921      	cbnz	r1, 8003b6e <_realloc_r+0x16>
 8003b64:	4611      	mov	r1, r2
 8003b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6a:	f7ff bc37 	b.w	80033dc <_malloc_r>
 8003b6e:	b92a      	cbnz	r2, 8003b7c <_realloc_r+0x24>
 8003b70:	f7ff fbcc 	bl	800330c <_free_r>
 8003b74:	4625      	mov	r5, r4
 8003b76:	4628      	mov	r0, r5
 8003b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b7c:	f000 f81b 	bl	8003bb6 <_malloc_usable_size_r>
 8003b80:	4284      	cmp	r4, r0
 8003b82:	4607      	mov	r7, r0
 8003b84:	d802      	bhi.n	8003b8c <_realloc_r+0x34>
 8003b86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b8a:	d812      	bhi.n	8003bb2 <_realloc_r+0x5a>
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	4640      	mov	r0, r8
 8003b90:	f7ff fc24 	bl	80033dc <_malloc_r>
 8003b94:	4605      	mov	r5, r0
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d0ed      	beq.n	8003b76 <_realloc_r+0x1e>
 8003b9a:	42bc      	cmp	r4, r7
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	4631      	mov	r1, r6
 8003ba0:	bf28      	it	cs
 8003ba2:	463a      	movcs	r2, r7
 8003ba4:	f7ff ffca 	bl	8003b3c <memcpy>
 8003ba8:	4631      	mov	r1, r6
 8003baa:	4640      	mov	r0, r8
 8003bac:	f7ff fbae 	bl	800330c <_free_r>
 8003bb0:	e7e1      	b.n	8003b76 <_realloc_r+0x1e>
 8003bb2:	4635      	mov	r5, r6
 8003bb4:	e7df      	b.n	8003b76 <_realloc_r+0x1e>

08003bb6 <_malloc_usable_size_r>:
 8003bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bba:	1f18      	subs	r0, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bfbc      	itt	lt
 8003bc0:	580b      	ldrlt	r3, [r1, r0]
 8003bc2:	18c0      	addlt	r0, r0, r3
 8003bc4:	4770      	bx	lr
	...

08003bc8 <_init>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr

08003bd4 <_fini>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	bf00      	nop
 8003bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bda:	bc08      	pop	{r3}
 8003bdc:	469e      	mov	lr, r3
 8003bde:	4770      	bx	lr
