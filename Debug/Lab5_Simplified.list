
Lab5_Simplified.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dbc  08003dbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003dbc  08003dbc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dbc  08003dbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000070  08003e34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08003e34  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000baa8  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c7f  00000000  00000000  0002bb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  0002d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a83  00000000  00000000  0002e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017cdc  00000000  00000000  0002effb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb61  00000000  00000000  00046cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ad2d  00000000  00000000  00055838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d74  00000000  00000000  000e0568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000e42dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b70 	.word	0x08003b70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003b70 	.word	0x08003b70

0800014c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000156:	4a38      	ldr	r2, [pc, #224]	; (8000238 <HD44780_Init+0xec>)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800015c:	4b37      	ldr	r3, [pc, #220]	; (800023c <HD44780_Init+0xf0>)
 800015e:	2208      	movs	r2, #8
 8000160:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000162:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf4>)
 8000164:	2200      	movs	r2, #0
 8000166:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000168:	4b33      	ldr	r3, [pc, #204]	; (8000238 <HD44780_Init+0xec>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d907      	bls.n	8000180 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000170:	4b33      	ldr	r3, [pc, #204]	; (8000240 <HD44780_Init+0xf4>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	f043 0308 	orr.w	r3, r3, #8
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b31      	ldr	r3, [pc, #196]	; (8000240 <HD44780_Init+0xf4>)
 800017c:	701a      	strb	r2, [r3, #0]
 800017e:	e006      	b.n	800018e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000180:	4b2f      	ldr	r3, [pc, #188]	; (8000240 <HD44780_Init+0xf4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0304 	orr.w	r3, r3, #4
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b2d      	ldr	r3, [pc, #180]	; (8000240 <HD44780_Init+0xf4>)
 800018c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800018e:	f000 f985 	bl	800049c <DelayInit>
  HAL_Delay(50);
 8000192:	2032      	movs	r0, #50	; 0x32
 8000194:	f001 f876 	bl	8001284 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000198:	4b28      	ldr	r3, [pc, #160]	; (800023c <HD44780_Init+0xf0>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f943 	bl	8000428 <ExpanderWrite>
  HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f001 f86d 	bl	8001284 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001aa:	2030      	movs	r0, #48	; 0x30
 80001ac:	f000 f92b 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b4:	f000 f99a 	bl	80004ec <DelayUS>

  Write4Bits(0x03 << 4);
 80001b8:	2030      	movs	r0, #48	; 0x30
 80001ba:	f000 f924 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001be:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c2:	f000 f993 	bl	80004ec <DelayUS>

  Write4Bits(0x03 << 4);
 80001c6:	2030      	movs	r0, #48	; 0x30
 80001c8:	f000 f91d 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001cc:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d0:	f000 f98c 	bl	80004ec <DelayUS>

  Write4Bits(0x02 << 4);
 80001d4:	2020      	movs	r0, #32
 80001d6:	f000 f916 	bl	8000406 <Write4Bits>
  DelayUS(100);
 80001da:	2064      	movs	r0, #100	; 0x64
 80001dc:	f000 f986 	bl	80004ec <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e0:	4b17      	ldr	r3, [pc, #92]	; (8000240 <HD44780_Init+0xf4>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	f043 0320 	orr.w	r3, r3, #32
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f8ce 	bl	800038c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <HD44780_Init+0xf8>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001f6:	f000 f875 	bl	80002e4 <HD44780_Display>
  HD44780_Clear();
 80001fa:	f000 f82b 	bl	8000254 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80001fe:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HD44780_Init+0xfc>)
 8000200:	2202      	movs	r2, #2
 8000202:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <HD44780_Init+0xfc>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	f043 0304 	orr.w	r3, r3, #4
 800020c:	b2db      	uxtb	r3, r3
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f8bc 	bl	800038c <SendCommand>
  DelayUS(4500);
 8000214:	f241 1094 	movw	r0, #4500	; 0x1194
 8000218:	f000 f968 	bl	80004ec <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800021c:	490b      	ldr	r1, [pc, #44]	; (800024c <HD44780_Init+0x100>)
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f876 	bl	8000310 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000224:	490a      	ldr	r1, [pc, #40]	; (8000250 <HD44780_Init+0x104>)
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f872 	bl	8000310 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800022c:	f000 f81d 	bl	800026a <HD44780_Home>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	2000008f 	.word	0x2000008f
 800023c:	20000090 	.word	0x20000090
 8000240:	2000008c 	.word	0x2000008c
 8000244:	2000008d 	.word	0x2000008d
 8000248:	2000008e 	.word	0x2000008e
 800024c:	20000000 	.word	0x20000000
 8000250:	20000008 	.word	0x20000008

08000254 <HD44780_Clear>:

void HD44780_Clear()
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 f897 	bl	800038c <SendCommand>
  DelayUS(2000);
 800025e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000262:	f000 f943 	bl	80004ec <DelayUS>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}

0800026a <HD44780_Home>:

void HD44780_Home()
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800026e:	2002      	movs	r0, #2
 8000270:	f000 f88c 	bl	800038c <SendCommand>
  DelayUS(2000);
 8000274:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000278:	f000 f938 	bl	80004ec <DelayUS>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	460a      	mov	r2, r1
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <HD44780_SetCursor+0x5c>)
 8000292:	f107 0408 	add.w	r4, r7, #8
 8000296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <HD44780_SetCursor+0x60>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d303      	bcc.n	80002ae <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <HD44780_SetCursor+0x60>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	3318      	adds	r3, #24
 80002b4:	443b      	add	r3, r7
 80002b6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4413      	add	r3, r2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002c8:	b25b      	sxtb	r3, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f85d 	bl	800038c <SendCommand>
}
 80002d2:	bf00      	nop
 80002d4:	371c      	adds	r7, #28
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd90      	pop	{r4, r7, pc}
 80002da:	bf00      	nop
 80002dc:	08003b88 	.word	0x08003b88
 80002e0:	2000008f 	.word	0x2000008f

080002e4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <HD44780_Display+0x28>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <HD44780_Display+0x28>)
 80002f4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HD44780_Display+0x28>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f843 	bl	800038c <SendCommand>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000008d 	.word	0x2000008d

08000310 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 0307 	and.w	r3, r3, #7
 8000322:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	00db      	lsls	r3, r3, #3
 8000328:	b25b      	sxtb	r3, r3
 800032a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800032e:	b25b      	sxtb	r3, r3
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f82a 	bl	800038c <SendCommand>
  for (int i=0; i<8; i++)
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	e009      	b.n	8000352 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	4413      	add	r3, r2
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f82e 	bl	80003a8 <SendChar>
  for (int i=0; i<8; i++)
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b07      	cmp	r3, #7
 8000356:	ddf2      	ble.n	800033e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036a:	e006      	b.n	800037a <HD44780_PrintStr+0x18>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	607a      	str	r2, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f817 	bl	80003a8 <SendChar>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d1f4      	bne.n	800036c <HD44780_PrintStr+0xa>
}
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f812 	bl	80003c4 <Send>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2101      	movs	r1, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f804 	bl	80003c4 <Send>
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	460a      	mov	r2, r1
 80003ce:	71fb      	strb	r3, [r7, #7]
 80003d0:	4613      	mov	r3, r2
 80003d2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f023 030f 	bic.w	r3, r3, #15
 80003da:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	011b      	lsls	r3, r3, #4
 80003e0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003e2:	7bfa      	ldrb	r2, [r7, #15]
 80003e4:	79bb      	ldrb	r3, [r7, #6]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f80b 	bl	8000406 <Write4Bits>
  Write4Bits((lownib)|mode);
 80003f0:	7bba      	ldrb	r2, [r7, #14]
 80003f2:	79bb      	ldrb	r3, [r7, #6]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f804 	bl	8000406 <Write4Bits>
}
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f808 	bl	8000428 <ExpanderWrite>
  PulseEnable(value);
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f820 	bl	8000460 <PulseEnable>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af02      	add	r7, sp, #8
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <ExpanderWrite+0x30>)
 8000434:	781a      	ldrb	r2, [r3, #0]
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	4313      	orrs	r3, r2
 800043a:	b2db      	uxtb	r3, r3
 800043c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800043e:	f107 020f 	add.w	r2, r7, #15
 8000442:	230a      	movs	r3, #10
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2301      	movs	r3, #1
 8000448:	214e      	movs	r1, #78	; 0x4e
 800044a:	4804      	ldr	r0, [pc, #16]	; (800045c <ExpanderWrite+0x34>)
 800044c:	f001 fb5c 	bl	8001b08 <HAL_I2C_Master_Transmit>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000090 	.word	0x20000090
 800045c:	20000094 	.word	0x20000094

08000460 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	f043 0304 	orr.w	r3, r3, #4
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ffd8 	bl	8000428 <ExpanderWrite>
  DelayUS(20);
 8000478:	2014      	movs	r0, #20
 800047a:	f000 f837 	bl	80004ec <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	f023 0304 	bic.w	r3, r3, #4
 8000484:	b2db      	uxtb	r3, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ffce 	bl	8000428 <ExpanderWrite>
  DelayUS(20);
 800048c:	2014      	movs	r0, #20
 800048e:	f000 f82d 	bl	80004ec <DelayUS>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <DelayInit>:

static void DelayInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <DelayInit+0x48>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <DelayInit+0x48>)
 80004a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004aa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004ac:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <DelayInit+0x48>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <DelayInit+0x48>)
 80004b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004b6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <DelayInit+0x4c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a0a      	ldr	r2, [pc, #40]	; (80004e8 <DelayInit+0x4c>)
 80004be:	f023 0301 	bic.w	r3, r3, #1
 80004c2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <DelayInit+0x4c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <DelayInit+0x4c>)
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <DelayInit+0x4c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004d6:	bf00      	nop
  __ASM volatile ("NOP");
 80004d8:	bf00      	nop
  __ASM volatile ("NOP");
 80004da:	bf00      	nop
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	e000edf0 	.word	0xe000edf0
 80004e8:	e0001000 	.word	0xe0001000

080004ec <DelayUS>:

static void DelayUS(uint32_t us) {
 80004ec:	b480      	push	{r7}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <DelayUS+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <DelayUS+0x44>)
 80004fa:	fba2 2303 	umull	r2, r3, r2, r3
 80004fe:	0c9a      	lsrs	r2, r3, #18
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	fb02 f303 	mul.w	r3, r2, r3
 8000506:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <DelayUS+0x48>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <DelayUS+0x48>)
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	697a      	ldr	r2, [r7, #20]
 800051c:	429a      	cmp	r2, r3
 800051e:	d8f6      	bhi.n	800050e <DelayUS+0x22>
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	371c      	adds	r7, #28
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	20000014 	.word	0x20000014
 8000530:	431bde83 	.word	0x431bde83
 8000534:	e0001000 	.word	0xe0001000

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fe40 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f85c 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f9b6 	bl	80008b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000548:	f000 f8ca 	bl	80006e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800054c:	f000 f916 	bl	800077c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000550:	f000 f962 	bl	8000818 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000554:	f000 f896 	bl	8000684 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000558:	2002      	movs	r0, #2
 800055a:	f7ff fdf7 	bl	800014c <HD44780_Init>
  HD44780_Clear();
 800055e:	f7ff fe79 	bl	8000254 <HD44780_Clear>
  S = AllStop;
 8000562:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <main+0xb0>)
 8000564:	220a      	movs	r2, #10
 8000566:	801a      	strh	r2, [r3, #0]
  while(1) {
	  // set output
//	  GPIOA->ODR = (fsm[S].out);
	  GPIOA->ODR = (fsm[S].out)|((fsm[S].out & 0x100)<<1);
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <main+0xb0>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	4a1f      	ldr	r2, [pc, #124]	; (80005ec <main+0xb4>)
 8000570:	460b      	mov	r3, r1
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	440b      	add	r3, r1
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	4413      	add	r3, r2
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <main+0xb0>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	491a      	ldr	r1, [pc, #104]	; (80005ec <main+0xb4>)
 8000584:	4603      	mov	r3, r0
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4403      	add	r3, r0
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	440b      	add	r3, r1
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000596:	4916      	ldr	r1, [pc, #88]	; (80005f0 <main+0xb8>)
 8000598:	4313      	orrs	r3, r2
 800059a:	60cb      	str	r3, [r1, #12]
	  // delay
	  TimerDelayMs(fsm[S].wait);
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <main+0xb0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	4a12      	ldr	r2, [pc, #72]	; (80005ec <main+0xb4>)
 80005a4:	460b      	mov	r3, r1
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	4413      	add	r3, r2
 80005ae:	3304      	adds	r3, #4
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fad6 	bl	8000b64 <TimerDelayMs>
	  //read input
	  Input = inputValue;
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <main+0xbc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <main+0xc0>)
 80005c0:	601a      	str	r2, [r3, #0]
	  //S = next state
	  S = fsm[S].next[Input];
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <main+0xb0>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <main+0xc0>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4907      	ldr	r1, [pc, #28]	; (80005ec <main+0xb4>)
 80005ce:	4603      	mov	r3, r0
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4403      	add	r3, r0
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	3302      	adds	r3, #2
 80005da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <main+0xb0>)
 80005e2:	801a      	strh	r2, [r3, #0]
	  GPIOA->ODR = (fsm[S].out)|((fsm[S].out & 0x100)<<1);
 80005e4:	e7c0      	b.n	8000568 <main+0x30>
 80005e6:	bf00      	nop
 80005e8:	200001c0 	.word	0x200001c0
 80005ec:	08003ba4 	.word	0x08003ba4
 80005f0:	40010800 	.word	0x40010800
 80005f4:	200001c6 	.word	0x200001c6
 80005f8:	20000010 	.word	0x20000010

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b090      	sub	sp, #64	; 0x40
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2228      	movs	r2, #40	; 0x28
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fe1e 	bl	800324c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800063a:	2300      	movs	r3, #0
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fdb8 	bl	80021b8 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800064e:	f000 fc29 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2101      	movs	r1, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f002 f826 	bl	80026bc <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000676:	f000 fc15 	bl	8000ea4 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3740      	adds	r7, #64	; 0x40
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_I2C1_Init+0x54>)
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <MX_I2C1_Init+0x58>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 5000;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x54>)
 8000690:	f241 3288 	movw	r2, #5000	; 0x1388
 8000694:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_I2C1_Init+0x54>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_I2C1_Init+0x54>)
 80006a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_I2C1_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_I2C1_Init+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C1_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_I2C1_Init+0x54>)
 80006c4:	f001 f8dc 	bl	8001880 <HAL_I2C_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80006ce:	f000 fbe9 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000094 	.word	0x20000094
 80006dc:	40005400 	.word	0x40005400

080006e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_TIM2_Init+0x98>)
 80006fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_TIM2_Init+0x98>)
 8000706:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800070a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_TIM2_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-100;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_TIM2_Init+0x98>)
 8000714:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8000718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_TIM2_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_TIM2_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <MX_TIM2_Init+0x98>)
 8000728:	f002 f944 	bl	80029b4 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000732:	f000 fbb7 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_TIM2_Init+0x98>)
 8000744:	f002 fb0e 	bl	8002d64 <HAL_TIM_ConfigClockSource>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800074e:	f000 fba9 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_TIM2_Init+0x98>)
 8000760:	f002 fce4 	bl	800312c <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800076a:	f000 fb9b 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000e8 	.word	0x200000e8

0800077c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_TIM3_Init+0x94>)
 800079a:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <MX_TIM3_Init+0x98>)
 800079c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_TIM3_Init+0x94>)
 80007a0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80007a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_TIM3_Init+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-100;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_TIM3_Init+0x94>)
 80007ae:	f241 3224 	movw	r2, #4900	; 0x1324
 80007b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_TIM3_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_TIM3_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007c0:	4813      	ldr	r0, [pc, #76]	; (8000810 <MX_TIM3_Init+0x94>)
 80007c2:	f002 f8f7 	bl	80029b4 <HAL_TIM_Base_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007cc:	f000 fb6a 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	4619      	mov	r1, r3
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_TIM3_Init+0x94>)
 80007de:	f002 fac1 	bl	8002d64 <HAL_TIM_ConfigClockSource>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007e8:	f000 fb5c 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_TIM3_Init+0x94>)
 80007fa:	f002 fc97 	bl	800312c <HAL_TIMEx_MasterConfigSynchronization>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000804:	f000 fb4e 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000130 	.word	0x20000130
 8000814:	40000400 	.word	0x40000400

08000818 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_TIM4_Init+0x94>)
 8000836:	4a1e      	ldr	r2, [pc, #120]	; (80008b0 <MX_TIM4_Init+0x98>)
 8000838:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16000-1;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_TIM4_Init+0x94>)
 800083c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000840:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_TIM4_Init+0x94>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-100;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_TIM4_Init+0x94>)
 800084a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800084e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_TIM4_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_TIM4_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <MX_TIM4_Init+0x94>)
 800085e:	f002 f8a9 	bl	80029b4 <HAL_TIM_Base_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000868:	f000 fb1c 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	4619      	mov	r1, r3
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_TIM4_Init+0x94>)
 800087a:	f002 fa73 	bl	8002d64 <HAL_TIM_ConfigClockSource>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000884:	f000 fb0e 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_TIM4_Init+0x94>)
 8000896:	f002 fc49 	bl	800312c <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008a0:	f000 fb00 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000178 	.word	0x20000178
 80008b0:	40000800 	.word	0x40000800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c8:	4b30      	ldr	r3, [pc, #192]	; (800098c <MX_GPIO_Init+0xd8>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a2f      	ldr	r2, [pc, #188]	; (800098c <MX_GPIO_Init+0xd8>)
 80008ce:	f043 0320 	orr.w	r3, r3, #32
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b2d      	ldr	r3, [pc, #180]	; (800098c <MX_GPIO_Init+0xd8>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b2a      	ldr	r3, [pc, #168]	; (800098c <MX_GPIO_Init+0xd8>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a29      	ldr	r2, [pc, #164]	; (800098c <MX_GPIO_Init+0xd8>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <MX_GPIO_Init+0xd8>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <MX_GPIO_Init+0xd8>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a23      	ldr	r2, [pc, #140]	; (800098c <MX_GPIO_Init+0xd8>)
 80008fe:	f043 0308 	orr.w	r3, r3, #8
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_GPIO_Init+0xd8>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0308 	and.w	r3, r3, #8
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000910:	2200      	movs	r2, #0
 8000912:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000916:	481e      	ldr	r0, [pc, #120]	; (8000990 <MX_GPIO_Init+0xdc>)
 8000918:	f000 ff81 	bl	800181e <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800091c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000920:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000926:	2302      	movs	r3, #2
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2302      	movs	r3, #2
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4619      	mov	r1, r3
 8000934:	4816      	ldr	r0, [pc, #88]	; (8000990 <MX_GPIO_Init+0xdc>)
 8000936:	f000 fdd7 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800093a:	2338      	movs	r3, #56	; 0x38
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_GPIO_Init+0xe0>)
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4619      	mov	r1, r3
 800094c:	4812      	ldr	r0, [pc, #72]	; (8000998 <MX_GPIO_Init+0xe4>)
 800094e:	f000 fdcb 	bl	80014e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2101      	movs	r1, #1
 8000956:	2009      	movs	r0, #9
 8000958:	f000 fd8f 	bl	800147a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800095c:	2009      	movs	r0, #9
 800095e:	f000 fda8 	bl	80014b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2101      	movs	r1, #1
 8000966:	200a      	movs	r0, #10
 8000968:	f000 fd87 	bl	800147a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800096c:	200a      	movs	r0, #10
 800096e:	f000 fda0 	bl	80014b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2101      	movs	r1, #1
 8000976:	2017      	movs	r0, #23
 8000978:	f000 fd7f 	bl	800147a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800097c:	2017      	movs	r0, #23
 800097e:	f000 fd98 	bl	80014b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000
 8000990:	40010800 	.word	0x40010800
 8000994:	10310000 	.word	0x10310000
 8000998:	40010c00 	.word	0x40010c00

0800099c <sendRemaningTime>:

/* USER CODE BEGIN 4 */

static void sendRemaningTime(uint8_t color, uint32_t time) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
	count1 = time;
 80009a8:	4a60      	ldr	r2, [pc, #384]	; (8000b2c <sendRemaningTime+0x190>)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	6013      	str	r3, [r2, #0]
	greenCNT = TIM2->CNT;
 80009ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	4b5e      	ldr	r3, [pc, #376]	; (8000b30 <sendRemaningTime+0x194>)
 80009b8:	801a      	strh	r2, [r3, #0]
	yellowCNT = TIM3->CNT;
 80009ba:	4b5e      	ldr	r3, [pc, #376]	; (8000b34 <sendRemaningTime+0x198>)
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4b5d      	ldr	r3, [pc, #372]	; (8000b38 <sendRemaningTime+0x19c>)
 80009c2:	801a      	strh	r2, [r3, #0]
	warnCNT = TIM4->CNT;
 80009c4:	4b5d      	ldr	r3, [pc, #372]	; (8000b3c <sendRemaningTime+0x1a0>)
 80009c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b5d      	ldr	r3, [pc, #372]	; (8000b40 <sendRemaningTime+0x1a4>)
 80009cc:	801a      	strh	r2, [r3, #0]
	time /= 1000;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	4a5c      	ldr	r2, [pc, #368]	; (8000b44 <sendRemaningTime+0x1a8>)
 80009d2:	fba2 2303 	umull	r2, r3, r2, r3
 80009d6:	099b      	lsrs	r3, r3, #6
 80009d8:	603b      	str	r3, [r7, #0]
	count2 = time;
 80009da:	4a5b      	ldr	r2, [pc, #364]	; (8000b48 <sendRemaningTime+0x1ac>)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	6013      	str	r3, [r2, #0]

	switch(color)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	f200 809d 	bhi.w	8000b24 <sendRemaningTime+0x188>
 80009ea:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <sendRemaningTime+0x54>)
 80009ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f0:	08000a01 	.word	0x08000a01
 80009f4:	08000a31 	.word	0x08000a31
 80009f8:	08000a4f 	.word	0x08000a4f
 80009fc:	08000b0f 	.word	0x08000b0f
	{
	case 1: // green
		HD44780_Clear();
 8000a00:	f7ff fc28 	bl	8000254 <HD44780_Clear>
		HD44780_SetCursor(14,0);
 8000a04:	2100      	movs	r1, #0
 8000a06:	200e      	movs	r0, #14
 8000a08:	f7ff fc3a 	bl	8000280 <HD44780_SetCursor>
		sprintf(lcdCNT,"%02ld", time+greenEnd*10);
 8000a0c:	4b4f      	ldr	r3, [pc, #316]	; (8000b4c <sendRemaningTime+0x1b0>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	461a      	mov	r2, r3
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	461a      	mov	r2, r3
 8000a20:	494b      	ldr	r1, [pc, #300]	; (8000b50 <sendRemaningTime+0x1b4>)
 8000a22:	484c      	ldr	r0, [pc, #304]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000a24:	f002 fbf2 	bl	800320c <siprintf>
		HD44780_PrintStr(lcdCNT);
 8000a28:	484a      	ldr	r0, [pc, #296]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000a2a:	f7ff fc9a 	bl	8000362 <HD44780_PrintStr>
		break;
 8000a2e:	e079      	b.n	8000b24 <sendRemaningTime+0x188>
	case 2: // yellow
		HD44780_Clear();
 8000a30:	f7ff fc10 	bl	8000254 <HD44780_Clear>
		HD44780_SetCursor(7,0);
 8000a34:	2100      	movs	r1, #0
 8000a36:	2007      	movs	r0, #7
 8000a38:	f7ff fc22 	bl	8000280 <HD44780_SetCursor>
		sprintf(lcdCNT,"%02ld", time);
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	4944      	ldr	r1, [pc, #272]	; (8000b50 <sendRemaningTime+0x1b4>)
 8000a40:	4844      	ldr	r0, [pc, #272]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000a42:	f002 fbe3 	bl	800320c <siprintf>
		HD44780_PrintStr(lcdCNT);
 8000a46:	4843      	ldr	r0, [pc, #268]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000a48:	f7ff fc8b 	bl	8000362 <HD44780_PrintStr>
//		HD44780_PrintStr("Hello World");
		break;
 8000a4c:	e06a      	b.n	8000b24 <sendRemaningTime+0x188>
	case 3: // warn
		HD44780_Clear();
 8000a4e:	f7ff fc01 	bl	8000254 <HD44780_Clear>
		HD44780_SetCursor(7,0);
 8000a52:	2100      	movs	r1, #0
 8000a54:	2007      	movs	r0, #7
 8000a56:	f7ff fc13 	bl	8000280 <HD44780_SetCursor>
		if(warnEnds == 1) {
 8000a5a:	4b3f      	ldr	r3, [pc, #252]	; (8000b58 <sendRemaningTime+0x1bc>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d10d      	bne.n	8000a7e <sendRemaningTime+0xe2>
			sprintf(lcdCNT,"%02ld", warnTime);
 8000a62:	4b3e      	ldr	r3, [pc, #248]	; (8000b5c <sendRemaningTime+0x1c0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	4939      	ldr	r1, [pc, #228]	; (8000b50 <sendRemaningTime+0x1b4>)
 8000a6a:	483a      	ldr	r0, [pc, #232]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000a6c:	f002 fbce 	bl	800320c <siprintf>
			HD44780_PrintStr(lcdCNT);
 8000a70:	4838      	ldr	r0, [pc, #224]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000a72:	f7ff fc76 	bl	8000362 <HD44780_PrintStr>
			warnTime = 1;
 8000a76:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <sendRemaningTime+0x1c0>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
			break;
 8000a7c:	e052      	b.n	8000b24 <sendRemaningTime+0x188>
		} else if (warnEnds == 2) {
 8000a7e:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <sendRemaningTime+0x1bc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d10d      	bne.n	8000aa2 <sendRemaningTime+0x106>
			sprintf(lcdCNT,"%02ld", warnTime);
 8000a86:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <sendRemaningTime+0x1c0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4930      	ldr	r1, [pc, #192]	; (8000b50 <sendRemaningTime+0x1b4>)
 8000a8e:	4831      	ldr	r0, [pc, #196]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000a90:	f002 fbbc 	bl	800320c <siprintf>
			HD44780_PrintStr(lcdCNT);
 8000a94:	482f      	ldr	r0, [pc, #188]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000a96:	f7ff fc64 	bl	8000362 <HD44780_PrintStr>
			warnTime = 2;
 8000a9a:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <sendRemaningTime+0x1c0>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	601a      	str	r2, [r3, #0]
			break;
 8000aa0:	e040      	b.n	8000b24 <sendRemaningTime+0x188>
		} else if (warnEnds == 3) {
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <sendRemaningTime+0x1bc>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d10d      	bne.n	8000ac6 <sendRemaningTime+0x12a>
			sprintf(lcdCNT,"%02ld", warnTime);
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <sendRemaningTime+0x1c0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4927      	ldr	r1, [pc, #156]	; (8000b50 <sendRemaningTime+0x1b4>)
 8000ab2:	4828      	ldr	r0, [pc, #160]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000ab4:	f002 fbaa 	bl	800320c <siprintf>
			HD44780_PrintStr(lcdCNT);
 8000ab8:	4826      	ldr	r0, [pc, #152]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000aba:	f7ff fc52 	bl	8000362 <HD44780_PrintStr>
			warnTime = 3;
 8000abe:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <sendRemaningTime+0x1c0>)
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	601a      	str	r2, [r3, #0]
			break;
 8000ac4:	e02e      	b.n	8000b24 <sendRemaningTime+0x188>
		} else if (warnEnds == 4) {
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <sendRemaningTime+0x1bc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d10d      	bne.n	8000aea <sendRemaningTime+0x14e>
			sprintf(lcdCNT,"%02ld", warnTime);
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <sendRemaningTime+0x1c0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	491e      	ldr	r1, [pc, #120]	; (8000b50 <sendRemaningTime+0x1b4>)
 8000ad6:	481f      	ldr	r0, [pc, #124]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000ad8:	f002 fb98 	bl	800320c <siprintf>
			HD44780_PrintStr(lcdCNT);
 8000adc:	481d      	ldr	r0, [pc, #116]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000ade:	f7ff fc40 	bl	8000362 <HD44780_PrintStr>
			warnTime = 4;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <sendRemaningTime+0x1c0>)
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	601a      	str	r2, [r3, #0]
			break;
 8000ae8:	e01c      	b.n	8000b24 <sendRemaningTime+0x188>
		} else if (warnEnds == 5) {
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <sendRemaningTime+0x1bc>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b05      	cmp	r3, #5
 8000af0:	d117      	bne.n	8000b22 <sendRemaningTime+0x186>
			sprintf(lcdCNT,"%02ld", warnTime);
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <sendRemaningTime+0x1c0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	4915      	ldr	r1, [pc, #84]	; (8000b50 <sendRemaningTime+0x1b4>)
 8000afa:	4816      	ldr	r0, [pc, #88]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000afc:	f002 fb86 	bl	800320c <siprintf>
			HD44780_PrintStr(lcdCNT);
 8000b00:	4814      	ldr	r0, [pc, #80]	; (8000b54 <sendRemaningTime+0x1b8>)
 8000b02:	f7ff fc2e 	bl	8000362 <HD44780_PrintStr>
			warnTime = 5;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <sendRemaningTime+0x1c0>)
 8000b08:	2205      	movs	r2, #5
 8000b0a:	601a      	str	r2, [r3, #0]
			break;
 8000b0c:	e00a      	b.n	8000b24 <sendRemaningTime+0x188>
		}
		break;
	case 4: // allRed
		HD44780_Clear();
 8000b0e:	f7ff fba1 	bl	8000254 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8000b12:	2100      	movs	r1, #0
 8000b14:	2000      	movs	r0, #0
 8000b16:	f7ff fbb3 	bl	8000280 <HD44780_SetCursor>
		HD44780_PrintStr("00");
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <sendRemaningTime+0x1c4>)
 8000b1c:	f7ff fc21 	bl	8000362 <HD44780_PrintStr>
	}
}
 8000b20:	e000      	b.n	8000b24 <sendRemaningTime+0x188>
		break;
 8000b22:	bf00      	nop
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200001e0 	.word	0x200001e0
 8000b30:	200001e8 	.word	0x200001e8
 8000b34:	40000400 	.word	0x40000400
 8000b38:	200001ea 	.word	0x200001ea
 8000b3c:	40000800 	.word	0x40000800
 8000b40:	200001ec 	.word	0x200001ec
 8000b44:	10624dd3 	.word	0x10624dd3
 8000b48:	200001e4 	.word	0x200001e4
 8000b4c:	200001c8 	.word	0x200001c8
 8000b50:	08003b98 	.word	0x08003b98
 8000b54:	200001f4 	.word	0x200001f4
 8000b58:	200001dc 	.word	0x200001dc
 8000b5c:	200001f0 	.word	0x200001f0
 8000b60:	08003ba0 	.word	0x08003ba0

08000b64 <TimerDelayMs>:

static void TimerDelayMs(uint32_t time) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	bool jumpToMain = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
	switch (time)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a6a      	ldr	r2, [pc, #424]	; (8000d1c <TimerDelayMs+0x1b8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d06e      	beq.n	8000c56 <TimerDelayMs+0xf2>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a68      	ldr	r2, [pc, #416]	; (8000d1c <TimerDelayMs+0x1b8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	f200 80c6 	bhi.w	8000d0e <TimerDelayMs+0x1aa>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d010      	beq.n	8000bae <TimerDelayMs+0x4a>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b92:	4293      	cmp	r3, r2
 8000b94:	f200 80bb 	bhi.w	8000d0e <TimerDelayMs+0x1aa>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b9e:	f000 8096 	beq.w	8000cce <TimerDelayMs+0x16a>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d071      	beq.n	8000c90 <TimerDelayMs+0x12c>
				break;
			}
		}
		break;
	default:
		break;
 8000bac:	e0af      	b.n	8000d0e <TimerDelayMs+0x1aa>
		if(greenEnd == 0) {
 8000bae:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <TimerDelayMs+0x1bc>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d124      	bne.n	8000c00 <TimerDelayMs+0x9c>
			HAL_TIM_Base_Start_IT(&htim2);
 8000bb6:	485b      	ldr	r0, [pc, #364]	; (8000d24 <TimerDelayMs+0x1c0>)
 8000bb8:	f001 ff4c 	bl	8002a54 <HAL_TIM_Base_Start_IT>
			if(greenEnds == 0) {
 8000bbc:	4b5a      	ldr	r3, [pc, #360]	; (8000d28 <TimerDelayMs+0x1c4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d107      	bne.n	8000bd4 <TimerDelayMs+0x70>
				greenEnds ++;
 8000bc4:	4b58      	ldr	r3, [pc, #352]	; (8000d28 <TimerDelayMs+0x1c4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a57      	ldr	r2, [pc, #348]	; (8000d28 <TimerDelayMs+0x1c4>)
 8000bcc:	6013      	str	r3, [r2, #0]
				greenEnd = 0;
 8000bce:	4b54      	ldr	r3, [pc, #336]	; (8000d20 <TimerDelayMs+0x1bc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
				sendRemaningTime(GREEN, TIM2->CNT);
 8000bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff fedd 	bl	800099c <sendRemaningTime>
				if(greenEnd == 1) {
 8000be2:	4b4f      	ldr	r3, [pc, #316]	; (8000d20 <TimerDelayMs+0x1bc>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d1f4      	bne.n	8000bd4 <TimerDelayMs+0x70>
					greenCNT = TIM2->CNT;
 8000bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <TimerDelayMs+0x1c8>)
 8000bf4:	801a      	strh	r2, [r3, #0]
					jumpToMain = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	75fb      	strb	r3, [r7, #23]
					HAL_TIM_Base_Stop_IT(&htim2);
 8000bfa:	484a      	ldr	r0, [pc, #296]	; (8000d24 <TimerDelayMs+0x1c0>)
 8000bfc:	f001 ff7c 	bl	8002af8 <HAL_TIM_Base_Stop_IT>
		if((greenEnd >= 1 ) && (jumpToMain == 0)) {
 8000c00:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <TimerDelayMs+0x1bc>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 8084 	beq.w	8000d12 <TimerDelayMs+0x1ae>
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	f083 0301 	eor.w	r3, r3, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d07d      	beq.n	8000d12 <TimerDelayMs+0x1ae>
			HAL_TIM_Base_Start_IT(&htim2);
 8000c16:	4843      	ldr	r0, [pc, #268]	; (8000d24 <TimerDelayMs+0x1c0>)
 8000c18:	f001 ff1c 	bl	8002a54 <HAL_TIM_Base_Start_IT>
			uint32_t nextGreenEnd = greenEnd + 1;
 8000c1c:	4b40      	ldr	r3, [pc, #256]	; (8000d20 <TimerDelayMs+0x1bc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
			uint8_t inputCompare = inputValue;
 8000c24:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <TimerDelayMs+0x1cc>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	73fb      	strb	r3, [r7, #15]
				sendRemaningTime(GREEN, TIM2->CNT);
 8000c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff feb2 	bl	800099c <sendRemaningTime>
				if((greenEnd == nextGreenEnd) || (inputCompare != inputValue)) {
 8000c38:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <TimerDelayMs+0x1bc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d004      	beq.n	8000c4c <TimerDelayMs+0xe8>
 8000c42:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <TimerDelayMs+0x1cc>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d0ee      	beq.n	8000c2a <TimerDelayMs+0xc6>
					HAL_TIM_Base_Stop_IT(&htim2);
 8000c4c:	4835      	ldr	r0, [pc, #212]	; (8000d24 <TimerDelayMs+0x1c0>)
 8000c4e:	f001 ff53 	bl	8002af8 <HAL_TIM_Base_Stop_IT>
					break;
 8000c52:	bf00      	nop
		break;
 8000c54:	e05d      	b.n	8000d12 <TimerDelayMs+0x1ae>
		greenEnds = 0;
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <TimerDelayMs+0x1c4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
		yellowEnds = 0;
 8000c5c:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <TimerDelayMs+0x1d0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
		warnEnds = 0;
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <TimerDelayMs+0x1d4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
		greenEnd = 0;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <TimerDelayMs+0x1bc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
		yellowEnd = 0;
 8000c6e:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <TimerDelayMs+0x1d8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
		warnEnd = 0;
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <TimerDelayMs+0x1dc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
			sendRemaningTime(ALLRED, 180403);
 8000c7a:	4928      	ldr	r1, [pc, #160]	; (8000d1c <TimerDelayMs+0x1b8>)
 8000c7c:	2004      	movs	r0, #4
 8000c7e:	f7ff fe8d 	bl	800099c <sendRemaningTime>
			if(checkGPIO == 1) {
 8000c82:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <TimerDelayMs+0x1e0>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d100      	bne.n	8000c8c <TimerDelayMs+0x128>
			sendRemaningTime(ALLRED, 180403);
 8000c8a:	e7f6      	b.n	8000c7a <TimerDelayMs+0x116>
				break;
 8000c8c:	bf00      	nop
	break;
 8000c8e:	e041      	b.n	8000d14 <TimerDelayMs+0x1b0>
		yellowEnd = 0;
 8000c90:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <TimerDelayMs+0x1d8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
		greenEnd = 0;
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <TimerDelayMs+0x1bc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
		greenEnds = 0;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <TimerDelayMs+0x1c4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
		warnEnd = 0;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <TimerDelayMs+0x1dc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8000ca8:	4827      	ldr	r0, [pc, #156]	; (8000d48 <TimerDelayMs+0x1e4>)
 8000caa:	f001 fed3 	bl	8002a54 <HAL_TIM_Base_Start_IT>
		yellowEnd = 0;
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <TimerDelayMs+0x1d8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
			sendRemaningTime(YELLOW, TIM3->CNT);
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <TimerDelayMs+0x1e8>)
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f7ff fe6e 	bl	800099c <sendRemaningTime>
			if(yellowEnd == 1) {
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <TimerDelayMs+0x1d8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d1f5      	bne.n	8000cb4 <TimerDelayMs+0x150>
				HAL_TIM_Base_Stop_IT(&htim3);
 8000cc8:	481f      	ldr	r0, [pc, #124]	; (8000d48 <TimerDelayMs+0x1e4>)
 8000cca:	f001 ff15 	bl	8002af8 <HAL_TIM_Base_Stop_IT>
		warnEnd = 0;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <TimerDelayMs+0x1dc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
		greenEnd = 0;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <TimerDelayMs+0x1bc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
		greenEnds = 0;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <TimerDelayMs+0x1c4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim4);
 8000ce0:	481b      	ldr	r0, [pc, #108]	; (8000d50 <TimerDelayMs+0x1ec>)
 8000ce2:	f001 feb7 	bl	8002a54 <HAL_TIM_Base_Start_IT>
			sendRemaningTime(WARN, TIM4->CNT);
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <TimerDelayMs+0x1f0>)
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	2003      	movs	r0, #3
 8000cee:	f7ff fe55 	bl	800099c <sendRemaningTime>
			warnCNT = TIM4->CNT;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <TimerDelayMs+0x1f0>)
 8000cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <TimerDelayMs+0x1f4>)
 8000cfa:	801a      	strh	r2, [r3, #0]
			if(warnEnd == 1) {
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <TimerDelayMs+0x1dc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d1f0      	bne.n	8000ce6 <TimerDelayMs+0x182>
				HAL_TIM_Base_Stop_IT(&htim4);
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <TimerDelayMs+0x1ec>)
 8000d06:	f001 fef7 	bl	8002af8 <HAL_TIM_Base_Stop_IT>
				break;
 8000d0a:	bf00      	nop
		break;
 8000d0c:	e002      	b.n	8000d14 <TimerDelayMs+0x1b0>
		break;
 8000d0e:	bf00      	nop
 8000d10:	e000      	b.n	8000d14 <TimerDelayMs+0x1b0>
		break;
 8000d12:	bf00      	nop
	}
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	0002c0b3 	.word	0x0002c0b3
 8000d20:	200001c8 	.word	0x200001c8
 8000d24:	200000e8 	.word	0x200000e8
 8000d28:	200001d4 	.word	0x200001d4
 8000d2c:	200001e8 	.word	0x200001e8
 8000d30:	200001c6 	.word	0x200001c6
 8000d34:	200001d8 	.word	0x200001d8
 8000d38:	200001dc 	.word	0x200001dc
 8000d3c:	200001cc 	.word	0x200001cc
 8000d40:	200001d0 	.word	0x200001d0
 8000d44:	200001c5 	.word	0x200001c5
 8000d48:	20000130 	.word	0x20000130
 8000d4c:	40000400 	.word	0x40000400
 8000d50:	20000178 	.word	0x20000178
 8000d54:	40000800 	.word	0x40000800
 8000d58:	200001ec 	.word	0x200001ec

08000d5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d6c:	d104      	bne.n	8000d78 <HAL_TIM_PeriodElapsedCallback+0x1c>
        greenEnd += 1;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d76:	6013      	str	r3, [r2, #0]
    }
    if (htim->Instance == TIM3) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d104      	bne.n	8000d8c <HAL_TIM_PeriodElapsedCallback+0x30>
    	yellowEnd += 1;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d8a:	6013      	str	r3, [r2, #0]
    }
    if (htim->Instance == TIM4) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d109      	bne.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x4e>
    	warnEnd += 1;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d9e:	6013      	str	r3, [r2, #0]
    	warnEnds += 1;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000da8:	6013      	str	r3, [r2, #0]
    }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	200001c8 	.word	0x200001c8
 8000db8:	40000400 	.word	0x40000400
 8000dbc:	200001cc 	.word	0x200001cc
 8000dc0:	40000800 	.word	0x40000800
 8000dc4:	200001d0 	.word	0x200001d0
 8000dc8:	200001dc 	.word	0x200001dc

08000dcc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_5) { // Walk button
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	2b20      	cmp	r3, #32
 8000dda:	d10d      	bne.n	8000df8 <HAL_GPIO_EXTI_Callback+0x2c>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET) {
 8000ddc:	2120      	movs	r1, #32
 8000dde:	482b      	ldr	r0, [pc, #172]	; (8000e8c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000de0:	f000 fd06 	bl	80017f0 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d103      	bne.n	8000df2 <HAL_GPIO_EXTI_Callback+0x26>
            // Rising edge (button released)
            checkWalk = 1;
 8000dea:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	e002      	b.n	8000df8 <HAL_GPIO_EXTI_Callback+0x2c>
        } else {
            // Falling edge (button pressed)
            checkWalk = 0;
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
        }
    }
    if (GPIO_Pin == GPIO_PIN_4) { // Walk button
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	2b10      	cmp	r3, #16
 8000dfc:	d10d      	bne.n	8000e1a <HAL_GPIO_EXTI_Callback+0x4e>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_SET) {
 8000dfe:	2110      	movs	r1, #16
 8000e00:	4822      	ldr	r0, [pc, #136]	; (8000e8c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000e02:	f000 fcf5 	bl	80017f0 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d103      	bne.n	8000e14 <HAL_GPIO_EXTI_Callback+0x48>
            // Rising edge (button released)
            checkSouth = 1;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_EXTI_Callback+0x4e>
        } else {
            // Falling edge (button pressed)
            checkSouth = 0;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
        }
    }
    if (GPIO_Pin == GPIO_PIN_3) { // Walk button
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d10d      	bne.n	8000e3c <HAL_GPIO_EXTI_Callback+0x70>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_SET) {
 8000e20:	2108      	movs	r1, #8
 8000e22:	481a      	ldr	r0, [pc, #104]	; (8000e8c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000e24:	f000 fce4 	bl	80017f0 <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d103      	bne.n	8000e36 <HAL_GPIO_EXTI_Callback+0x6a>
            // Rising edge (button released)
            checkWest = 1;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_EXTI_Callback+0x70>
        } else {
            // Falling edge (button pressed)
            checkWest = 0;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
        }
    }
    inputValue = (checkWalk << 2) | (checkSouth << 1) | (checkWest << 0);
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	b25a      	sxtb	r2, r3
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b25a      	sxtb	r2, r3
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000e5e:	701a      	strb	r2, [r3, #0]
    checkGPIO = checkWalk | checkSouth |  checkWest;
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf14      	ite	ne
 8000e78:	2301      	movne	r3, #1
 8000e7a:	2300      	moveq	r3, #0
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000e80:	701a      	strb	r2, [r3, #0]
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40010c00 	.word	0x40010c00
 8000e90:	200001c2 	.word	0x200001c2
 8000e94:	200001c3 	.word	0x200001c3
 8000e98:	200001c4 	.word	0x200001c4
 8000e9c:	200001c6 	.word	0x200001c6
 8000ea0:	200001c5 	.word	0x200001c5

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	e7fe      	b.n	8000eac <Error_Handler+0x8>
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_MspInit+0x5c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_MspInit+0x5c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_MspInit+0x60>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_MspInit+0x60>)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000

08000f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <HAL_I2C_MspInit+0x70>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d123      	bne.n	8000f7c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_I2C_MspInit+0x74>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <HAL_I2C_MspInit+0x74>)
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_I2C_MspInit+0x74>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f4c:	23c0      	movs	r3, #192	; 0xc0
 8000f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	2312      	movs	r3, #18
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <HAL_I2C_MspInit+0x78>)
 8000f60:	f000 fac2 	bl	80014e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_I2C_MspInit+0x74>)
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_I2C_MspInit+0x74>)
 8000f6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f6e:	61d3      	str	r3, [r2, #28]
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_I2C_MspInit+0x74>)
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40005400 	.word	0x40005400
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010c00 	.word	0x40010c00

08000f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa0:	d114      	bne.n	8000fcc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_TIM_Base_MspInit+0xac>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a25      	ldr	r2, [pc, #148]	; (800103c <HAL_TIM_Base_MspInit+0xac>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_TIM_Base_MspInit+0xac>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	201c      	movs	r0, #28
 8000fc0:	f000 fa5b 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fc4:	201c      	movs	r0, #28
 8000fc6:	f000 fa74 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fca:	e032      	b.n	8001032 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <HAL_TIM_Base_MspInit+0xb0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d114      	bne.n	8001000 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_TIM_Base_MspInit+0xac>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <HAL_TIM_Base_MspInit+0xac>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_TIM_Base_MspInit+0xac>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	201d      	movs	r0, #29
 8000ff4:	f000 fa41 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ff8:	201d      	movs	r0, #29
 8000ffa:	f000 fa5a 	bl	80014b2 <HAL_NVIC_EnableIRQ>
}
 8000ffe:	e018      	b.n	8001032 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_TIM_Base_MspInit+0xb4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d113      	bne.n	8001032 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HAL_TIM_Base_MspInit+0xac>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <HAL_TIM_Base_MspInit+0xac>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_TIM_Base_MspInit+0xac>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	201e      	movs	r0, #30
 8001028:	f000 fa27 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800102c:	201e      	movs	r0, #30
 800102e:	f000 fa40 	bl	80014b2 <HAL_NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	40000400 	.word	0x40000400
 8001044:	40000800 	.word	0x40000800

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104c:	e7fe      	b.n	800104c <NMI_Handler+0x4>

0800104e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108e:	f000 f8dd 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}

08001096 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800109a:	2008      	movs	r0, #8
 800109c:	f000 fbd8 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80010a8:	2010      	movs	r0, #16
 80010aa:	f000 fbd1 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80010b6:	2020      	movs	r0, #32
 80010b8:	f000 fbca 	bl	8001850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <TIM2_IRQHandler+0x10>)
 80010c6:	f001 fd45 	bl	8002b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000e8 	.word	0x200000e8

080010d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <TIM3_IRQHandler+0x10>)
 80010da:	f001 fd3b 	bl	8002b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000130 	.word	0x20000130

080010e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <TIM4_IRQHandler+0x10>)
 80010ee:	f001 fd31 	bl	8002b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000178 	.word	0x20000178

080010fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <_sbrk+0x5c>)
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <_sbrk+0x60>)
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <_sbrk+0x64>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <_sbrk+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d207      	bcs.n	800113c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800112c:	f002 f896 	bl	800325c <__errno>
 8001130:	4603      	mov	r3, r0
 8001132:	220c      	movs	r2, #12
 8001134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e009      	b.n	8001150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <_sbrk+0x64>)
 800114c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20005000 	.word	0x20005000
 800115c:	00000400 	.word	0x00000400
 8001160:	20000228 	.word	0x20000228
 8001164:	20000378 	.word	0x20000378

08001168 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001174:	f7ff fff8 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800117a:	490c      	ldr	r1, [pc, #48]	; (80011ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001190:	4c09      	ldr	r4, [pc, #36]	; (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f002 f863 	bl	8003268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a2:	f7ff f9c9 	bl	8000538 <main>
  bx lr
 80011a6:	4770      	bx	lr
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011b0:	08003dc4 	.word	0x08003dc4
  ldr r2, =_sbss
 80011b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011b8:	20000378 	.word	0x20000378

080011bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_2_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_Init+0x28>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_Init+0x28>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f947 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	200f      	movs	r0, #15
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fe68 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f95f 	bl	80014ce <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f927 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000014 	.word	0x20000014
 8001244:	2000001c 	.word	0x2000001c
 8001248:	20000018 	.word	0x20000018

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x1c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <HAL_IncTick+0x20>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	2000001c 	.word	0x2000001c
 800126c:	2000022c 	.word	0x2000022c

08001270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <HAL_GetTick+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	2000022c 	.word	0x2000022c

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff fff0 	bl	8001270 <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffe0 	bl	8001270 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000001c 	.word	0x2000001c

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4906      	ldr	r1, [pc, #24]	; (8001364 <__NVIC_EnableIRQ+0x34>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff90 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff2d 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff42 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff90 	bl	80013bc <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5f 	bl	8001368 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff35 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa2 	bl	8001420 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b08b      	sub	sp, #44	; 0x2c
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fa:	e169      	b.n	80017d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014fc:	2201      	movs	r2, #1
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 8158 	bne.w	80017ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4a9a      	ldr	r2, [pc, #616]	; (8001788 <HAL_GPIO_Init+0x2a0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d05e      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001524:	4a98      	ldr	r2, [pc, #608]	; (8001788 <HAL_GPIO_Init+0x2a0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d875      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800152a:	4a98      	ldr	r2, [pc, #608]	; (800178c <HAL_GPIO_Init+0x2a4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d058      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001530:	4a96      	ldr	r2, [pc, #600]	; (800178c <HAL_GPIO_Init+0x2a4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d86f      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001536:	4a96      	ldr	r2, [pc, #600]	; (8001790 <HAL_GPIO_Init+0x2a8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d052      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 800153c:	4a94      	ldr	r2, [pc, #592]	; (8001790 <HAL_GPIO_Init+0x2a8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d869      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001542:	4a94      	ldr	r2, [pc, #592]	; (8001794 <HAL_GPIO_Init+0x2ac>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d04c      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001548:	4a92      	ldr	r2, [pc, #584]	; (8001794 <HAL_GPIO_Init+0x2ac>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d863      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800154e:	4a92      	ldr	r2, [pc, #584]	; (8001798 <HAL_GPIO_Init+0x2b0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d046      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001554:	4a90      	ldr	r2, [pc, #576]	; (8001798 <HAL_GPIO_Init+0x2b0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d85d      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800155a:	2b12      	cmp	r3, #18
 800155c:	d82a      	bhi.n	80015b4 <HAL_GPIO_Init+0xcc>
 800155e:	2b12      	cmp	r3, #18
 8001560:	d859      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001562:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <HAL_GPIO_Init+0x80>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	080015e3 	.word	0x080015e3
 800156c:	080015bd 	.word	0x080015bd
 8001570:	080015cf 	.word	0x080015cf
 8001574:	08001611 	.word	0x08001611
 8001578:	08001617 	.word	0x08001617
 800157c:	08001617 	.word	0x08001617
 8001580:	08001617 	.word	0x08001617
 8001584:	08001617 	.word	0x08001617
 8001588:	08001617 	.word	0x08001617
 800158c:	08001617 	.word	0x08001617
 8001590:	08001617 	.word	0x08001617
 8001594:	08001617 	.word	0x08001617
 8001598:	08001617 	.word	0x08001617
 800159c:	08001617 	.word	0x08001617
 80015a0:	08001617 	.word	0x08001617
 80015a4:	08001617 	.word	0x08001617
 80015a8:	08001617 	.word	0x08001617
 80015ac:	080015c5 	.word	0x080015c5
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	4a79      	ldr	r2, [pc, #484]	; (800179c <HAL_GPIO_Init+0x2b4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ba:	e02c      	b.n	8001616 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e029      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	3304      	adds	r3, #4
 80015ca:	623b      	str	r3, [r7, #32]
          break;
 80015cc:	e024      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	3308      	adds	r3, #8
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e01f      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	330c      	adds	r3, #12
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e01a      	b.n	8001618 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ea:	2304      	movs	r3, #4
 80015ec:	623b      	str	r3, [r7, #32]
          break;
 80015ee:	e013      	b.n	8001618 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d105      	bne.n	8001604 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f8:	2308      	movs	r3, #8
 80015fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	611a      	str	r2, [r3, #16]
          break;
 8001602:	e009      	b.n	8001618 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2308      	movs	r3, #8
 8001606:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	615a      	str	r2, [r3, #20]
          break;
 800160e:	e003      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x130>
          break;
 8001616:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2bff      	cmp	r3, #255	; 0xff
 800161c:	d801      	bhi.n	8001622 <HAL_GPIO_Init+0x13a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	e001      	b.n	8001626 <HAL_GPIO_Init+0x13e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3304      	adds	r3, #4
 8001626:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2bff      	cmp	r3, #255	; 0xff
 800162c:	d802      	bhi.n	8001634 <HAL_GPIO_Init+0x14c>
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	e002      	b.n	800163a <HAL_GPIO_Init+0x152>
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	3b08      	subs	r3, #8
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	210f      	movs	r1, #15
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	6a39      	ldr	r1, [r7, #32]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 80b1 	beq.w	80017ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001668:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a4c      	ldr	r2, [pc, #304]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <HAL_GPIO_Init+0x2b8>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001680:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <HAL_GPIO_Init+0x2bc>)
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a40      	ldr	r2, [pc, #256]	; (80017a8 <HAL_GPIO_Init+0x2c0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d013      	beq.n	80016d4 <HAL_GPIO_Init+0x1ec>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a3f      	ldr	r2, [pc, #252]	; (80017ac <HAL_GPIO_Init+0x2c4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d00d      	beq.n	80016d0 <HAL_GPIO_Init+0x1e8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a3e      	ldr	r2, [pc, #248]	; (80017b0 <HAL_GPIO_Init+0x2c8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d007      	beq.n	80016cc <HAL_GPIO_Init+0x1e4>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a3d      	ldr	r2, [pc, #244]	; (80017b4 <HAL_GPIO_Init+0x2cc>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d101      	bne.n	80016c8 <HAL_GPIO_Init+0x1e0>
 80016c4:	2303      	movs	r3, #3
 80016c6:	e006      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016c8:	2304      	movs	r3, #4
 80016ca:	e004      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016d4:	2300      	movs	r3, #0
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4093      	lsls	r3, r2
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016e6:	492f      	ldr	r1, [pc, #188]	; (80017a4 <HAL_GPIO_Init+0x2bc>)
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001700:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	492c      	ldr	r1, [pc, #176]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	608b      	str	r3, [r1, #8]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4928      	ldr	r1, [pc, #160]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001718:	4013      	ands	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4922      	ldr	r1, [pc, #136]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	491e      	ldr	r1, [pc, #120]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001740:	4013      	ands	r3, r2
 8001742:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4918      	ldr	r1, [pc, #96]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	4914      	ldr	r1, [pc, #80]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001768:	4013      	ands	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d021      	beq.n	80017bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	490e      	ldr	r1, [pc, #56]	; (80017b8 <HAL_GPIO_Init+0x2d0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e021      	b.n	80017ca <HAL_GPIO_Init+0x2e2>
 8001786:	bf00      	nop
 8001788:	10320000 	.word	0x10320000
 800178c:	10310000 	.word	0x10310000
 8001790:	10220000 	.word	0x10220000
 8001794:	10210000 	.word	0x10210000
 8001798:	10120000 	.word	0x10120000
 800179c:	10110000 	.word	0x10110000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40011400 	.word	0x40011400
 80017b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_GPIO_Init+0x304>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	4909      	ldr	r1, [pc, #36]	; (80017ec <HAL_GPIO_Init+0x304>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	3301      	adds	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f47f ae8e 	bne.w	80014fc <HAL_GPIO_Init+0x14>
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	372c      	adds	r7, #44	; 0x2c
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e001      	b.n	8001812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	807b      	strh	r3, [r7, #2]
 800182a:	4613      	mov	r3, r2
 800182c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800182e:	787b      	ldrb	r3, [r7, #1]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001834:	887a      	ldrh	r2, [r7, #2]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800183a:	e003      	b.n	8001844 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	041a      	lsls	r2, r3, #16
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	611a      	str	r2, [r3, #16]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
	...

08001850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff faac 	bl	8000dcc <HAL_GPIO_EXTI_Callback>
  }
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40010400 	.word	0x40010400

08001880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e12b      	b.n	8001aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fb34 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2224      	movs	r2, #36	; 0x24
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e4:	f001 f834 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 80018e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4a81      	ldr	r2, [pc, #516]	; (8001af4 <HAL_I2C_Init+0x274>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d807      	bhi.n	8001904 <HAL_I2C_Init+0x84>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a80      	ldr	r2, [pc, #512]	; (8001af8 <HAL_I2C_Init+0x278>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	bf94      	ite	ls
 80018fc:	2301      	movls	r3, #1
 80018fe:	2300      	movhi	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	e006      	b.n	8001912 <HAL_I2C_Init+0x92>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a7d      	ldr	r2, [pc, #500]	; (8001afc <HAL_I2C_Init+0x27c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	bf94      	ite	ls
 800190c:	2301      	movls	r3, #1
 800190e:	2300      	movhi	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0e7      	b.n	8001aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4a78      	ldr	r2, [pc, #480]	; (8001b00 <HAL_I2C_Init+0x280>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0c9b      	lsrs	r3, r3, #18
 8001924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a6a      	ldr	r2, [pc, #424]	; (8001af4 <HAL_I2C_Init+0x274>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d802      	bhi.n	8001954 <HAL_I2C_Init+0xd4>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3301      	adds	r3, #1
 8001952:	e009      	b.n	8001968 <HAL_I2C_Init+0xe8>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	4a69      	ldr	r2, [pc, #420]	; (8001b04 <HAL_I2C_Init+0x284>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	3301      	adds	r3, #1
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	430b      	orrs	r3, r1
 800196e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800197a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	495c      	ldr	r1, [pc, #368]	; (8001af4 <HAL_I2C_Init+0x274>)
 8001984:	428b      	cmp	r3, r1
 8001986:	d819      	bhi.n	80019bc <HAL_I2C_Init+0x13c>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1e59      	subs	r1, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fbb1 f3f3 	udiv	r3, r1, r3
 8001996:	1c59      	adds	r1, r3, #1
 8001998:	f640 73fc 	movw	r3, #4092	; 0xffc
 800199c:	400b      	ands	r3, r1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00a      	beq.n	80019b8 <HAL_I2C_Init+0x138>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1e59      	subs	r1, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b6:	e051      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 80019b8:	2304      	movs	r3, #4
 80019ba:	e04f      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d111      	bne.n	80019e8 <HAL_I2C_Init+0x168>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1e58      	subs	r0, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	440b      	add	r3, r1
 80019d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	e012      	b.n	8001a0e <HAL_I2C_Init+0x18e>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1e58      	subs	r0, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	0099      	lsls	r1, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fe:	3301      	adds	r3, #1
 8001a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Init+0x196>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e022      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10e      	bne.n	8001a3c <HAL_I2C_Init+0x1bc>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1e58      	subs	r0, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6859      	ldr	r1, [r3, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	440b      	add	r3, r1
 8001a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a30:	3301      	adds	r3, #1
 8001a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3a:	e00f      	b.n	8001a5c <HAL_I2C_Init+0x1dc>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e58      	subs	r0, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	0099      	lsls	r1, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	6809      	ldr	r1, [r1, #0]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6911      	ldr	r1, [r2, #16]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68d2      	ldr	r2, [r2, #12]
 8001a96:	4311      	orrs	r1, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	000186a0 	.word	0x000186a0
 8001af8:	001e847f 	.word	0x001e847f
 8001afc:	003d08ff 	.word	0x003d08ff
 8001b00:	431bde83 	.word	0x431bde83
 8001b04:	10624dd3 	.word	0x10624dd3

08001b08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	461a      	mov	r2, r3
 8001b14:	460b      	mov	r3, r1
 8001b16:	817b      	strh	r3, [r7, #10]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff fba8 	bl	8001270 <HAL_GetTick>
 8001b20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	f040 80e0 	bne.w	8001cf0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2319      	movs	r3, #25
 8001b36:	2201      	movs	r2, #1
 8001b38:	4970      	ldr	r1, [pc, #448]	; (8001cfc <HAL_I2C_Master_Transmit+0x1f4>)
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f964 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b46:	2302      	movs	r3, #2
 8001b48:	e0d3      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_I2C_Master_Transmit+0x50>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e0cc      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d007      	beq.n	8001b7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2221      	movs	r2, #33	; 0x21
 8001b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2210      	movs	r2, #16
 8001b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	893a      	ldrh	r2, [r7, #8]
 8001bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a50      	ldr	r2, [pc, #320]	; (8001d00 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bc0:	8979      	ldrh	r1, [r7, #10]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	6a3a      	ldr	r2, [r7, #32]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f89c 	bl	8001d04 <I2C_MasterRequestWrite>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e08d      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bec:	e066      	b.n	8001cbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	6a39      	ldr	r1, [r7, #32]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fa22 	bl	800203c <I2C_WaitOnTXEFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d107      	bne.n	8001c16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e06b      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	781a      	ldrb	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d11b      	bne.n	8001c90 <HAL_I2C_Master_Transmit+0x188>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d017      	beq.n	8001c90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	6a39      	ldr	r1, [r7, #32]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fa19 	bl	80020cc <I2C_WaitOnBTFFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00d      	beq.n	8001cbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d107      	bne.n	8001cb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e01a      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d194      	bne.n	8001bee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e000      	b.n	8001cf2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cf0:	2302      	movs	r3, #2
  }
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	00100002 	.word	0x00100002
 8001d00:	ffff0000 	.word	0xffff0000

08001d04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	460b      	mov	r3, r1
 8001d12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d006      	beq.n	8001d2e <I2C_MasterRequestWrite+0x2a>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d003      	beq.n	8001d2e <I2C_MasterRequestWrite+0x2a>
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d2c:	d108      	bne.n	8001d40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e00b      	b.n	8001d58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	2b12      	cmp	r3, #18
 8001d46:	d107      	bne.n	8001d58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f84f 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d7e:	d103      	bne.n	8001d88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e035      	b.n	8001df8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d94:	d108      	bne.n	8001da8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001da4:	611a      	str	r2, [r3, #16]
 8001da6:	e01b      	b.n	8001de0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001da8:	897b      	ldrh	r3, [r7, #10]
 8001daa:	11db      	asrs	r3, r3, #7
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f003 0306 	and.w	r3, r3, #6
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f063 030f 	orn	r3, r3, #15
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	490e      	ldr	r1, [pc, #56]	; (8001e00 <I2C_MasterRequestWrite+0xfc>)
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f898 	bl	8001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e010      	b.n	8001df8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dd6:	897b      	ldrh	r3, [r7, #10]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4907      	ldr	r1, [pc, #28]	; (8001e04 <I2C_MasterRequestWrite+0x100>)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f888 	bl	8001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	00010008 	.word	0x00010008
 8001e04:	00010002 	.word	0x00010002

08001e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e18:	e048      	b.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d044      	beq.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e22:	f7ff fa25 	bl	8001270 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d302      	bcc.n	8001e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d139      	bne.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	0c1b      	lsrs	r3, r3, #16
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d10d      	bne.n	8001e5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	e00c      	b.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	43da      	mvns	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d116      	bne.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f043 0220 	orr.w	r2, r3, #32
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e023      	b.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10d      	bne.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	e00c      	b.n	8001eec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4013      	ands	r3, r2
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d093      	beq.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f0a:	e071      	b.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1a:	d123      	bne.n	8001f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f043 0204 	orr.w	r2, r3, #4
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e067      	b.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6a:	d041      	beq.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6c:	f7ff f980 	bl	8001270 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d302      	bcc.n	8001f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d136      	bne.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10c      	bne.n	8001fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4013      	ands	r3, r2
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	e00b      	b.n	8001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	43da      	mvns	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d016      	beq.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f043 0220 	orr.w	r2, r3, #32
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e021      	b.n	8002034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10c      	bne.n	8002014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	43da      	mvns	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4013      	ands	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e00b      	b.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4013      	ands	r3, r2
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf14      	ite	ne
 8002026:	2301      	movne	r3, #1
 8002028:	2300      	moveq	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	f47f af6d 	bne.w	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002048:	e034      	b.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f886 	bl	800215c <I2C_IsAcknowledgeFailed>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e034      	b.n	80020c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d028      	beq.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002062:	f7ff f905 	bl	8001270 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11d      	bne.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	2b80      	cmp	r3, #128	; 0x80
 8002084:	d016      	beq.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e007      	b.n	80020c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d1c3      	bne.n	800204a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020d8:	e034      	b.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f83e 	bl	800215c <I2C_IsAcknowledgeFailed>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e034      	b.n	8002154 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d028      	beq.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f2:	f7ff f8bd 	bl	8001270 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d302      	bcc.n	8002108 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d11d      	bne.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b04      	cmp	r3, #4
 8002114:	d016      	beq.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f043 0220 	orr.w	r2, r3, #32
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e007      	b.n	8002154 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b04      	cmp	r3, #4
 8002150:	d1c3      	bne.n	80020da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002172:	d11b      	bne.n	80021ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800217c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f043 0204 	orr.w	r2, r3, #4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e272      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8087 	beq.w	80022e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d00c      	beq.n	80021fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e4:	4b8f      	ldr	r3, [pc, #572]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d112      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
 80021f0:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d10b      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d06c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x12c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d168      	bne.n	80022e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e24c      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x76>
 8002220:	4b80      	ldr	r3, [pc, #512]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a7f      	ldr	r2, [pc, #508]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e02e      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x98>
 8002236:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7a      	ldr	r2, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b78      	ldr	r3, [pc, #480]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a77      	ldr	r2, [pc, #476]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0xbc>
 800225a:	4b72      	ldr	r3, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a71      	ldr	r2, [pc, #452]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002274:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a67      	ldr	r2, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe ffec 	bl	8001270 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe ffe8 	bl	8001270 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e200      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xe4>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe ffd8 	bl	8001270 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe ffd4 	bl	8001270 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1ec      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x10c>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f2:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
 800230a:	4b46      	ldr	r3, [pc, #280]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1c0      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4939      	ldr	r1, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe ff8d 	bl	8001270 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235a:	f7fe ff89 	bl	8001270 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1a1      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4927      	ldr	r1, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe ff6c 	bl	8001270 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe ff68 	bl	8001270 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e180      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d03a      	beq.n	800243c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d019      	beq.n	8002402 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_RCC_OscConfig+0x274>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7fe ff4c 	bl	8001270 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe ff48 	bl	8001270 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e160      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f000 fabc 	bl	8002978 <RCC_Delay>
 8002400:	e01c      	b.n	800243c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_OscConfig+0x274>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7fe ff32 	bl	8001270 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	e00f      	b.n	8002430 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe ff2e 	bl	8001270 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d908      	bls.n	8002430 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e146      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	42420000 	.word	0x42420000
 800242c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e9      	bne.n	8002410 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a6 	beq.w	8002596 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b8b      	ldr	r3, [pc, #556]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a87      	ldr	r2, [pc, #540]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	61d3      	str	r3, [r2, #28]
 8002466:	4b85      	ldr	r3, [pc, #532]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7e      	ldr	r2, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7fe feef 	bl	8001270 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7fe feeb 	bl	8001270 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b64      	cmp	r3, #100	; 0x64
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e103      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b75      	ldr	r3, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x312>
 80024bc:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	e02d      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x334>
 80024d2:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a69      	ldr	r2, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a66      	ldr	r2, [pc, #408]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	e01c      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0x356>
 80024f4:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a60      	ldr	r2, [pc, #384]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	4b5e      	ldr	r3, [pc, #376]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a5d      	ldr	r2, [pc, #372]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 800250e:	4b5b      	ldr	r3, [pc, #364]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a5a      	ldr	r2, [pc, #360]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6213      	str	r3, [r2, #32]
 800251a:	4b58      	ldr	r3, [pc, #352]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a57      	ldr	r2, [pc, #348]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d015      	beq.n	800255a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fe fe9f 	bl	8001270 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fe fe9b 	bl	8001270 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0b1      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	4b4b      	ldr	r3, [pc, #300]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ee      	beq.n	8002536 <HAL_RCC_OscConfig+0x37e>
 8002558:	e014      	b.n	8002584 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255a:	f7fe fe89 	bl	8001270 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe fe85 	bl	8001270 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e09b      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	4b40      	ldr	r3, [pc, #256]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ee      	bne.n	8002562 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b3c      	ldr	r3, [pc, #240]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a3b      	ldr	r2, [pc, #236]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8087 	beq.w	80026ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a0:	4b36      	ldr	r3, [pc, #216]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d061      	beq.n	8002670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d146      	bne.n	8002642 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fe fe59 	bl	8001270 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe fe55 	bl	8001270 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e06d      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d4:	4b29      	ldr	r3, [pc, #164]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d108      	bne.n	80025fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	4921      	ldr	r1, [pc, #132]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a19      	ldr	r1, [r3, #32]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	430b      	orrs	r3, r1
 800260e:	491b      	ldr	r1, [pc, #108]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7fe fe29 	bl	8001270 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe fe25 	bl	8001270 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e03d      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x46a>
 8002640:	e035      	b.n	80026ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fe12 	bl	8001270 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fe0e 	bl	8001270 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e026      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x498>
 800266e:	e01e      	b.n	80026ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e019      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
 8002684:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_OscConfig+0x500>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	429a      	cmp	r2, r3
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000

080026bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0d0      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b67      	ldr	r3, [pc, #412]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4965      	ldr	r1, [pc, #404]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b8      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	494d      	ldr	r1, [pc, #308]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d040      	beq.n	80027dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e073      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06b      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b39      	ldr	r3, [pc, #228]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4936      	ldr	r1, [pc, #216]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7fe fd60 	bl	8001270 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7fe fd5c 	bl	8001270 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e053      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d210      	bcs.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4922      	ldr	r1, [pc, #136]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e032      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4916      	ldr	r1, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284a:	f000 f821 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800284e:	4602      	mov	r2, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	490a      	ldr	r1, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	5ccb      	ldrb	r3, [r1, r3]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1cc>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1d0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fcbe 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	08003d5c 	.word	0x08003d5c
 8002888:	20000014 	.word	0x20000014
 800288c:	20000018 	.word	0x20000018

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x36>
 80028be:	e027      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028c2:	613b      	str	r3, [r7, #16]
      break;
 80028c4:	e027      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0c9b      	lsrs	r3, r3, #18
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0c5b      	lsrs	r3, r3, #17
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028f2:	fb03 f202 	mul.w	r2, r3, r2
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e004      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	613b      	str	r3, [r7, #16]
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002912:	613b      	str	r3, [r7, #16]
      break;
 8002914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002916:	693b      	ldr	r3, [r7, #16]
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	00f42400 	.word	0x00f42400
 800292c:	08003d74 	.word	0x08003d74
 8002930:	08003d84 	.word	0x08003d84
 8002934:	003d0900 	.word	0x003d0900
 8002938:	007a1200 	.word	0x007a1200

0800293c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002940:	4b02      	ldr	r3, [pc, #8]	; (800294c <HAL_RCC_GetHCLKFreq+0x10>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	20000014 	.word	0x20000014

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002954:	f7ff fff2 	bl	800293c <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	; (8002974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	08003d6c 	.word	0x08003d6c

08002978 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <RCC_Delay+0x34>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <RCC_Delay+0x38>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0a5b      	lsrs	r3, r3, #9
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002994:	bf00      	nop
  }
  while (Delay --);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1e5a      	subs	r2, r3, #1
 800299a:	60fa      	str	r2, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f9      	bne.n	8002994 <RCC_Delay+0x1c>
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	20000014 	.word	0x20000014
 80029b0:	10624dd3 	.word	0x10624dd3

080029b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e041      	b.n	8002a4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fad8 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f000 faa2 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d001      	beq.n	8002a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e03a      	b.n	8002ae2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a18      	ldr	r2, [pc, #96]	; (8002aec <HAL_TIM_Base_Start_IT+0x98>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00e      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x58>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a96:	d009      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x58>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x58>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d111      	bne.n	8002ad0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d010      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	e007      	b.n	8002ae0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800

08002af8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a1a      	ldr	r2, [r3, #32]
 8002b16:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10f      	bne.n	8002b40 <HAL_TIM_Base_Stop_IT+0x48>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	f240 4344 	movw	r3, #1092	; 0x444
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_TIM_Base_Stop_IT+0x48>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0202 	mvn.w	r2, #2
 8002b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9b4 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f9a7 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f9b6 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0204 	mvn.w	r2, #4
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f98a 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f97d 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f98c 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0208 	mvn.w	r2, #8
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f960 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f953 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f962 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0210 	mvn.w	r2, #16
 8002c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2208      	movs	r2, #8
 8002c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f936 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f929 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f938 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0201 	mvn.w	r2, #1
 8002cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fe f842 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	2b80      	cmp	r3, #128	; 0x80
 8002ce4:	d10e      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d107      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa7b 	bl	80031fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d107      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8fc 	bl	8002f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0220 	mvn.w	r2, #32
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa46 	bl	80031e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_TIM_ConfigClockSource+0x1c>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e0b4      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x186>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db8:	d03e      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0xd4>
 8002dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dbe:	f200 8087 	bhi.w	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc6:	f000 8086 	beq.w	8002ed6 <HAL_TIM_ConfigClockSource+0x172>
 8002dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dce:	d87f      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd0:	2b70      	cmp	r3, #112	; 0x70
 8002dd2:	d01a      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0xa6>
 8002dd4:	2b70      	cmp	r3, #112	; 0x70
 8002dd6:	d87b      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd8:	2b60      	cmp	r3, #96	; 0x60
 8002dda:	d050      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0x11a>
 8002ddc:	2b60      	cmp	r3, #96	; 0x60
 8002dde:	d877      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de0:	2b50      	cmp	r3, #80	; 0x50
 8002de2:	d03c      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0xfa>
 8002de4:	2b50      	cmp	r3, #80	; 0x50
 8002de6:	d873      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d058      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x13a>
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d86f      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002df0:	2b30      	cmp	r3, #48	; 0x30
 8002df2:	d064      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x15a>
 8002df4:	2b30      	cmp	r3, #48	; 0x30
 8002df6:	d86b      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d060      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x15a>
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d867      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d05c      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x15a>
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d05a      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x15a>
 8002e08:	e062      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e1a:	f000 f968 	bl	80030ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	609a      	str	r2, [r3, #8]
      break;
 8002e36:	e04f      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e48:	f000 f951 	bl	80030ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e5a:	609a      	str	r2, [r3, #8]
      break;
 8002e5c:	e03c      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f000 f8c8 	bl	8003000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2150      	movs	r1, #80	; 0x50
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f91f 	bl	80030ba <TIM_ITRx_SetConfig>
      break;
 8002e7c:	e02c      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f000 f8e6 	bl	800305c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2160      	movs	r1, #96	; 0x60
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f90f 	bl	80030ba <TIM_ITRx_SetConfig>
      break;
 8002e9c:	e01c      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f000 f8a8 	bl	8003000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2140      	movs	r1, #64	; 0x40
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f8ff 	bl	80030ba <TIM_ITRx_SetConfig>
      break;
 8002ebc:	e00c      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f000 f8f6 	bl	80030ba <TIM_ITRx_SetConfig>
      break;
 8002ece:	e003      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed4:	e000      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
	...

08002f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a29      	ldr	r2, [pc, #164]	; (8002ff4 <TIM_Base_SetConfig+0xb8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <TIM_Base_SetConfig+0x30>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d007      	beq.n	8002f6c <TIM_Base_SetConfig+0x30>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <TIM_Base_SetConfig+0xbc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d003      	beq.n	8002f6c <TIM_Base_SetConfig+0x30>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a25      	ldr	r2, [pc, #148]	; (8002ffc <TIM_Base_SetConfig+0xc0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d108      	bne.n	8002f7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1c      	ldr	r2, [pc, #112]	; (8002ff4 <TIM_Base_SetConfig+0xb8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00b      	beq.n	8002f9e <TIM_Base_SetConfig+0x62>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8c:	d007      	beq.n	8002f9e <TIM_Base_SetConfig+0x62>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <TIM_Base_SetConfig+0xbc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d003      	beq.n	8002f9e <TIM_Base_SetConfig+0x62>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <TIM_Base_SetConfig+0xc0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d108      	bne.n	8002fb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <TIM_Base_SetConfig+0xb8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d103      	bne.n	8002fe4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	615a      	str	r2, [r3, #20]
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40000400 	.word	0x40000400
 8002ffc:	40000800 	.word	0x40000800

08003000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f023 0201 	bic.w	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800302a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f023 030a 	bic.w	r3, r3, #10
 800303c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f023 0210 	bic.w	r2, r3, #16
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	031b      	lsls	r3, r3, #12
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003098:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	621a      	str	r2, [r3, #32]
}
 80030b0:	bf00      	nop
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b085      	sub	sp, #20
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f043 0307 	orr.w	r3, r3, #7
 80030dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	609a      	str	r2, [r3, #8]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b087      	sub	sp, #28
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003108:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	021a      	lsls	r2, r3, #8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	431a      	orrs	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	4313      	orrs	r3, r2
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	609a      	str	r2, [r3, #8]
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003140:	2302      	movs	r3, #2
 8003142:	e046      	b.n	80031d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a16      	ldr	r2, [pc, #88]	; (80031dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00e      	beq.n	80031a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d009      	beq.n	80031a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d10c      	bne.n	80031c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800

080031e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <siprintf>:
 800320c:	b40e      	push	{r1, r2, r3}
 800320e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003212:	b500      	push	{lr}
 8003214:	b09c      	sub	sp, #112	; 0x70
 8003216:	ab1d      	add	r3, sp, #116	; 0x74
 8003218:	9002      	str	r0, [sp, #8]
 800321a:	9006      	str	r0, [sp, #24]
 800321c:	9107      	str	r1, [sp, #28]
 800321e:	9104      	str	r1, [sp, #16]
 8003220:	4808      	ldr	r0, [pc, #32]	; (8003244 <siprintf+0x38>)
 8003222:	4909      	ldr	r1, [pc, #36]	; (8003248 <siprintf+0x3c>)
 8003224:	f853 2b04 	ldr.w	r2, [r3], #4
 8003228:	9105      	str	r1, [sp, #20]
 800322a:	6800      	ldr	r0, [r0, #0]
 800322c:	a902      	add	r1, sp, #8
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	f000 f98e 	bl	8003550 <_svfiprintf_r>
 8003234:	2200      	movs	r2, #0
 8003236:	9b02      	ldr	r3, [sp, #8]
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	b01c      	add	sp, #112	; 0x70
 800323c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003240:	b003      	add	sp, #12
 8003242:	4770      	bx	lr
 8003244:	2000006c 	.word	0x2000006c
 8003248:	ffff0208 	.word	0xffff0208

0800324c <memset>:
 800324c:	4603      	mov	r3, r0
 800324e:	4402      	add	r2, r0
 8003250:	4293      	cmp	r3, r2
 8003252:	d100      	bne.n	8003256 <memset+0xa>
 8003254:	4770      	bx	lr
 8003256:	f803 1b01 	strb.w	r1, [r3], #1
 800325a:	e7f9      	b.n	8003250 <memset+0x4>

0800325c <__errno>:
 800325c:	4b01      	ldr	r3, [pc, #4]	; (8003264 <__errno+0x8>)
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	2000006c 	.word	0x2000006c

08003268 <__libc_init_array>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	2600      	movs	r6, #0
 800326c:	4d0c      	ldr	r5, [pc, #48]	; (80032a0 <__libc_init_array+0x38>)
 800326e:	4c0d      	ldr	r4, [pc, #52]	; (80032a4 <__libc_init_array+0x3c>)
 8003270:	1b64      	subs	r4, r4, r5
 8003272:	10a4      	asrs	r4, r4, #2
 8003274:	42a6      	cmp	r6, r4
 8003276:	d109      	bne.n	800328c <__libc_init_array+0x24>
 8003278:	f000 fc7a 	bl	8003b70 <_init>
 800327c:	2600      	movs	r6, #0
 800327e:	4d0a      	ldr	r5, [pc, #40]	; (80032a8 <__libc_init_array+0x40>)
 8003280:	4c0a      	ldr	r4, [pc, #40]	; (80032ac <__libc_init_array+0x44>)
 8003282:	1b64      	subs	r4, r4, r5
 8003284:	10a4      	asrs	r4, r4, #2
 8003286:	42a6      	cmp	r6, r4
 8003288:	d105      	bne.n	8003296 <__libc_init_array+0x2e>
 800328a:	bd70      	pop	{r4, r5, r6, pc}
 800328c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003290:	4798      	blx	r3
 8003292:	3601      	adds	r6, #1
 8003294:	e7ee      	b.n	8003274 <__libc_init_array+0xc>
 8003296:	f855 3b04 	ldr.w	r3, [r5], #4
 800329a:	4798      	blx	r3
 800329c:	3601      	adds	r6, #1
 800329e:	e7f2      	b.n	8003286 <__libc_init_array+0x1e>
 80032a0:	08003dbc 	.word	0x08003dbc
 80032a4:	08003dbc 	.word	0x08003dbc
 80032a8:	08003dbc 	.word	0x08003dbc
 80032ac:	08003dc0 	.word	0x08003dc0

080032b0 <__retarget_lock_acquire_recursive>:
 80032b0:	4770      	bx	lr

080032b2 <__retarget_lock_release_recursive>:
 80032b2:	4770      	bx	lr

080032b4 <_free_r>:
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	4605      	mov	r5, r0
 80032b8:	2900      	cmp	r1, #0
 80032ba:	d040      	beq.n	800333e <_free_r+0x8a>
 80032bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032c0:	1f0c      	subs	r4, r1, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bfb8      	it	lt
 80032c6:	18e4      	addlt	r4, r4, r3
 80032c8:	f000 f8dc 	bl	8003484 <__malloc_lock>
 80032cc:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <_free_r+0x8c>)
 80032ce:	6813      	ldr	r3, [r2, #0]
 80032d0:	b933      	cbnz	r3, 80032e0 <_free_r+0x2c>
 80032d2:	6063      	str	r3, [r4, #4]
 80032d4:	6014      	str	r4, [r2, #0]
 80032d6:	4628      	mov	r0, r5
 80032d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032dc:	f000 b8d8 	b.w	8003490 <__malloc_unlock>
 80032e0:	42a3      	cmp	r3, r4
 80032e2:	d908      	bls.n	80032f6 <_free_r+0x42>
 80032e4:	6820      	ldr	r0, [r4, #0]
 80032e6:	1821      	adds	r1, r4, r0
 80032e8:	428b      	cmp	r3, r1
 80032ea:	bf01      	itttt	eq
 80032ec:	6819      	ldreq	r1, [r3, #0]
 80032ee:	685b      	ldreq	r3, [r3, #4]
 80032f0:	1809      	addeq	r1, r1, r0
 80032f2:	6021      	streq	r1, [r4, #0]
 80032f4:	e7ed      	b.n	80032d2 <_free_r+0x1e>
 80032f6:	461a      	mov	r2, r3
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	b10b      	cbz	r3, 8003300 <_free_r+0x4c>
 80032fc:	42a3      	cmp	r3, r4
 80032fe:	d9fa      	bls.n	80032f6 <_free_r+0x42>
 8003300:	6811      	ldr	r1, [r2, #0]
 8003302:	1850      	adds	r0, r2, r1
 8003304:	42a0      	cmp	r0, r4
 8003306:	d10b      	bne.n	8003320 <_free_r+0x6c>
 8003308:	6820      	ldr	r0, [r4, #0]
 800330a:	4401      	add	r1, r0
 800330c:	1850      	adds	r0, r2, r1
 800330e:	4283      	cmp	r3, r0
 8003310:	6011      	str	r1, [r2, #0]
 8003312:	d1e0      	bne.n	80032d6 <_free_r+0x22>
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4408      	add	r0, r1
 800331a:	6010      	str	r0, [r2, #0]
 800331c:	6053      	str	r3, [r2, #4]
 800331e:	e7da      	b.n	80032d6 <_free_r+0x22>
 8003320:	d902      	bls.n	8003328 <_free_r+0x74>
 8003322:	230c      	movs	r3, #12
 8003324:	602b      	str	r3, [r5, #0]
 8003326:	e7d6      	b.n	80032d6 <_free_r+0x22>
 8003328:	6820      	ldr	r0, [r4, #0]
 800332a:	1821      	adds	r1, r4, r0
 800332c:	428b      	cmp	r3, r1
 800332e:	bf01      	itttt	eq
 8003330:	6819      	ldreq	r1, [r3, #0]
 8003332:	685b      	ldreq	r3, [r3, #4]
 8003334:	1809      	addeq	r1, r1, r0
 8003336:	6021      	streq	r1, [r4, #0]
 8003338:	6063      	str	r3, [r4, #4]
 800333a:	6054      	str	r4, [r2, #4]
 800333c:	e7cb      	b.n	80032d6 <_free_r+0x22>
 800333e:	bd38      	pop	{r3, r4, r5, pc}
 8003340:	20000370 	.word	0x20000370

08003344 <sbrk_aligned>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	4e0e      	ldr	r6, [pc, #56]	; (8003380 <sbrk_aligned+0x3c>)
 8003348:	460c      	mov	r4, r1
 800334a:	6831      	ldr	r1, [r6, #0]
 800334c:	4605      	mov	r5, r0
 800334e:	b911      	cbnz	r1, 8003356 <sbrk_aligned+0x12>
 8003350:	f000 fbaa 	bl	8003aa8 <_sbrk_r>
 8003354:	6030      	str	r0, [r6, #0]
 8003356:	4621      	mov	r1, r4
 8003358:	4628      	mov	r0, r5
 800335a:	f000 fba5 	bl	8003aa8 <_sbrk_r>
 800335e:	1c43      	adds	r3, r0, #1
 8003360:	d00a      	beq.n	8003378 <sbrk_aligned+0x34>
 8003362:	1cc4      	adds	r4, r0, #3
 8003364:	f024 0403 	bic.w	r4, r4, #3
 8003368:	42a0      	cmp	r0, r4
 800336a:	d007      	beq.n	800337c <sbrk_aligned+0x38>
 800336c:	1a21      	subs	r1, r4, r0
 800336e:	4628      	mov	r0, r5
 8003370:	f000 fb9a 	bl	8003aa8 <_sbrk_r>
 8003374:	3001      	adds	r0, #1
 8003376:	d101      	bne.n	800337c <sbrk_aligned+0x38>
 8003378:	f04f 34ff 	mov.w	r4, #4294967295
 800337c:	4620      	mov	r0, r4
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	20000374 	.word	0x20000374

08003384 <_malloc_r>:
 8003384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003388:	1ccd      	adds	r5, r1, #3
 800338a:	f025 0503 	bic.w	r5, r5, #3
 800338e:	3508      	adds	r5, #8
 8003390:	2d0c      	cmp	r5, #12
 8003392:	bf38      	it	cc
 8003394:	250c      	movcc	r5, #12
 8003396:	2d00      	cmp	r5, #0
 8003398:	4607      	mov	r7, r0
 800339a:	db01      	blt.n	80033a0 <_malloc_r+0x1c>
 800339c:	42a9      	cmp	r1, r5
 800339e:	d905      	bls.n	80033ac <_malloc_r+0x28>
 80033a0:	230c      	movs	r3, #12
 80033a2:	2600      	movs	r6, #0
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4630      	mov	r0, r6
 80033a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003480 <_malloc_r+0xfc>
 80033b0:	f000 f868 	bl	8003484 <__malloc_lock>
 80033b4:	f8d8 3000 	ldr.w	r3, [r8]
 80033b8:	461c      	mov	r4, r3
 80033ba:	bb5c      	cbnz	r4, 8003414 <_malloc_r+0x90>
 80033bc:	4629      	mov	r1, r5
 80033be:	4638      	mov	r0, r7
 80033c0:	f7ff ffc0 	bl	8003344 <sbrk_aligned>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	4604      	mov	r4, r0
 80033c8:	d155      	bne.n	8003476 <_malloc_r+0xf2>
 80033ca:	f8d8 4000 	ldr.w	r4, [r8]
 80033ce:	4626      	mov	r6, r4
 80033d0:	2e00      	cmp	r6, #0
 80033d2:	d145      	bne.n	8003460 <_malloc_r+0xdc>
 80033d4:	2c00      	cmp	r4, #0
 80033d6:	d048      	beq.n	800346a <_malloc_r+0xe6>
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	4631      	mov	r1, r6
 80033dc:	4638      	mov	r0, r7
 80033de:	eb04 0903 	add.w	r9, r4, r3
 80033e2:	f000 fb61 	bl	8003aa8 <_sbrk_r>
 80033e6:	4581      	cmp	r9, r0
 80033e8:	d13f      	bne.n	800346a <_malloc_r+0xe6>
 80033ea:	6821      	ldr	r1, [r4, #0]
 80033ec:	4638      	mov	r0, r7
 80033ee:	1a6d      	subs	r5, r5, r1
 80033f0:	4629      	mov	r1, r5
 80033f2:	f7ff ffa7 	bl	8003344 <sbrk_aligned>
 80033f6:	3001      	adds	r0, #1
 80033f8:	d037      	beq.n	800346a <_malloc_r+0xe6>
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	442b      	add	r3, r5
 80033fe:	6023      	str	r3, [r4, #0]
 8003400:	f8d8 3000 	ldr.w	r3, [r8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d038      	beq.n	800347a <_malloc_r+0xf6>
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	42a2      	cmp	r2, r4
 800340c:	d12b      	bne.n	8003466 <_malloc_r+0xe2>
 800340e:	2200      	movs	r2, #0
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	e00f      	b.n	8003434 <_malloc_r+0xb0>
 8003414:	6822      	ldr	r2, [r4, #0]
 8003416:	1b52      	subs	r2, r2, r5
 8003418:	d41f      	bmi.n	800345a <_malloc_r+0xd6>
 800341a:	2a0b      	cmp	r2, #11
 800341c:	d917      	bls.n	800344e <_malloc_r+0xca>
 800341e:	1961      	adds	r1, r4, r5
 8003420:	42a3      	cmp	r3, r4
 8003422:	6025      	str	r5, [r4, #0]
 8003424:	bf18      	it	ne
 8003426:	6059      	strne	r1, [r3, #4]
 8003428:	6863      	ldr	r3, [r4, #4]
 800342a:	bf08      	it	eq
 800342c:	f8c8 1000 	streq.w	r1, [r8]
 8003430:	5162      	str	r2, [r4, r5]
 8003432:	604b      	str	r3, [r1, #4]
 8003434:	4638      	mov	r0, r7
 8003436:	f104 060b 	add.w	r6, r4, #11
 800343a:	f000 f829 	bl	8003490 <__malloc_unlock>
 800343e:	f026 0607 	bic.w	r6, r6, #7
 8003442:	1d23      	adds	r3, r4, #4
 8003444:	1af2      	subs	r2, r6, r3
 8003446:	d0ae      	beq.n	80033a6 <_malloc_r+0x22>
 8003448:	1b9b      	subs	r3, r3, r6
 800344a:	50a3      	str	r3, [r4, r2]
 800344c:	e7ab      	b.n	80033a6 <_malloc_r+0x22>
 800344e:	42a3      	cmp	r3, r4
 8003450:	6862      	ldr	r2, [r4, #4]
 8003452:	d1dd      	bne.n	8003410 <_malloc_r+0x8c>
 8003454:	f8c8 2000 	str.w	r2, [r8]
 8003458:	e7ec      	b.n	8003434 <_malloc_r+0xb0>
 800345a:	4623      	mov	r3, r4
 800345c:	6864      	ldr	r4, [r4, #4]
 800345e:	e7ac      	b.n	80033ba <_malloc_r+0x36>
 8003460:	4634      	mov	r4, r6
 8003462:	6876      	ldr	r6, [r6, #4]
 8003464:	e7b4      	b.n	80033d0 <_malloc_r+0x4c>
 8003466:	4613      	mov	r3, r2
 8003468:	e7cc      	b.n	8003404 <_malloc_r+0x80>
 800346a:	230c      	movs	r3, #12
 800346c:	4638      	mov	r0, r7
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	f000 f80e 	bl	8003490 <__malloc_unlock>
 8003474:	e797      	b.n	80033a6 <_malloc_r+0x22>
 8003476:	6025      	str	r5, [r4, #0]
 8003478:	e7dc      	b.n	8003434 <_malloc_r+0xb0>
 800347a:	605b      	str	r3, [r3, #4]
 800347c:	deff      	udf	#255	; 0xff
 800347e:	bf00      	nop
 8003480:	20000370 	.word	0x20000370

08003484 <__malloc_lock>:
 8003484:	4801      	ldr	r0, [pc, #4]	; (800348c <__malloc_lock+0x8>)
 8003486:	f7ff bf13 	b.w	80032b0 <__retarget_lock_acquire_recursive>
 800348a:	bf00      	nop
 800348c:	2000036c 	.word	0x2000036c

08003490 <__malloc_unlock>:
 8003490:	4801      	ldr	r0, [pc, #4]	; (8003498 <__malloc_unlock+0x8>)
 8003492:	f7ff bf0e 	b.w	80032b2 <__retarget_lock_release_recursive>
 8003496:	bf00      	nop
 8003498:	2000036c 	.word	0x2000036c

0800349c <__ssputs_r>:
 800349c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a0:	461f      	mov	r7, r3
 80034a2:	688e      	ldr	r6, [r1, #8]
 80034a4:	4682      	mov	sl, r0
 80034a6:	42be      	cmp	r6, r7
 80034a8:	460c      	mov	r4, r1
 80034aa:	4690      	mov	r8, r2
 80034ac:	680b      	ldr	r3, [r1, #0]
 80034ae:	d82c      	bhi.n	800350a <__ssputs_r+0x6e>
 80034b0:	898a      	ldrh	r2, [r1, #12]
 80034b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034b6:	d026      	beq.n	8003506 <__ssputs_r+0x6a>
 80034b8:	6965      	ldr	r5, [r4, #20]
 80034ba:	6909      	ldr	r1, [r1, #16]
 80034bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034c0:	eba3 0901 	sub.w	r9, r3, r1
 80034c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034c8:	1c7b      	adds	r3, r7, #1
 80034ca:	444b      	add	r3, r9
 80034cc:	106d      	asrs	r5, r5, #1
 80034ce:	429d      	cmp	r5, r3
 80034d0:	bf38      	it	cc
 80034d2:	461d      	movcc	r5, r3
 80034d4:	0553      	lsls	r3, r2, #21
 80034d6:	d527      	bpl.n	8003528 <__ssputs_r+0x8c>
 80034d8:	4629      	mov	r1, r5
 80034da:	f7ff ff53 	bl	8003384 <_malloc_r>
 80034de:	4606      	mov	r6, r0
 80034e0:	b360      	cbz	r0, 800353c <__ssputs_r+0xa0>
 80034e2:	464a      	mov	r2, r9
 80034e4:	6921      	ldr	r1, [r4, #16]
 80034e6:	f000 fafd 	bl	8003ae4 <memcpy>
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f4:	81a3      	strh	r3, [r4, #12]
 80034f6:	6126      	str	r6, [r4, #16]
 80034f8:	444e      	add	r6, r9
 80034fa:	6026      	str	r6, [r4, #0]
 80034fc:	463e      	mov	r6, r7
 80034fe:	6165      	str	r5, [r4, #20]
 8003500:	eba5 0509 	sub.w	r5, r5, r9
 8003504:	60a5      	str	r5, [r4, #8]
 8003506:	42be      	cmp	r6, r7
 8003508:	d900      	bls.n	800350c <__ssputs_r+0x70>
 800350a:	463e      	mov	r6, r7
 800350c:	4632      	mov	r2, r6
 800350e:	4641      	mov	r1, r8
 8003510:	6820      	ldr	r0, [r4, #0]
 8003512:	f000 faaf 	bl	8003a74 <memmove>
 8003516:	2000      	movs	r0, #0
 8003518:	68a3      	ldr	r3, [r4, #8]
 800351a:	1b9b      	subs	r3, r3, r6
 800351c:	60a3      	str	r3, [r4, #8]
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	4433      	add	r3, r6
 8003522:	6023      	str	r3, [r4, #0]
 8003524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003528:	462a      	mov	r2, r5
 800352a:	f000 fae9 	bl	8003b00 <_realloc_r>
 800352e:	4606      	mov	r6, r0
 8003530:	2800      	cmp	r0, #0
 8003532:	d1e0      	bne.n	80034f6 <__ssputs_r+0x5a>
 8003534:	4650      	mov	r0, sl
 8003536:	6921      	ldr	r1, [r4, #16]
 8003538:	f7ff febc 	bl	80032b4 <_free_r>
 800353c:	230c      	movs	r3, #12
 800353e:	f8ca 3000 	str.w	r3, [sl]
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	f04f 30ff 	mov.w	r0, #4294967295
 8003548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354c:	81a3      	strh	r3, [r4, #12]
 800354e:	e7e9      	b.n	8003524 <__ssputs_r+0x88>

08003550 <_svfiprintf_r>:
 8003550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003554:	4698      	mov	r8, r3
 8003556:	898b      	ldrh	r3, [r1, #12]
 8003558:	4607      	mov	r7, r0
 800355a:	061b      	lsls	r3, r3, #24
 800355c:	460d      	mov	r5, r1
 800355e:	4614      	mov	r4, r2
 8003560:	b09d      	sub	sp, #116	; 0x74
 8003562:	d50e      	bpl.n	8003582 <_svfiprintf_r+0x32>
 8003564:	690b      	ldr	r3, [r1, #16]
 8003566:	b963      	cbnz	r3, 8003582 <_svfiprintf_r+0x32>
 8003568:	2140      	movs	r1, #64	; 0x40
 800356a:	f7ff ff0b 	bl	8003384 <_malloc_r>
 800356e:	6028      	str	r0, [r5, #0]
 8003570:	6128      	str	r0, [r5, #16]
 8003572:	b920      	cbnz	r0, 800357e <_svfiprintf_r+0x2e>
 8003574:	230c      	movs	r3, #12
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	f04f 30ff 	mov.w	r0, #4294967295
 800357c:	e0d0      	b.n	8003720 <_svfiprintf_r+0x1d0>
 800357e:	2340      	movs	r3, #64	; 0x40
 8003580:	616b      	str	r3, [r5, #20]
 8003582:	2300      	movs	r3, #0
 8003584:	9309      	str	r3, [sp, #36]	; 0x24
 8003586:	2320      	movs	r3, #32
 8003588:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800358c:	2330      	movs	r3, #48	; 0x30
 800358e:	f04f 0901 	mov.w	r9, #1
 8003592:	f8cd 800c 	str.w	r8, [sp, #12]
 8003596:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003738 <_svfiprintf_r+0x1e8>
 800359a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800359e:	4623      	mov	r3, r4
 80035a0:	469a      	mov	sl, r3
 80035a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035a6:	b10a      	cbz	r2, 80035ac <_svfiprintf_r+0x5c>
 80035a8:	2a25      	cmp	r2, #37	; 0x25
 80035aa:	d1f9      	bne.n	80035a0 <_svfiprintf_r+0x50>
 80035ac:	ebba 0b04 	subs.w	fp, sl, r4
 80035b0:	d00b      	beq.n	80035ca <_svfiprintf_r+0x7a>
 80035b2:	465b      	mov	r3, fp
 80035b4:	4622      	mov	r2, r4
 80035b6:	4629      	mov	r1, r5
 80035b8:	4638      	mov	r0, r7
 80035ba:	f7ff ff6f 	bl	800349c <__ssputs_r>
 80035be:	3001      	adds	r0, #1
 80035c0:	f000 80a9 	beq.w	8003716 <_svfiprintf_r+0x1c6>
 80035c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035c6:	445a      	add	r2, fp
 80035c8:	9209      	str	r2, [sp, #36]	; 0x24
 80035ca:	f89a 3000 	ldrb.w	r3, [sl]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80a1 	beq.w	8003716 <_svfiprintf_r+0x1c6>
 80035d4:	2300      	movs	r3, #0
 80035d6:	f04f 32ff 	mov.w	r2, #4294967295
 80035da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035de:	f10a 0a01 	add.w	sl, sl, #1
 80035e2:	9304      	str	r3, [sp, #16]
 80035e4:	9307      	str	r3, [sp, #28]
 80035e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035ea:	931a      	str	r3, [sp, #104]	; 0x68
 80035ec:	4654      	mov	r4, sl
 80035ee:	2205      	movs	r2, #5
 80035f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035f4:	4850      	ldr	r0, [pc, #320]	; (8003738 <_svfiprintf_r+0x1e8>)
 80035f6:	f000 fa67 	bl	8003ac8 <memchr>
 80035fa:	9a04      	ldr	r2, [sp, #16]
 80035fc:	b9d8      	cbnz	r0, 8003636 <_svfiprintf_r+0xe6>
 80035fe:	06d0      	lsls	r0, r2, #27
 8003600:	bf44      	itt	mi
 8003602:	2320      	movmi	r3, #32
 8003604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003608:	0711      	lsls	r1, r2, #28
 800360a:	bf44      	itt	mi
 800360c:	232b      	movmi	r3, #43	; 0x2b
 800360e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003612:	f89a 3000 	ldrb.w	r3, [sl]
 8003616:	2b2a      	cmp	r3, #42	; 0x2a
 8003618:	d015      	beq.n	8003646 <_svfiprintf_r+0xf6>
 800361a:	4654      	mov	r4, sl
 800361c:	2000      	movs	r0, #0
 800361e:	f04f 0c0a 	mov.w	ip, #10
 8003622:	9a07      	ldr	r2, [sp, #28]
 8003624:	4621      	mov	r1, r4
 8003626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800362a:	3b30      	subs	r3, #48	; 0x30
 800362c:	2b09      	cmp	r3, #9
 800362e:	d94d      	bls.n	80036cc <_svfiprintf_r+0x17c>
 8003630:	b1b0      	cbz	r0, 8003660 <_svfiprintf_r+0x110>
 8003632:	9207      	str	r2, [sp, #28]
 8003634:	e014      	b.n	8003660 <_svfiprintf_r+0x110>
 8003636:	eba0 0308 	sub.w	r3, r0, r8
 800363a:	fa09 f303 	lsl.w	r3, r9, r3
 800363e:	4313      	orrs	r3, r2
 8003640:	46a2      	mov	sl, r4
 8003642:	9304      	str	r3, [sp, #16]
 8003644:	e7d2      	b.n	80035ec <_svfiprintf_r+0x9c>
 8003646:	9b03      	ldr	r3, [sp, #12]
 8003648:	1d19      	adds	r1, r3, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	9103      	str	r1, [sp, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	bfbb      	ittet	lt
 8003652:	425b      	neglt	r3, r3
 8003654:	f042 0202 	orrlt.w	r2, r2, #2
 8003658:	9307      	strge	r3, [sp, #28]
 800365a:	9307      	strlt	r3, [sp, #28]
 800365c:	bfb8      	it	lt
 800365e:	9204      	strlt	r2, [sp, #16]
 8003660:	7823      	ldrb	r3, [r4, #0]
 8003662:	2b2e      	cmp	r3, #46	; 0x2e
 8003664:	d10c      	bne.n	8003680 <_svfiprintf_r+0x130>
 8003666:	7863      	ldrb	r3, [r4, #1]
 8003668:	2b2a      	cmp	r3, #42	; 0x2a
 800366a:	d134      	bne.n	80036d6 <_svfiprintf_r+0x186>
 800366c:	9b03      	ldr	r3, [sp, #12]
 800366e:	3402      	adds	r4, #2
 8003670:	1d1a      	adds	r2, r3, #4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	9203      	str	r2, [sp, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	bfb8      	it	lt
 800367a:	f04f 33ff 	movlt.w	r3, #4294967295
 800367e:	9305      	str	r3, [sp, #20]
 8003680:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800373c <_svfiprintf_r+0x1ec>
 8003684:	2203      	movs	r2, #3
 8003686:	4650      	mov	r0, sl
 8003688:	7821      	ldrb	r1, [r4, #0]
 800368a:	f000 fa1d 	bl	8003ac8 <memchr>
 800368e:	b138      	cbz	r0, 80036a0 <_svfiprintf_r+0x150>
 8003690:	2240      	movs	r2, #64	; 0x40
 8003692:	9b04      	ldr	r3, [sp, #16]
 8003694:	eba0 000a 	sub.w	r0, r0, sl
 8003698:	4082      	lsls	r2, r0
 800369a:	4313      	orrs	r3, r2
 800369c:	3401      	adds	r4, #1
 800369e:	9304      	str	r3, [sp, #16]
 80036a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036a4:	2206      	movs	r2, #6
 80036a6:	4826      	ldr	r0, [pc, #152]	; (8003740 <_svfiprintf_r+0x1f0>)
 80036a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036ac:	f000 fa0c 	bl	8003ac8 <memchr>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d038      	beq.n	8003726 <_svfiprintf_r+0x1d6>
 80036b4:	4b23      	ldr	r3, [pc, #140]	; (8003744 <_svfiprintf_r+0x1f4>)
 80036b6:	bb1b      	cbnz	r3, 8003700 <_svfiprintf_r+0x1b0>
 80036b8:	9b03      	ldr	r3, [sp, #12]
 80036ba:	3307      	adds	r3, #7
 80036bc:	f023 0307 	bic.w	r3, r3, #7
 80036c0:	3308      	adds	r3, #8
 80036c2:	9303      	str	r3, [sp, #12]
 80036c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036c6:	4433      	add	r3, r6
 80036c8:	9309      	str	r3, [sp, #36]	; 0x24
 80036ca:	e768      	b.n	800359e <_svfiprintf_r+0x4e>
 80036cc:	460c      	mov	r4, r1
 80036ce:	2001      	movs	r0, #1
 80036d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80036d4:	e7a6      	b.n	8003624 <_svfiprintf_r+0xd4>
 80036d6:	2300      	movs	r3, #0
 80036d8:	f04f 0c0a 	mov.w	ip, #10
 80036dc:	4619      	mov	r1, r3
 80036de:	3401      	adds	r4, #1
 80036e0:	9305      	str	r3, [sp, #20]
 80036e2:	4620      	mov	r0, r4
 80036e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036e8:	3a30      	subs	r2, #48	; 0x30
 80036ea:	2a09      	cmp	r2, #9
 80036ec:	d903      	bls.n	80036f6 <_svfiprintf_r+0x1a6>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0c6      	beq.n	8003680 <_svfiprintf_r+0x130>
 80036f2:	9105      	str	r1, [sp, #20]
 80036f4:	e7c4      	b.n	8003680 <_svfiprintf_r+0x130>
 80036f6:	4604      	mov	r4, r0
 80036f8:	2301      	movs	r3, #1
 80036fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80036fe:	e7f0      	b.n	80036e2 <_svfiprintf_r+0x192>
 8003700:	ab03      	add	r3, sp, #12
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	462a      	mov	r2, r5
 8003706:	4638      	mov	r0, r7
 8003708:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <_svfiprintf_r+0x1f8>)
 800370a:	a904      	add	r1, sp, #16
 800370c:	f3af 8000 	nop.w
 8003710:	1c42      	adds	r2, r0, #1
 8003712:	4606      	mov	r6, r0
 8003714:	d1d6      	bne.n	80036c4 <_svfiprintf_r+0x174>
 8003716:	89ab      	ldrh	r3, [r5, #12]
 8003718:	065b      	lsls	r3, r3, #25
 800371a:	f53f af2d 	bmi.w	8003578 <_svfiprintf_r+0x28>
 800371e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003720:	b01d      	add	sp, #116	; 0x74
 8003722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003726:	ab03      	add	r3, sp, #12
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	462a      	mov	r2, r5
 800372c:	4638      	mov	r0, r7
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <_svfiprintf_r+0x1f8>)
 8003730:	a904      	add	r1, sp, #16
 8003732:	f000 f87d 	bl	8003830 <_printf_i>
 8003736:	e7eb      	b.n	8003710 <_svfiprintf_r+0x1c0>
 8003738:	08003d86 	.word	0x08003d86
 800373c:	08003d8c 	.word	0x08003d8c
 8003740:	08003d90 	.word	0x08003d90
 8003744:	00000000 	.word	0x00000000
 8003748:	0800349d 	.word	0x0800349d

0800374c <_printf_common>:
 800374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003750:	4616      	mov	r6, r2
 8003752:	4699      	mov	r9, r3
 8003754:	688a      	ldr	r2, [r1, #8]
 8003756:	690b      	ldr	r3, [r1, #16]
 8003758:	4607      	mov	r7, r0
 800375a:	4293      	cmp	r3, r2
 800375c:	bfb8      	it	lt
 800375e:	4613      	movlt	r3, r2
 8003760:	6033      	str	r3, [r6, #0]
 8003762:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003766:	460c      	mov	r4, r1
 8003768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800376c:	b10a      	cbz	r2, 8003772 <_printf_common+0x26>
 800376e:	3301      	adds	r3, #1
 8003770:	6033      	str	r3, [r6, #0]
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	0699      	lsls	r1, r3, #26
 8003776:	bf42      	ittt	mi
 8003778:	6833      	ldrmi	r3, [r6, #0]
 800377a:	3302      	addmi	r3, #2
 800377c:	6033      	strmi	r3, [r6, #0]
 800377e:	6825      	ldr	r5, [r4, #0]
 8003780:	f015 0506 	ands.w	r5, r5, #6
 8003784:	d106      	bne.n	8003794 <_printf_common+0x48>
 8003786:	f104 0a19 	add.w	sl, r4, #25
 800378a:	68e3      	ldr	r3, [r4, #12]
 800378c:	6832      	ldr	r2, [r6, #0]
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	42ab      	cmp	r3, r5
 8003792:	dc2b      	bgt.n	80037ec <_printf_common+0xa0>
 8003794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003798:	1e13      	subs	r3, r2, #0
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	bf18      	it	ne
 800379e:	2301      	movne	r3, #1
 80037a0:	0692      	lsls	r2, r2, #26
 80037a2:	d430      	bmi.n	8003806 <_printf_common+0xba>
 80037a4:	4649      	mov	r1, r9
 80037a6:	4638      	mov	r0, r7
 80037a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037ac:	47c0      	blx	r8
 80037ae:	3001      	adds	r0, #1
 80037b0:	d023      	beq.n	80037fa <_printf_common+0xae>
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	6922      	ldr	r2, [r4, #16]
 80037b6:	f003 0306 	and.w	r3, r3, #6
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	bf14      	ite	ne
 80037be:	2500      	movne	r5, #0
 80037c0:	6833      	ldreq	r3, [r6, #0]
 80037c2:	f04f 0600 	mov.w	r6, #0
 80037c6:	bf08      	it	eq
 80037c8:	68e5      	ldreq	r5, [r4, #12]
 80037ca:	f104 041a 	add.w	r4, r4, #26
 80037ce:	bf08      	it	eq
 80037d0:	1aed      	subeq	r5, r5, r3
 80037d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037d6:	bf08      	it	eq
 80037d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037dc:	4293      	cmp	r3, r2
 80037de:	bfc4      	itt	gt
 80037e0:	1a9b      	subgt	r3, r3, r2
 80037e2:	18ed      	addgt	r5, r5, r3
 80037e4:	42b5      	cmp	r5, r6
 80037e6:	d11a      	bne.n	800381e <_printf_common+0xd2>
 80037e8:	2000      	movs	r0, #0
 80037ea:	e008      	b.n	80037fe <_printf_common+0xb2>
 80037ec:	2301      	movs	r3, #1
 80037ee:	4652      	mov	r2, sl
 80037f0:	4649      	mov	r1, r9
 80037f2:	4638      	mov	r0, r7
 80037f4:	47c0      	blx	r8
 80037f6:	3001      	adds	r0, #1
 80037f8:	d103      	bne.n	8003802 <_printf_common+0xb6>
 80037fa:	f04f 30ff 	mov.w	r0, #4294967295
 80037fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003802:	3501      	adds	r5, #1
 8003804:	e7c1      	b.n	800378a <_printf_common+0x3e>
 8003806:	2030      	movs	r0, #48	; 0x30
 8003808:	18e1      	adds	r1, r4, r3
 800380a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003814:	4422      	add	r2, r4
 8003816:	3302      	adds	r3, #2
 8003818:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800381c:	e7c2      	b.n	80037a4 <_printf_common+0x58>
 800381e:	2301      	movs	r3, #1
 8003820:	4622      	mov	r2, r4
 8003822:	4649      	mov	r1, r9
 8003824:	4638      	mov	r0, r7
 8003826:	47c0      	blx	r8
 8003828:	3001      	adds	r0, #1
 800382a:	d0e6      	beq.n	80037fa <_printf_common+0xae>
 800382c:	3601      	adds	r6, #1
 800382e:	e7d9      	b.n	80037e4 <_printf_common+0x98>

08003830 <_printf_i>:
 8003830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003834:	7e0f      	ldrb	r7, [r1, #24]
 8003836:	4691      	mov	r9, r2
 8003838:	2f78      	cmp	r7, #120	; 0x78
 800383a:	4680      	mov	r8, r0
 800383c:	460c      	mov	r4, r1
 800383e:	469a      	mov	sl, r3
 8003840:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003842:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003846:	d807      	bhi.n	8003858 <_printf_i+0x28>
 8003848:	2f62      	cmp	r7, #98	; 0x62
 800384a:	d80a      	bhi.n	8003862 <_printf_i+0x32>
 800384c:	2f00      	cmp	r7, #0
 800384e:	f000 80d5 	beq.w	80039fc <_printf_i+0x1cc>
 8003852:	2f58      	cmp	r7, #88	; 0x58
 8003854:	f000 80c1 	beq.w	80039da <_printf_i+0x1aa>
 8003858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800385c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003860:	e03a      	b.n	80038d8 <_printf_i+0xa8>
 8003862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003866:	2b15      	cmp	r3, #21
 8003868:	d8f6      	bhi.n	8003858 <_printf_i+0x28>
 800386a:	a101      	add	r1, pc, #4	; (adr r1, 8003870 <_printf_i+0x40>)
 800386c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003870:	080038c9 	.word	0x080038c9
 8003874:	080038dd 	.word	0x080038dd
 8003878:	08003859 	.word	0x08003859
 800387c:	08003859 	.word	0x08003859
 8003880:	08003859 	.word	0x08003859
 8003884:	08003859 	.word	0x08003859
 8003888:	080038dd 	.word	0x080038dd
 800388c:	08003859 	.word	0x08003859
 8003890:	08003859 	.word	0x08003859
 8003894:	08003859 	.word	0x08003859
 8003898:	08003859 	.word	0x08003859
 800389c:	080039e3 	.word	0x080039e3
 80038a0:	08003909 	.word	0x08003909
 80038a4:	0800399d 	.word	0x0800399d
 80038a8:	08003859 	.word	0x08003859
 80038ac:	08003859 	.word	0x08003859
 80038b0:	08003a05 	.word	0x08003a05
 80038b4:	08003859 	.word	0x08003859
 80038b8:	08003909 	.word	0x08003909
 80038bc:	08003859 	.word	0x08003859
 80038c0:	08003859 	.word	0x08003859
 80038c4:	080039a5 	.word	0x080039a5
 80038c8:	682b      	ldr	r3, [r5, #0]
 80038ca:	1d1a      	adds	r2, r3, #4
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	602a      	str	r2, [r5, #0]
 80038d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038d8:	2301      	movs	r3, #1
 80038da:	e0a0      	b.n	8003a1e <_printf_i+0x1ee>
 80038dc:	6820      	ldr	r0, [r4, #0]
 80038de:	682b      	ldr	r3, [r5, #0]
 80038e0:	0607      	lsls	r7, r0, #24
 80038e2:	f103 0104 	add.w	r1, r3, #4
 80038e6:	6029      	str	r1, [r5, #0]
 80038e8:	d501      	bpl.n	80038ee <_printf_i+0xbe>
 80038ea:	681e      	ldr	r6, [r3, #0]
 80038ec:	e003      	b.n	80038f6 <_printf_i+0xc6>
 80038ee:	0646      	lsls	r6, r0, #25
 80038f0:	d5fb      	bpl.n	80038ea <_printf_i+0xba>
 80038f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80038f6:	2e00      	cmp	r6, #0
 80038f8:	da03      	bge.n	8003902 <_printf_i+0xd2>
 80038fa:	232d      	movs	r3, #45	; 0x2d
 80038fc:	4276      	negs	r6, r6
 80038fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003902:	230a      	movs	r3, #10
 8003904:	4859      	ldr	r0, [pc, #356]	; (8003a6c <_printf_i+0x23c>)
 8003906:	e012      	b.n	800392e <_printf_i+0xfe>
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	6820      	ldr	r0, [r4, #0]
 800390c:	1d19      	adds	r1, r3, #4
 800390e:	6029      	str	r1, [r5, #0]
 8003910:	0605      	lsls	r5, r0, #24
 8003912:	d501      	bpl.n	8003918 <_printf_i+0xe8>
 8003914:	681e      	ldr	r6, [r3, #0]
 8003916:	e002      	b.n	800391e <_printf_i+0xee>
 8003918:	0641      	lsls	r1, r0, #25
 800391a:	d5fb      	bpl.n	8003914 <_printf_i+0xe4>
 800391c:	881e      	ldrh	r6, [r3, #0]
 800391e:	2f6f      	cmp	r7, #111	; 0x6f
 8003920:	bf0c      	ite	eq
 8003922:	2308      	moveq	r3, #8
 8003924:	230a      	movne	r3, #10
 8003926:	4851      	ldr	r0, [pc, #324]	; (8003a6c <_printf_i+0x23c>)
 8003928:	2100      	movs	r1, #0
 800392a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800392e:	6865      	ldr	r5, [r4, #4]
 8003930:	2d00      	cmp	r5, #0
 8003932:	bfa8      	it	ge
 8003934:	6821      	ldrge	r1, [r4, #0]
 8003936:	60a5      	str	r5, [r4, #8]
 8003938:	bfa4      	itt	ge
 800393a:	f021 0104 	bicge.w	r1, r1, #4
 800393e:	6021      	strge	r1, [r4, #0]
 8003940:	b90e      	cbnz	r6, 8003946 <_printf_i+0x116>
 8003942:	2d00      	cmp	r5, #0
 8003944:	d04b      	beq.n	80039de <_printf_i+0x1ae>
 8003946:	4615      	mov	r5, r2
 8003948:	fbb6 f1f3 	udiv	r1, r6, r3
 800394c:	fb03 6711 	mls	r7, r3, r1, r6
 8003950:	5dc7      	ldrb	r7, [r0, r7]
 8003952:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003956:	4637      	mov	r7, r6
 8003958:	42bb      	cmp	r3, r7
 800395a:	460e      	mov	r6, r1
 800395c:	d9f4      	bls.n	8003948 <_printf_i+0x118>
 800395e:	2b08      	cmp	r3, #8
 8003960:	d10b      	bne.n	800397a <_printf_i+0x14a>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	07de      	lsls	r6, r3, #31
 8003966:	d508      	bpl.n	800397a <_printf_i+0x14a>
 8003968:	6923      	ldr	r3, [r4, #16]
 800396a:	6861      	ldr	r1, [r4, #4]
 800396c:	4299      	cmp	r1, r3
 800396e:	bfde      	ittt	le
 8003970:	2330      	movle	r3, #48	; 0x30
 8003972:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003976:	f105 35ff 	addle.w	r5, r5, #4294967295
 800397a:	1b52      	subs	r2, r2, r5
 800397c:	6122      	str	r2, [r4, #16]
 800397e:	464b      	mov	r3, r9
 8003980:	4621      	mov	r1, r4
 8003982:	4640      	mov	r0, r8
 8003984:	f8cd a000 	str.w	sl, [sp]
 8003988:	aa03      	add	r2, sp, #12
 800398a:	f7ff fedf 	bl	800374c <_printf_common>
 800398e:	3001      	adds	r0, #1
 8003990:	d14a      	bne.n	8003a28 <_printf_i+0x1f8>
 8003992:	f04f 30ff 	mov.w	r0, #4294967295
 8003996:	b004      	add	sp, #16
 8003998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	f043 0320 	orr.w	r3, r3, #32
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	2778      	movs	r7, #120	; 0x78
 80039a6:	4832      	ldr	r0, [pc, #200]	; (8003a70 <_printf_i+0x240>)
 80039a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	6829      	ldr	r1, [r5, #0]
 80039b0:	061f      	lsls	r7, r3, #24
 80039b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80039b6:	d402      	bmi.n	80039be <_printf_i+0x18e>
 80039b8:	065f      	lsls	r7, r3, #25
 80039ba:	bf48      	it	mi
 80039bc:	b2b6      	uxthmi	r6, r6
 80039be:	07df      	lsls	r7, r3, #31
 80039c0:	bf48      	it	mi
 80039c2:	f043 0320 	orrmi.w	r3, r3, #32
 80039c6:	6029      	str	r1, [r5, #0]
 80039c8:	bf48      	it	mi
 80039ca:	6023      	strmi	r3, [r4, #0]
 80039cc:	b91e      	cbnz	r6, 80039d6 <_printf_i+0x1a6>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	f023 0320 	bic.w	r3, r3, #32
 80039d4:	6023      	str	r3, [r4, #0]
 80039d6:	2310      	movs	r3, #16
 80039d8:	e7a6      	b.n	8003928 <_printf_i+0xf8>
 80039da:	4824      	ldr	r0, [pc, #144]	; (8003a6c <_printf_i+0x23c>)
 80039dc:	e7e4      	b.n	80039a8 <_printf_i+0x178>
 80039de:	4615      	mov	r5, r2
 80039e0:	e7bd      	b.n	800395e <_printf_i+0x12e>
 80039e2:	682b      	ldr	r3, [r5, #0]
 80039e4:	6826      	ldr	r6, [r4, #0]
 80039e6:	1d18      	adds	r0, r3, #4
 80039e8:	6961      	ldr	r1, [r4, #20]
 80039ea:	6028      	str	r0, [r5, #0]
 80039ec:	0635      	lsls	r5, r6, #24
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	d501      	bpl.n	80039f6 <_printf_i+0x1c6>
 80039f2:	6019      	str	r1, [r3, #0]
 80039f4:	e002      	b.n	80039fc <_printf_i+0x1cc>
 80039f6:	0670      	lsls	r0, r6, #25
 80039f8:	d5fb      	bpl.n	80039f2 <_printf_i+0x1c2>
 80039fa:	8019      	strh	r1, [r3, #0]
 80039fc:	2300      	movs	r3, #0
 80039fe:	4615      	mov	r5, r2
 8003a00:	6123      	str	r3, [r4, #16]
 8003a02:	e7bc      	b.n	800397e <_printf_i+0x14e>
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	2100      	movs	r1, #0
 8003a08:	1d1a      	adds	r2, r3, #4
 8003a0a:	602a      	str	r2, [r5, #0]
 8003a0c:	681d      	ldr	r5, [r3, #0]
 8003a0e:	6862      	ldr	r2, [r4, #4]
 8003a10:	4628      	mov	r0, r5
 8003a12:	f000 f859 	bl	8003ac8 <memchr>
 8003a16:	b108      	cbz	r0, 8003a1c <_printf_i+0x1ec>
 8003a18:	1b40      	subs	r0, r0, r5
 8003a1a:	6060      	str	r0, [r4, #4]
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	6123      	str	r3, [r4, #16]
 8003a20:	2300      	movs	r3, #0
 8003a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a26:	e7aa      	b.n	800397e <_printf_i+0x14e>
 8003a28:	462a      	mov	r2, r5
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	4640      	mov	r0, r8
 8003a2e:	6923      	ldr	r3, [r4, #16]
 8003a30:	47d0      	blx	sl
 8003a32:	3001      	adds	r0, #1
 8003a34:	d0ad      	beq.n	8003992 <_printf_i+0x162>
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	079b      	lsls	r3, r3, #30
 8003a3a:	d413      	bmi.n	8003a64 <_printf_i+0x234>
 8003a3c:	68e0      	ldr	r0, [r4, #12]
 8003a3e:	9b03      	ldr	r3, [sp, #12]
 8003a40:	4298      	cmp	r0, r3
 8003a42:	bfb8      	it	lt
 8003a44:	4618      	movlt	r0, r3
 8003a46:	e7a6      	b.n	8003996 <_printf_i+0x166>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	4632      	mov	r2, r6
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	4640      	mov	r0, r8
 8003a50:	47d0      	blx	sl
 8003a52:	3001      	adds	r0, #1
 8003a54:	d09d      	beq.n	8003992 <_printf_i+0x162>
 8003a56:	3501      	adds	r5, #1
 8003a58:	68e3      	ldr	r3, [r4, #12]
 8003a5a:	9903      	ldr	r1, [sp, #12]
 8003a5c:	1a5b      	subs	r3, r3, r1
 8003a5e:	42ab      	cmp	r3, r5
 8003a60:	dcf2      	bgt.n	8003a48 <_printf_i+0x218>
 8003a62:	e7eb      	b.n	8003a3c <_printf_i+0x20c>
 8003a64:	2500      	movs	r5, #0
 8003a66:	f104 0619 	add.w	r6, r4, #25
 8003a6a:	e7f5      	b.n	8003a58 <_printf_i+0x228>
 8003a6c:	08003d97 	.word	0x08003d97
 8003a70:	08003da8 	.word	0x08003da8

08003a74 <memmove>:
 8003a74:	4288      	cmp	r0, r1
 8003a76:	b510      	push	{r4, lr}
 8003a78:	eb01 0402 	add.w	r4, r1, r2
 8003a7c:	d902      	bls.n	8003a84 <memmove+0x10>
 8003a7e:	4284      	cmp	r4, r0
 8003a80:	4623      	mov	r3, r4
 8003a82:	d807      	bhi.n	8003a94 <memmove+0x20>
 8003a84:	1e43      	subs	r3, r0, #1
 8003a86:	42a1      	cmp	r1, r4
 8003a88:	d008      	beq.n	8003a9c <memmove+0x28>
 8003a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a92:	e7f8      	b.n	8003a86 <memmove+0x12>
 8003a94:	4601      	mov	r1, r0
 8003a96:	4402      	add	r2, r0
 8003a98:	428a      	cmp	r2, r1
 8003a9a:	d100      	bne.n	8003a9e <memmove+0x2a>
 8003a9c:	bd10      	pop	{r4, pc}
 8003a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003aa6:	e7f7      	b.n	8003a98 <memmove+0x24>

08003aa8 <_sbrk_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	2300      	movs	r3, #0
 8003aac:	4d05      	ldr	r5, [pc, #20]	; (8003ac4 <_sbrk_r+0x1c>)
 8003aae:	4604      	mov	r4, r0
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	602b      	str	r3, [r5, #0]
 8003ab4:	f7fd fb22 	bl	80010fc <_sbrk>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d102      	bne.n	8003ac2 <_sbrk_r+0x1a>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	b103      	cbz	r3, 8003ac2 <_sbrk_r+0x1a>
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	20000368 	.word	0x20000368

08003ac8 <memchr>:
 8003ac8:	4603      	mov	r3, r0
 8003aca:	b510      	push	{r4, lr}
 8003acc:	b2c9      	uxtb	r1, r1
 8003ace:	4402      	add	r2, r0
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	d101      	bne.n	8003ada <memchr+0x12>
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	e003      	b.n	8003ae2 <memchr+0x1a>
 8003ada:	7804      	ldrb	r4, [r0, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	428c      	cmp	r4, r1
 8003ae0:	d1f6      	bne.n	8003ad0 <memchr+0x8>
 8003ae2:	bd10      	pop	{r4, pc}

08003ae4 <memcpy>:
 8003ae4:	440a      	add	r2, r1
 8003ae6:	4291      	cmp	r1, r2
 8003ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003aec:	d100      	bne.n	8003af0 <memcpy+0xc>
 8003aee:	4770      	bx	lr
 8003af0:	b510      	push	{r4, lr}
 8003af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003af6:	4291      	cmp	r1, r2
 8003af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003afc:	d1f9      	bne.n	8003af2 <memcpy+0xe>
 8003afe:	bd10      	pop	{r4, pc}

08003b00 <_realloc_r>:
 8003b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b04:	4680      	mov	r8, r0
 8003b06:	4614      	mov	r4, r2
 8003b08:	460e      	mov	r6, r1
 8003b0a:	b921      	cbnz	r1, 8003b16 <_realloc_r+0x16>
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b12:	f7ff bc37 	b.w	8003384 <_malloc_r>
 8003b16:	b92a      	cbnz	r2, 8003b24 <_realloc_r+0x24>
 8003b18:	f7ff fbcc 	bl	80032b4 <_free_r>
 8003b1c:	4625      	mov	r5, r4
 8003b1e:	4628      	mov	r0, r5
 8003b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b24:	f000 f81b 	bl	8003b5e <_malloc_usable_size_r>
 8003b28:	4284      	cmp	r4, r0
 8003b2a:	4607      	mov	r7, r0
 8003b2c:	d802      	bhi.n	8003b34 <_realloc_r+0x34>
 8003b2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b32:	d812      	bhi.n	8003b5a <_realloc_r+0x5a>
 8003b34:	4621      	mov	r1, r4
 8003b36:	4640      	mov	r0, r8
 8003b38:	f7ff fc24 	bl	8003384 <_malloc_r>
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d0ed      	beq.n	8003b1e <_realloc_r+0x1e>
 8003b42:	42bc      	cmp	r4, r7
 8003b44:	4622      	mov	r2, r4
 8003b46:	4631      	mov	r1, r6
 8003b48:	bf28      	it	cs
 8003b4a:	463a      	movcs	r2, r7
 8003b4c:	f7ff ffca 	bl	8003ae4 <memcpy>
 8003b50:	4631      	mov	r1, r6
 8003b52:	4640      	mov	r0, r8
 8003b54:	f7ff fbae 	bl	80032b4 <_free_r>
 8003b58:	e7e1      	b.n	8003b1e <_realloc_r+0x1e>
 8003b5a:	4635      	mov	r5, r6
 8003b5c:	e7df      	b.n	8003b1e <_realloc_r+0x1e>

08003b5e <_malloc_usable_size_r>:
 8003b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b62:	1f18      	subs	r0, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bfbc      	itt	lt
 8003b68:	580b      	ldrlt	r3, [r1, r0]
 8003b6a:	18c0      	addlt	r0, r0, r3
 8003b6c:	4770      	bx	lr
	...

08003b70 <_init>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr

08003b7c <_fini>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	bf00      	nop
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr
